#!/usr/bin/sh


DEFAULT_SINK=$(pactl get-default-sink)

get_running_sinks() {
    pactl --format=json list sinks  | jq -r ".[] | select(.name | contains (\"$DEFAULT_SINK\"))$1"
}

get_running_volume_percent() {
    get_running_sinks '.volume.[].value_percent' | sort -u
}

APPNAME=pactlsam
sinknums=$(get_running_sinks | jq -r '.index')

sourcenum=$(pactl list sources | grep Source | tail -n2 | head -n1) # TODO check the good source
sourcenum=${sourcenum##*#}

check=$(cat /tmp/tmpNID)
[ -z "$check" ] && echo 0 > /tmp/tmpNID

check_vol () {
    shit=$1
    level=$(get_running_volume_percent)
    level=${level%%%}

    : $(( sum= shit + level ))
    [ $sum -le 150 ]
}

notif () {
    level=$(get_running_volume_percent)
    level=${level%%%}

    if pactl get-sink-mute @DEFAULT_SINK@ | grep -q "Mute: yes"; then
        icon=Mute_Icon
    else
        icon=Speaker_Icon
    fi
    notify-send "$level%" -i $icon -e -a "$APPNAME" -t 1000 -h boolean:SWAYNC_BYPASS_DND:true -e -p -r "$(cat /tmp/tmpNID)" -h int:value:$level > /tmp/tmpNID
}

case $1 in
    --toggle)
        echo "$sinknums" | while read sinknum; do
            pactl set-sink-mute $sinknum toggle
        done
        notif ;;
    --mictoggle) pactl set-source-mute $sourcenum toggle ;;
    --plus)
        if check_vol $2; then
            echo "$sinknums" | while read sinknum; do
                pactl set-sink-volume $sinknum +$2%
            done
            notif
        else
            notif --silent
        fi ;;
    --moins)
        echo "$sinknums" | while read sinknum; do
            pactl set-sink-volume $sinknum -$2%
        done
        notif ;;
    --reset)
        echo "$sinknums" | while read sinknum; do
            pactl set-sink-volume $sinknum 100%
        done
        notif ;;
    *) "usage: pactlsam --toggle --plus or --moins"
esac
