#!/usr/bin/env bash

. "${HOME}/.config/password_defaults"
. "${HOME}/.config/zowl.sh"

[ -z "$MENU_CMD" ] && MENU_CMD="wofi -d -i -nb -l 20 -p"
[ -z "$MENU_SECRET_CMD" ] && MENU_SECRET_CMD="wofi -d"
[ -z "$TYPE_CMD" ] && TYPE_CMD="wtype -"


MENU_CMD="$MENU_CMD -l 20 -p"
MENU="Add\nAddOTP\nEdit\nDelete\nPush"

if [ -z "$DISPLAY" ]; then
    MENU_CMD="fzf --prompt"
    MENU="Edit\nDelete\nPush"
    TYPE_CMD=cat
fi

shopt -s nullglob globstar

typeit=1

prefix=${PASSWORD_STORE_DIR-~/.password-store}
password_files=( "$prefix"/**/*.gpg )
password_files=( "${password_files[@]#"$prefix"/}" )
password_files=( "${password_files[@]%.gpg}" )

pass_insert() {
    local content=$1 loc=$2
    pass insert "$loc" <<EOF
$(echo -e "$content\n$content")
EOF
}

add_entry(){
    local name="$1"
    local username="$2"
    local password="$3"
    local note="$4"

    [[ -z "$name" ]] && exit
    [[ -z "$username" ]] && exit
    [[ -z "$password" ]] && exit

    echo add entry for "$name"

    pass_insert "$username" "$name/username"
    pass_insert "$password" "$name/password"

    if [[ -n "$note" ]];then
        echo "$note" > "$prefix/$name/note.txt"
        pass git add "$prefix/$name/note.txt"
        pass git commit -m "add given notes for $prefix/$name"
    fi
}

if [[ -n "$1" ]]; then
    add_entry "$1" "$2" "$3" "$4"
    exit
fi

password=$(echo -e "$MENU\n\n$(printf '%s\n' "${password_files[@]}")" | $MENU_CMD "Password Manager: ") || exit

case "$password" in
    AddOTP)
        directory=$(pass ls | grep '^├──' | sed 's/├── //' | $MENU_CMD -l -p "Directory: ")
        tmp_image=/tmp/temp_qr.png
        scan_image=$(scrot -s $tmp_image)
        qr_content=$(zbarimg "$tmp_image" 2>/dev/null | sed 's/.*\(otpauth.*\)/\1/')
        rm -f $tmp_image
        pass_insert "$qr_content" "$directory/otp"
        ;;
    Add)
        name=$(echo "" | $MENU_CMD "Name: ") || exit
        username=$(echo "$DEFAULT_USER" | $MENU_CMD "Username: ") || exit
        pass_choice=$(echo -e "Generated\nManual" | $MENU_CMD "How to create the Password: ") || exit
        case "$pass_choice" in
            Manual)
                loop=t
                while [[ "$loop" == "t" ]]; do
                    password=$(echo "" | $MENU_SECRET_CMD -p "Password: ") || exit
                    retype_password=$(echo "" | $MENU_SECRET_CMD -p "Retype Password: ") || exit
                    [[ ! "$retype_password" == "$password" ]] && notify-send -a mypassmenu "Passwords doesn't match" || loop=f
                done
                ;;
            Generated)
                pass_type=$(echo -e "Letter + Digits + Special Char\nLetter + Digit\nLetter only" | $MENU_CMD "Choose: ") || exit
                pass_length=$(echo -e "20\n30\n10" | $MENU_CMD "Length: ") || exit
                case "$pass_type" in
                    "Letter only")
                        tr_option='A-Za-z' ;;
                    "Letter + Digit")
                        tr_option='A-Za-z0-9' ;;
                    "Letter + Digits + Special Char")
                        tr_option='A-Za-z0-9!"#$%&'\''()*+,-./:;<=>?@[\]^_`{|}~' ;;
                esac
                read password <<EOF
$(tr -dc "$tr_option" </dev/urandom | head -c "$pass_length")
EOF
                ;;
            *) exit
        esac
        note=$(echo "" | $MENU_CMD "Notes: ") || exit

        add_entry "$name" "$username" "$password" "$note"
        ;;

    Edit)
        edit_choice=$(printf '%s\n' "${password_files[@]}" | $MENU_CMD "Edit entry: ") || exit
        echo "TOTO : st -n floatingwin -e pass edit $edit_choice but it is not working"
        ;;
    Push)
        pass git push origin master > "$prefix/.last_push.log" && $NOTIFY_CMD "push successful" || $NOTIFY_CMD "push unsucessful"
        ;;
    Delete)
        choice=$(ls "$prefix" | $MENU_CMD "Delete entry: ") || exit
        [[ -z "$choice" ]] && exit
        besure=$(echo -e "No\nYes" | $MENU_CMD "Are you sure you want to delete $choice? ") || exit
        if [[ "$besure" == "Yes" ]]; then
            pass rm -rf "$choice"
        fi
        ;;

    *)
        [ -z "$password" ] && exit 1
        [ -z "$typeit" ] && pass show -c "$password" 2>/dev/null && exit 0

        [ "${password##*/}" = "otp" ] && opt="otp" || opt="show"
        pass $opt "$password" | { IFS= read -r pass; printf %s "$pass"; } | $TYPE_CMD
esac
