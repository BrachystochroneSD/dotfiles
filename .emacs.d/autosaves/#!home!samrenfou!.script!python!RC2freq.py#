import sys
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.widgets import Slider

unit=" Hz"
R=[]
C=[]
ft=[]

num_entry=range((len(sys.argv)-1)/3)

class RC2FREQ(test):
    def





for i in num_entry:
    R.append(float(sys.argv[i*3+1]))
    C.append(float(sys.argv[i*3+2]))
    ft.append(sys.argv[i*3+3])


def freq_func(R,C):
    return 1/(2*np.pi*R*C)

def Xc(f,C):
    return 1/(2*np.pi*f*C)

def HPF_func(f,R,C):
    return R/(np.sqrt(R**2+Xc(f,C)**2))

def LPF_func(f,R,C):
    return Xc(f,C)/(np.sqrt(R**2+Xc(f,C)**2))

def power_func(f,R,C,filter_type):
    if filter_type=='LPF':
        return 20*np.log10(LPF_func(f,R,C))
    else:
        return 20*np.log10(HPF_func(f,R,C))

def res_func(f):
    res=0
    for i in num_entry:
        res+=power_func(f,R[i],C[i],ft[i])
    return res

sfreq = Slider(pot1, 'Pot1', 0, 100000.0, valinit=50)

def update(val):
    freq = sfreq.val
    l.set_ydata(amp*np.sin(2*np.pi*freq*t))
    fig.canvas.draw_idle()
sfreq.on_changed(update)


freqs=np.arange(1,1000000,1)
plot=plt.plot(freqs,res_func(freqs))



plt.xscale('log')
plt.grid(visible=True, which='both', linestyle='solid',alpha=0.5)
plt.ylim(-50,10)
plt.ylabel('Gain (dB)')
plt.xlabel('Frequency (Hz)')
plt.show()

