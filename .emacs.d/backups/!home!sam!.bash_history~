cd Don
cd Downloads/
ls
chmod +x keepassx2pass.py 
./keepassx2pass.py test.xml 
pass ls
pass show
pass init
man pass
man gpg
gpg --show-key
gpg --show-keys 
gpg --show-keyring 
gpg --list-options show-keyring
man pass
cd Downloads/
ls
rm tabbed-0.6*
ls
cat test.xml 
ls
chmod +x keepassx2pass.py 
sudo pacman -S pass
./keepassx2pass.py test.xml 
pass init samrenfou@hotmail.com
cd
cd .password-store/
ls
ll
cat .gpg-id 
ls
cd ..
cd Downloads/
ls
./keepassx2pass.py test.xml 
pass show 
cat keepassx2pass.py 
ls
chmod +x keepass2csv2pass.py 
./keepass2csv2pass.py export.csv 
cat keepass2csv2pass.py 
cat keepass2csv2pass.py -h
keepass2csv2pass.py -h
./keepass2csv2pass.py -h
sudo pacman -Rs pass
cd
rm -r .password-store/
cd Downloads/
ls
cd ..
ls
mv Documents/ documents
mv documents/ Documents
cd Dropbox/
ls
sudo pacman -S python-pip python2-pip
du -sch ./*
cd
cd /
du -sch ./*
sudo du -sch ./*
sudo du -
cat ~/Documents/treesize_18_02 
cd home/
ls
sudo du -sch ./*
cd sam/
sudo du -sch ./*
echo "-------------\n\n" >> Documents/treesize_18_02 
sudo du -sch ./* >> Documents/treesize_18_02 
cat Documents/treesize_18_02 
cd Documents/
ls
cd ..
sudo pip install PyUserInput
cd Downloads/
git clone https://aur.archlinux.org/python-pyuserinput-git.git
ls
cd python-pyuserinput-git/
ls
makepkg -Acs
ls
cd ..
rm -r ./*
sudo rm -r ./*
ls
ll
pip --version
sudo pip install Pykeepass
man pinentry
pinentry -h
sudo pacman -S xdotool
sudo pip install --user keepmenu 
cd Downloads/
git clone https://aur.archlinux.org/python-keepmenu-git.git
ls
rm python-keepmenu-git.git 
rm keepass2csv2pass.py 
rm keepassx2pass.py 
rm export.csv 
rm test.xml 
ls
cd python-keepmenu-git/
ls
makepkg -Acs
sudo pacman -S python-pyuserinput-git
cd ..
cd python-keepmenu-git/
cd
source .bashrc 
cd .local/bin
ls
cd .local/
ls
cd share/
ls
cd ..
ls
sudo pip install --user keepmenu
cd
cd Downloads/
git clone https://github.com/firecat53/keepmenu.git
ls
cd keepmenu/
ls
./keepmenu 
d
cd
cd Dropbox/
ls
./Downloads/keepmenu/keepmenu 
cd .config/keepmenu/
ls
cat config.ini 
emacs config.ini 
cd
cd Downloads/keepmenu/
./keepmenu 
cd .config/tabbed-0.6/
make clean && make && sudo make install
sudo pacman -Sc
vi 
neofetch
sudo killall redshift 
nm-applet 
cat .offlineimaprc 
cd Downloads/
ls
mkdir ~/.local/share/ca-certificates
mv DigiCertAssuredIDRootCA.crt ~/.local/share/ca-certificates/
cat /etc/ssl/openssl.cnf
openssl --version
openssl help
openssl version 
man surf
openssl help
sudo emacs
sudo reboot
cat /etc/ssl/openssl.cnf
nm-applet 
sudo pip uninstall keepmenu
source .bashrc 
cd Downloads/
git clone https://aur.archlinux.org/python-pykeepass-git.git
ls
git clone https://aur.archlinux.org/python-pyuserinput-git.git
ls
cd python-pyuserinput-git/
makepkg -Acs
sudo pacman -S python-xlib 
ls
sudo pacman -S python-pykeepass python-pyuserinput
sudo pacman -S python-pykeepass
pip install pykeepass
sudo pip install pykeepass
sudo pip install pyuserinput
cd ..
ls
rm -r python-py*
sudo rm -r python-py*
ls
cd python-keepmenu-git/
ls
makepkg -Acs
cat python-keepmenu.install 
ls
cd ..
./keepmenu/keepmenu 
cd Downloads/
ls
tar -xvf python-keepmenu-git.tar.gz 
ls
rm python-keepmenu-git.tar.gz 
cd python-keepmenu-git/
ls
makepkg -Acs
keepmenu
sudo pip uninstall keepmenu
pip uninstall keepmenu
sudo pip uninstall Pykeepass
sudo pip uninstall PyUserInput
./Downloads/keepmenu/keepmenu 
cd Downloads/
ls
man dmenu
sudo pip install Pykeepass
sudo pip install PyUserInput
./Downloads/keepmenu/keepmenu 
sudo killall keepmenu
sudo pacman -Rs keepass 
sudo pip uninstall keepmenu
sudo pip uninstall PyUserInput
sudo pip uninstall Pykeepass
sudo pip install passhole
pip install gpgme
sudo pip install gpgme
sudo pacman -S libgpgme-dev
sudo pacman -S gpgme
cd Downloads/
ls
rm -r python-keepmenu-git/
ls
git clone https://aur.archlinux.org/gpgme-python-git.git
ls
cd dp
cd gpgme-python-git/
ls
makepkg -Acs
cd ..
ls
rm gpgme-python-git/
rm -r gpgme-python-git/
rm -rf gpgme-python-git/
ls
cd keepmenu/
ls
./keepmenu 
ls
cd ..
mv keepmenu/ ~/.keepmenu
cd
cd .keepmenu/
ls
cd ..
ls
man dmenu
cd .config/tabbed-0.6/
make clean && make && sudo make install
cd .config/tabbed-0.6/
make clean && make && sudo make install
cd
cd Dropbox/
ls
mv Samuel_Main.kdbx ../Documents/
cd ..
cp Documents/Samuel_Main.kdbx Dropbox/
.script/weatherdir/weather
.script/weatherdir/weatherbis 
sudo pacman -S xrandr 
sudo pacman -S xorg-xrandr 
dwarffortresshack 
dwarffortress
sudo dwarffortress
cd Documents/detente/dwarf_fortress/
ls
cd df_linux/
ls
chmod +x df
chmod +x dfhack
ls
./df
cd ..
sudo pacman -S dwarffortress 
cd
cd .dwarffortress/
ls
cd data/
ls
cd ..
ls
cd data/
ls
cd save/
ls
cd ..
ls
cd init
ls
cd 
cd .config/tabbed-0.6/
ls
make clean && make && sudo make install
neofetch 
cd Downloads/
ls
l
ll
git clone https://aur.archlinux.org/dfhack.git
ls
cd dfhack/
ls
cat PKGBUILD 
makepkg -Acs
cd ..
ls
cd ..
dwarffortress 
cd Downloads/dfhack/
ls
pacman -U dfhack-0.44.12-3-x86_64.pkg.tar.xz 
sudo pacman -U dfhack-0.44.12-3-x86_64.pkg.tar.xz 
dwarffortress 
cd ..
dfhack
pacman -Qu
cd
dfhack -h
dfhack-run 
dfhack-run -h
dfhack-run help
dfhack-run
man dfhack-run
cd .config/st/
ls
cd patches/
ls
cd ..
ls
cat config.def.h 
cd 
cd .keepmenu/
cd .dwarffortress/
ls
cd data/
ls
cd
cd Dropbox/
cd data-custom-df/
ls
cp -r * ~/.dwarffortress/data/
neofetch
cd ..
cd .script/
ls
cd python/
ls
cd ..
rm -r python/
ls
cd note/
ls
cat notescript 
./notescript 
dfhack
cd .config/surf-2.0/
make clean
make
sudo make install
cd .surf/
ls
cd cache/
ls
cd databases/
ls
cd ..
ls
cd WebKitCache/
ls
cd ..
ls
cd Downloads/
ls
rm -r dfhack/
rm -rf dfhack/
ls
ll
git clone http://git.r-36.net/hosts-gen
ls
cd hosts-gen/
ls
ls examples/gethostszero 
cat examples/gethostszero 
sudo mkdir /etc/hosts.d
sudo cp examples/gethostszero /bin/
sudo chmod 775 /bin/gethostszero 
sudo /bin/gethostszero 
sudo host-gen
sudo hosts-gen
sudo pacman -S hosts-gen
cat /etc/hosts.d/02-hosts.zero 
sudo make install
sudo hosts-gen 
cd Downloads/
cd
cd .config/st/
ls
cd patches/
ls
cd ..
cd
cd Downloads/
git clone https://git.suckless.org/st
ls
cd st/
ls
cd ..
rm -rf hosts-gen/
cd st/
ls
neofetch
.script/youtube/youtubesearch 
cd .config/keepmenu/
ls
cd 
cd .keepmenu/
ls
./keepmenu -h
man ./keepmenu
sudo pacman -S vim
wal -i Images/wallpapersdoc/bojack-horseman-pool-above.png 
man wal
wal -h
wal -i Images/wallpapersdoc/
sudo pacman -S imagemagick
sudo pacman -S pidof
sudo pacman -S procps-ng 
sudo pip install pywal
wal -i Images/wallpapersdoc/633243.jpg 
neofetch
htop
wal -i ~/Images/wallpapersdoc/
neofetch
cd Downloads/
ls
mkdir st/patches
mv *diff st/patches/
cd st/
ls
patch -p1 < patches/st-alpha-0.8.2.diff 
patch -p1 < patches/st-scrollback-20190122-3be4cf1.diff 
make
./st 
make clean 
ls
make
ls
./st 
make
./st 
mv ../st-xresources-20190105-3be4cf1.diff patches/
patch -p1 < patches/st-xresources-20190105-3be4cf1.diff 
ls
rm config.h 
make clean 
make
./st 
{ MODKEY|ShiftMask,     XK_KP_Add,      xzoom,          {.f = +1} },; { MODKEY|ShiftMask,     XK_KP_Subtract, xzoom,          {.f = -1} },; { MODKEY|ShiftMask,     XK_KP_Multiply, xzoomreset,     {.f =  0} },
cd Downloads/st/
make
./st 
make
./st 
sudo make install 
cd ..
rm -rf ~/.config/st/
mv st/ ~/.config/
cd /
sudo du -sch ./* >> ~/Documents/treesize_18_02_2 
echo "-----------------" >> ~/Documents/treesize_18_02_2 
cd
sudo du -sch ./* >> ~/Documents/treesize_18_02_2 
man dmenu 
dmenu_run 
neofetch
neofetch
dmenu
cat Documents/treesize_18_02 | demnu
cat Documents/treesize_18_02 | demenu
cat Documents/treesize_18_02 | dmenu
cd Downloads/
ls
ll
git clone http://git.suckless.org/dmenu
ls
cd dmenu/
ls
./dmenu_run 
make
./dmenu
ls
./dmenu_path 
./dmenu_run 
. "~/.cache/wal/colors.sh"
cat Documents/treesize_18_02 | ./Downloads/dmenu/dmenu
cat ~/Documents/treesize_18_02 | ~/Downloads/dmenu/dmenu
cd Downloads/dmenu/
make
cat ~/Documents/treesize_18_02 | ~/Downloads/dmenu/dmenu
make
cat ~/Documents/treesize_18_02 | ~/Downloads/dmenu/dmenu
sudo make install 
source ~/.bashrc 
cd ~/.cache/wal/
ls
cat colors.sh 
cat colors.sh | dmenu
source .bashrc
source ~/.bashrc
ls | dmenu
source ~/.bashrc
ls | dmenu
chmod +x .script/dmen 
ls | .script/dmen 
source .bashrc 
ls | dmenu
dmenu -l 10
ls | dmenu -l 10
ls | dmenu -p bite
ls | dmenu -p bite -i
ls | dmenu -p bite
ls
.script/youtube/youtubesearch 
ls | dmenu -p bite -l 10
ls | ~/.script/dmen -p bite -l 10
ls | ~/.script/dmen -p bite -l 10 -i
ls | ~/.script/dmen -p 'bite' -l 10 -i
.script/youtube/youtubesearch 
source .bashrc 
neofetch
ls | dmenu
cd .config/tabbed-0.6/
make
sudo make install 
neofetch
configbash 
neofetch
cd .config/st/
make
./st 
sudo make install
neofetch
ls
cd .config/st/
make
./st 
make
./st 
make
./st 
make
./st 
make
./st 
make
./st 
make
./st 
make
./st 
make
./st 
neofetch 
ls | dmenu
neofetch
cd .config/tabbed-0.6/
cat config.h 
make
sudo make install
make clean
make
sudo make install 
cd
source .bashrc 
.script/youtube/youtubesearch 
cd .script/
ls
cd wallpaperfadechanger/
ks
ls
cd ..
ls
rm wallpaperfadechanger/
rm -r wallpaperfadechanger/
ls
cd surf/
ls
cd ..
ls
ll
l
rm treesize 
ls
cat system-usb-udev.sh 
echo $color0
vim
vim .config/i3/config
man ncmpcpp 
ls
neofetch
ls | .script/dmen 
ls | .script/dmen -i -l 10 -p 'test' | echo
ls | .script/dmen -i -l 10 -p 'test' | cd
ls | .script/dmen -i -l 10 -p 'test'
ls Movies/ | .script/dmen -i -l 10 -p 'test' | mpv
ls Movies/ | dmenu -i -l 10 -p 'test'
ls Movies/ | .script/dmen -i -l 10 -p 'test'
ls | dmenu
source .bashrc 
.script/youtube/youtubesearch 
chmod +x .script/dmen 
.script/youtube/youtubesearch 
ls
htop 
ls | dmenu
cd Images/
mkdir screenshots
source .bashrc 
neofetch 
neofetch
scrot Images/%Y-%d-%T-screenshot.png
neofetch
htop
#!/bin/bash -i
apikey=AIzaSyAxoOzmqHSjvkv0LzYm5v4vUzvjorBu374
max_results=30
shopt -s expand_aliases
url_encode(){     ret=$(echo $@);     echo $(python -c "import urllib.parse, sys; print(urllib.parse.quote_plus(sys.argv[1]))" "$ret"); }
aborted(){     echo "Aborted";     exit; }
get_channel_id(){     channoulname=$(url_encode $channelname);     channelsearch=$(curl -s 'https://www.googleapis.com/youtube/v3/search?q='$channoulname'&type=channel&maxResults=25&part=snippet&key='$apikey)     chanchoice=$(echo $channelsearch | jq -r '.items[] | .snippet.channelTitle' | awk '{printf ("%2d: %s\n",NR,$0)}' | dmenu -l 10 -i -p 'Which channel ?' | sed 's/:.*//');     [[ ! -n $chanchoice ]] && youtube_search;     (( numchan= $chanchoice - 1 ));     channelID=$(echo $channelsearch | jq -r '.items['$numchan'].snippet.channelId'); }
youtube_search(){     channelID="";     searchingshit=$(cat ~/.script/youtube/datas/searchhistory | awk '{print$0}END{printf "\n\nChannel option"}' | dmenu -i -l 20 -p "Youtube search:") || aborted;     if [[ $searchingshit == 'Channel option' ]];then 	channelname=$(echo | dmenu -p "Channel Search") || youtube_search;         get_channel_id; 	searchingshit=$(echo | dmenu -i -l 20 -p "Search on this channel:") || youtube_search ;     fi;     echo $searchingshit >~/.script/youtube/datas/searchhistory     echo "Searching for "$searchingshit;     searchingshit=$(url_encode $searchingshit);     if [[ ! -n $channelID ]];then 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey;     else 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey'&channelId='$channelID;     fi         youtubesearchdata=$(curl -s $curly)     video=$(echo $youtubesearchdata | jq -r '.items[] | .snippet.title, .snippet.channelTitle, .snippet.publishedAt' | awk '{printf ("%.85s\n",$0)}' | awk '(NR%3==1){name=$0}(NR%3==2){date=$0}(NR%3==0){printf ("%2d: %-90s %-30s %.10s \n", NR/3, name, date, $0)}' | dmenu -l 30 -i -p 'YTSearch' | sed 's/:.*//');     [[ ! -n $video ]] && youtube_search;     (( num= $video - 1 ));     videoID=$(echo $youtubesearchdata | jq -r '.items['$num'].id.videoId')     res=$(echo -e "720\n1080\n360" | dmenu -i -p "Which resolution? (if avalaible)") || youtube_search;     mpv --ytdl-format="[height<=?"$res"]" 'https://www.youtube.com/watch?v='$videoID    ;     exit; }
if ping -q -c 1 -W 1 1.1.1.1 &>/dev/null; then     youtube_search; else     echo "No internet connection"; fi
#!/bin/bash -i
apikey=AIzaSyAxoOzmqHSjvkv0LzYm5v4vUzvjorBu374
max_results=30
shopt -s expand_aliases
url_encode(){     ret=$(echo $@);     echo $(python -c "import urllib.parse, sys; print(urllib.parse.quote_plus(sys.argv[1]))" "$ret"); }
aborted(){     echo "Aborted";     exit; }
get_channel_id(){     channoulname=$(url_encode $channelname);     channelsearch=$(curl -s 'https://www.googleapis.com/youtube/v3/search?q='$channoulname'&type=channel&maxResults=25&part=snippet&key='$apikey)     chanchoice=$(echo $channelsearch | jq -r '.items[] | .snippet.channelTitle' | awk '{printf ("%2d: %s\n",NR,$0)}' | dmenu -l 10 -i -p 'Which channel ?' | sed 's/:.*//');     [[ ! -n $chanchoice ]] && youtube_search;     (( numchan= $chanchoice - 1 ));     channelID=$(echo $channelsearch | jq -r '.items['$numchan'].snippet.channelId'); }
youtube_search(){     channelID="";     searchingshit=$(cat ~/.script/youtube/datas/searchhistory | awk '{print$0}END{printf "\n\nChannel option"}' | dmenu -i -l 20 -p "Youtube search:") || aborted;     if [[ $searchingshit == 'Channel option' ]];then 	channelname=$(echo | dmenu -p "Channel Search") || youtube_search;         get_channel_id; 	searchingshit=$(echo | dmenu -i -l 20 -p "Search on this channel:") || youtube_search ;     fi;     echo $searchingshit >~/.script/youtube/datas/searchhistory     echo "Searching for "$searchingshit;     searchingshit=$(url_encode $searchingshit);     if [[ ! -n $channelID ]];then 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey;     else 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey'&channelId='$channelID;     fi         youtubesearchdata=$(curl -s $curly)     video=$(echo $youtubesearchdata | jq -r '.items[] | .snippet.title, .snippet.channelTitle, .snippet.publishedAt' | awk '{printf ("%.85s\n",$0)}' | awk '(NR%3==1){name=$0}(NR%3==2){date=$0}(NR%3==0){printf ("%2d: %-90s %-30s %.10s \n", NR/3, name, date, $0)}' | dmenu -l 30 -i -p 'YTSearch' | sed 's/:.*//');     [[ ! -n $video ]] && youtube_search;     (( num= $video - 1 ));     videoID=$(echo $youtubesearchdata | jq -r '.items['$num'].id.videoId')     res=$(echo -e "720\n1080\n360" | dmenu -i -p "Which resolution? (if avalaible)") || youtube_search;     mpv --ytdl-format="[height<=?"$res"]" 'https://www.youtube.com/watch?v='$videoID    ;     exit; }
if ping -q -c 1 -W 1 1.1.1.1 &>/dev/null; then     youtube_search; else     echo "No internet connection"; fi
#!/bin/bash -i
apikey=AIzaSyAxoOzmqHSjvkv0LzYm5v4vUzvjorBu374
max_results=30
shopt -s expand_aliases
url_encode(){     ret=$(echo $@);     echo $(python -c "import urllib.parse, sys; print(urllib.parse.quote_plus(sys.argv[1]))" "$ret"); }
aborted(){     echo "Aborted";     exit; }
get_channel_id(){     channoulname=$(url_encode $channelname);     channelsearch=$(curl -s 'https://www.googleapis.com/youtube/v3/search?q='$channoulname'&type=channel&maxResults=25&part=snippet&key='$apikey)     chanchoice=$(echo $channelsearch | jq -r '.items[] | .snippet.channelTitle' | awk '{printf ("%2d: %s\n",NR,$0)}' | dmenu -l 10 -i -p 'Which channel ?' | sed 's/:.*//');     [[ ! -n $chanchoice ]] && youtube_search;     (( numchan= $chanchoice - 1 ));     channelID=$(echo $channelsearch | jq -r '.items['$numchan'].snippet.channelId'); }
youtube_search(){     channelID="";     searchingshit=$(cat ~/.script/youtube/datas/searchhistory | awk '{print$0}END{printf "\n\nChannel option"}' | dmenu -i -l 20 -p "Youtube search:") || aborted;     if [[ $searchingshit == 'Channel option' ]];then 	channelname=$(echo | dmenu -p "Channel Search") || youtube_search;         get_channel_id; 	searchingshit=$(echo | dmenu -i -l 20 -p "Search on this channel:") || youtube_search ;     fi;     echo $searchingshit >~/.script/youtube/datas/searchhistory     echo "Searching for "$searchingshit;     searchingshit=$(url_encode $searchingshit);     if [[ ! -n $channelID ]];then 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey;     else 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey'&channelId='$channelID;     fi         youtubesearchdata=$(curl -s $curly)     video=$(echo $youtubesearchdata | jq -r '.items[] | .snippet.title, .snippet.channelTitle, .snippet.publishedAt' | awk '{printf ("%.85s\n",$0)}' | awk '(NR%3==1){name=$0}(NR%3==2){date=$0}(NR%3==0){printf ("%2d: %-90s %-30s %.10s \n", NR/3, name, date, $0)}' | dmenu -l 30 -i -p 'YTSearch' | sed 's/:.*//');     [[ ! -n $video ]] && youtube_search;     (( num= $video - 1 ));     videoID=$(echo $youtubesearchdata | jq -r '.items['$num'].id.videoId')     res=$(echo -e "720\n1080\n360" | dmenu -i -p "Which resolution? (if avalaible)") || youtube_search;     mpv --ytdl-format="[height<=?"$res"]" 'https://www.youtube.com/watch?v='$videoID    ;     exit; }
if ping -q -c 1 -W 1 1.1.1.1 &>/dev/null; then     youtube_search; else     echo "No internet connection"; fi
#!/bin/bash -i
apikey=AIzaSyAxoOzmqHSjvkv0LzYm5v4vUzvjorBu374
max_results=30
shopt -s expand_aliases
url_encode(){     ret=$(echo $@);     echo $(python -c "import urllib.parse, sys; print(urllib.parse.quote_plus(sys.argv[1]))" "$ret"); }
aborted(){     echo "Aborted";     exit; }
get_channel_id(){     channoulname=$(url_encode $channelname);     channelsearch=$(curl -s 'https://www.googleapis.com/youtube/v3/search?q='$channoulname'&type=channel&maxResults=25&part=snippet&key='$apikey)     chanchoice=$(echo $channelsearch | jq -r '.items[] | .snippet.channelTitle' | awk '{printf ("%2d: %s\n",NR,$0)}' | dmenu -l 10 -i -p 'Which channel ?' | sed 's/:.*//');     [[ ! -n $chanchoice ]] && youtube_search;     (( numchan= $chanchoice - 1 ));     channelID=$(echo $channelsearch | jq -r '.items['$numchan'].snippet.channelId'); }
youtube_search(){     channelID="";     searchingshit=$(cat ~/.script/youtube/datas/searchhistory | awk '{print$0}END{printf "\n\nChannel option"}' | dmenu -i -l 20 -p "Youtube search:") || aborted;     if [[ $searchingshit == 'Channel option' ]];then 	channelname=$(echo | dmenu -p "Channel Search") || youtube_search;         get_channel_id; 	searchingshit=$(echo | dmenu -i -l 20 -p "Search on this channel:") || youtube_search ;     fi;     echo $searchingshit >~/.script/youtube/datas/searchhistory     echo "Searching for "$searchingshit;     searchingshit=$(url_encode $searchingshit);     if [[ ! -n $channelID ]];then 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey;     else 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey'&channelId='$channelID;     fi         youtubesearchdata=$(curl -s $curly)     video=$(echo $youtubesearchdata | jq -r '.items[] | .snippet.title, .snippet.channelTitle, .snippet.publishedAt' | awk '{printf ("%.85s\n",$0)}' | awk '(NR%3==1){name=$0}(NR%3==2){date=$0}(NR%3==0){printf ("%2d: %-90s %-30s %.10s \n", NR/3, name, date, $0)}' | dmenu -l 30 -i -p 'YTSearch' | sed 's/:.*//');     [[ ! -n $video ]] && youtube_search;     (( num= $video - 1 ));     videoID=$(echo $youtubesearchdata | jq -r '.items['$num'].id.videoId')     res=$(echo -e "720\n1080\n360" | dmenu -i -p "Which resolution? (if avalaible)") || youtube_search;     mpv --ytdl-format="[height<=?"$res"]" 'https://www.youtube.com/watch?v='$videoID    ;     exit; }
if ping -q -c 1 -W 1 1.1.1.1 &>/dev/null; then     youtube_search; else     echo "No internet connection"; fi
#!/bin/bash -i
apikey=AIzaSyAxoOzmqHSjvkv0LzYm5v4vUzvjorBu374
max_results=30
shopt -s expand_aliases
url_encode(){     ret=$(echo $@);     echo $(python -c "import urllib.parse, sys; print(urllib.parse.quote_plus(sys.argv[1]))" "$ret"); }
aborted(){     echo "Aborted";     exit; }
get_channel_id(){     channoulname=$(url_encode $channelname);     channelsearch=$(curl -s 'https://www.googleapis.com/youtube/v3/search?q='$channoulname'&type=channel&maxResults=25&part=snippet&key='$apikey)     chanchoice=$(echo $channelsearch | jq -r '.items[] | .snippet.channelTitle' | awk '{printf ("%2d: %s\n",NR,$0)}' | dmenu -l 10 -i -p 'Which channel ?' | sed 's/:.*//');     [[ ! -n $chanchoice ]] && youtube_search;     (( numchan= $chanchoice - 1 ));     channelID=$(echo $channelsearch | jq -r '.items['$numchan'].snippet.channelId'); }
youtube_search(){     channelID="";     searchingshit=$(cat ~/.script/youtube/datas/searchhistory | awk '{print$0}END{printf "\n\nChannel option"}' | dmenu -i -l 20 -p "Youtube search:") || aborted;     if [[ $searchingshit == 'Channel option' ]];then 	channelname=$(echo | dmenu -p "Channel Search") || youtube_search;         get_channel_id; 	searchingshit=$(echo | dmenu -i -l 20 -p "Search on this channel:") || youtube_search ;     fi;     echo $searchingshit >~/.script/youtube/datas/searchhistory     echo "Searching for "$searchingshit;     searchingshit=$(url_encode $searchingshit);     if [[ ! -n $channelID ]];then 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey;     else 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey'&channelId='$channelID;     fi         youtubesearchdata=$(curl -s $curly)     video=$(echo $youtubesearchdata | jq -r '.items[] | .snippet.title, .snippet.channelTitle, .snippet.publishedAt' | awk '{printf ("%.85s\n",$0)}' | awk '(NR%3==1){name=$0}(NR%3==2){date=$0}(NR%3==0){printf ("%2d: %-90s %-30s %.10s \n", NR/3, name, date, $0)}' | dmenu -l 30 -i -p 'YTSearch' | sed 's/:.*//');     [[ ! -n $video ]] && youtube_search;     (( num= $video - 1 ));     videoID=$(echo $youtubesearchdata | jq -r '.items['$num'].id.videoId')     res=$(echo -e "720\n1080\n360" | dmenu -i -p "Which resolution? (if avalaible)") || youtube_search;     mpv --ytdl-format="[height<=?"$res"]" 'https://www.youtube.com/watch?v='$videoID    ;     exit; }
if ping -q -c 1 -W 1 1.1.1.1 &>/dev/null; then     youtube_search; else     echo "No internet connection"; fi
#!/bin/bash -i
apikey=AIzaSyAxoOzmqHSjvkv0LzYm5v4vUzvjorBu374
max_results=30
shopt -s expand_aliases
url_encode(){     ret=$(echo $@);     echo $(python -c "import urllib.parse, sys; print(urllib.parse.quote_plus(sys.argv[1]))" "$ret"); }
aborted(){     echo "Aborted";     exit; }
get_channel_id(){     channoulname=$(url_encode $channelname);     channelsearch=$(curl -s 'https://www.googleapis.com/youtube/v3/search?q='$channoulname'&type=channel&maxResults=25&part=snippet&key='$apikey)     chanchoice=$(echo $channelsearch | jq -r '.items[] | .snippet.channelTitle' | awk '{printf ("%2d: %s\n",NR,$0)}' | dmenu -l 10 -i -p 'Which channel ?' | sed 's/:.*//');     [[ ! -n $chanchoice ]] && youtube_search;     (( numchan= $chanchoice - 1 ));     channelID=$(echo $channelsearch | jq -r '.items['$numchan'].snippet.channelId'); }
youtube_search(){     channelID="";     searchingshit=$(cat ~/.script/youtube/datas/searchhistory | awk '{print$0}END{printf "\n\nChannel option"}' | dmenu -i -l 20 -p "Youtube search:") || aborted;     if [[ $searchingshit == 'Channel option' ]];then 	channelname=$(echo | dmenu -p "Channel Search") || youtube_search;         get_channel_id; 	searchingshit=$(echo | dmenu -i -l 20 -p "Search on this channel:") || youtube_search ;     fi;     echo $searchingshit >~/.script/youtube/datas/searchhistory     echo "Searching for "$searchingshit;     searchingshit=$(url_encode $searchingshit);     if [[ ! -n $channelID ]];then 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey;     else 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey'&channelId='$channelID;     fi         youtubesearchdata=$(curl -s $curly)     video=$(echo $youtubesearchdata | jq -r '.items[] | .snippet.title, .snippet.channelTitle, .snippet.publishedAt' | awk '{printf ("%.85s\n",$0)}' | awk '(NR%3==1){name=$0}(NR%3==2){date=$0}(NR%3==0){printf ("%2d: %-90s %-30s %.10s \n", NR/3, name, date, $0)}' | dmenu -l 30 -i -p 'YTSearch' | sed 's/:.*//');     [[ ! -n $video ]] && youtube_search;     (( num= $video - 1 ));     videoID=$(echo $youtubesearchdata | jq -r '.items['$num'].id.videoId')     res=$(echo -e "720\n1080\n360" | dmenu -i -p "Which resolution? (if avalaible)") || youtube_search;     mpv --ytdl-format="[height<=?"$res"]" 'https://www.youtube.com/watch?v='$videoID    ;     exit; }
if ping -q -c 1 -W 1 1.1.1.1 &>/dev/null; then     youtube_search; else     echo "No internet connection"; fi
neofetch 
ffmpeg help
sudo pacman -S xorg-xwd 
xwd 
xwd -root -out screenshot.png
ls
feh screenshot.png 
xwd -root -out screenshot.xwd
sudo pacman -Rs xorg-xwd 
sudo pacman -S scrot
scrot Images/%Y-%d-%T-screenshot.png
fet Images/2019-18-21\:40\:24-screenshot.png 
feh Images/2019-18-21\:40\:24-screenshot.png 
cd Images/
ls
fet 2019-18-21\:46\:30-screenshot.png 
feh 2019-18-21\:46\:30-screenshot.png 
cd
source .bashrc 
man compton
cd .config/st/
make
./st 
sudo make install
ska compton
compton
man compton
compton
cd Downloads/
ls
rm compton-no-blur-limit-git.git 
git clone https://aur.archlinux.org/compton-no-blur-limit-git.git
ls
cd compton-no-blur-limit-git/
ls
makepkg -Acs
pacman -U compton-no-blur-limit-git-0.1_beta2.87.g316eac0-1-x86_64.pkg.tar.xz 
sudo pacman -U compton-no-blur-limit-git-0.1_beta2.87.g316eac0-1-x86_64.pkg.tar.xz 
compton
man compton
compton
cat Downloads/config 
compton 
compton-trans -h
man compton-trans 
compton-trans 
man composite 
man compton
compton
compto
compton
sudo pacman -S nitrogen 
compton
sudo pacman -Rs nitrogen 
compton
neofetch
compton --blur-background --blur-kern=$(python compton-convgen.py gaussian 15 -f sigma=3.14 --dump-compton)
cd Downloads/
ls
ska compton
compton --blur-background --blur-kern=$(python compton-convgen.py gaussian 15 -f sigma=3.14 --dump-compton)
compton --blur-background --blur-kern=$(python compton-convgen.py gaussian 11 -f sigma=3.14 --dump-compton)
compton
compton --blur-background --blur-kern=$(python compton-convgen.py gaussian 7 -f sigma=3.14 --dump-compton)
compton --blur-background --blur-kern=$(python compton-convgen.py gaussian 7 -f sigma=10.14 --dump-compton)
compton --blur-background --blur-kern=$(python compton-convgen.py box 7 -f sigma=10.14 --dump-compton)
compton
compton --blur-background --blur-kern=$(python compton-convgen.py box 7 -f sigma=10.14 --dump-compton)
python ~/Downloads/compton-convgen.py gaussian 15 -f sigma=3.14 --dump-compton
python ~/Downloads/compton-convgen.py gaussian 5 -f sigma=3.14 --dump-compton
compton
python ~/Downloads/compton-convgen.py gaussian 20 -f sigma=3.14 --dump-compton
python ~/Downloads/compton-convgen.py gaussian 10 -f sigma=3.14 --dump-compton
compton
#!/bin/bash -i
apikey=AIzaSyAxoOzmqHSjvkv0LzYm5v4vUzvjorBu374
max_results=30
url_encode(){     ret=$(echo $@);     echo $(python -c "import urllib.parse, sys; print(urllib.parse.quote_plus(sys.argv[1]))" "$ret"); }
aborted(){     echo "Aborted";     exit; }
get_channel_id(){     channoulname=$(url_encode $channelname);     channelsearch=$(curl -s 'https://www.googleapis.com/youtube/v3/search?q='$channoulname'&type=channel&maxResults=25&part=snippet&key='$apikey)     chanchoice=$(echo $channelsearch | jq -r '.items[] | .snippet.channelTitle' | awk '{printf ("%2d: %s\n",NR,$0)}' | dmen -l 10 -i -p 'Which channel ?' | sed 's/:.*//');     [[ ! -n $chanchoice ]] && youtube_search;     (( numchan= $chanchoice - 1 ));     channelID=$(echo $channelsearch | jq -r '.items['$numchan'].snippet.channelId'); }
youtube_search(){     channelID="";     searchingshit=$(cat ~/.script/youtube/datas/searchhistory | awk '{print$0}END{printf "\n\nChannel option"}' | dmen -i -l 20 -p "Youtube search:") || aborted;     if [[ $searchingshit == 'Channel option' ]];then 	channelname=$(echo | dmen -p "Channel Search") || youtube_search;         get_channel_id; 	searchingshit=$(echo | dmen -i -l 20 -p "Search on this channel:") || youtube_search ;     fi;     echo $searchingshit >~/.script/youtube/datas/searchhistory     echo "Searching for "$searchingshit;     searchingshit=$(url_encode $searchingshit);     if [[ ! -n $channelID ]];then 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey;     else 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey'&channelId='$channelID;     fi         youtubesearchdata=$(curl -s $curly)     video=$(echo $youtubesearchdata | jq -r '.items[] | .snippet.title, .snippet.channelTitle, .snippet.publishedAt' | awk '{printf ("%.85s\n",$0)}' | awk '(NR%3==1){name=$0}(NR%3==2){date=$0}(NR%3==0){printf ("%2d: %-90s %-30s %.10s \n", NR/3, name, date, $0)}' | dmen -l 30 -i -p 'YTSearch' | sed 's/:.*//');     [[ ! -n $video ]] && youtube_search;     (( num= $video - 1 ));     videoID=$(echo $youtubesearchdata | jq -r '.items['$num'].id.videoId')     res=$(echo -e "720\n1080\n360" | dmen -i -p "Which resolution? (if avalaible)") || youtube_search;     mpv --ytdl-format="[height<=?"$res"]" 'https://www.youtube.com/watch?v='$videoID    ;     exit; }
if ping -q -c 1 -W 1 1.1.1.1 &>/dev/null; then     youtube_search; else     echo "No internet connection"; fi
#!/bin/bash -i
apikey=AIzaSyAxoOzmqHSjvkv0LzYm5v4vUzvjorBu374
max_results=30
url_encode(){     ret=$(echo $@);     echo $(python -c "import urllib.parse, sys; print(urllib.parse.quote_plus(sys.argv[1]))" "$ret"); }
aborted(){     echo "Aborted";     exit; }
get_channel_id(){     channoulname=$(url_encode $channelname);     channelsearch=$(curl -s 'https://www.googleapis.com/youtube/v3/search?q='$channoulname'&type=channel&maxResults=25&part=snippet&key='$apikey)     chanchoice=$(echo $channelsearch | jq -r '.items[] | .snippet.channelTitle' | awk '{printf ("%2d: %s\n",NR,$0)}' | dmen -l 10 -i -p 'Which channel ?' | sed 's/:.*//');     [[ ! -n $chanchoice ]] && youtube_search;     (( numchan= $chanchoice - 1 ));     channelID=$(echo $channelsearch | jq -r '.items['$numchan'].snippet.channelId'); }
youtube_search(){     channelID="";     searchingshit=$(cat ~/.script/youtube/datas/searchhistory | awk '{print$0}END{printf "\n\nChannel option"}' | dmen -i -l 20 -p "Youtube search:") || aborted;     if [[ $searchingshit == 'Channel option' ]];then 	channelname=$(echo | dmen -p "Channel Search") || youtube_search;         get_channel_id; 	searchingshit=$(echo | dmen -i -l 20 -p "Search on this channel:") || youtube_search ;     fi;     echo $searchingshit >~/.script/youtube/datas/searchhistory     echo "Searching for "$searchingshit;     searchingshit=$(url_encode $searchingshit);     if [[ ! -n $channelID ]];then 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey;     else 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey'&channelId='$channelID;     fi         youtubesearchdata=$(curl -s $curly)     video=$(echo $youtubesearchdata | jq -r '.items[] | .snippet.title, .snippet.channelTitle, .snippet.publishedAt' | awk '{printf ("%.85s\n",$0)}' | awk '(NR%3==1){name=$0}(NR%3==2){date=$0}(NR%3==0){printf ("%2d: %-90s %-30s %.10s \n", NR/3, name, date, $0)}' | dmen -l 30 -i -p 'YTSearch' | sed 's/:.*//');     [[ ! -n $video ]] && youtube_search;     (( num= $video - 1 ));     videoID=$(echo $youtubesearchdata | jq -r '.items['$num'].id.videoId')     res=$(echo -e "720\n1080\n360" | dmen -i -p "Which resolution? (if avalaible)") || youtube_search;     mpv --ytdl-format="[height<=?"$res"]" 'https://www.youtube.com/watch?v='$videoID    ;     exit; }
if ping -q -c 1 -W 1 1.1.1.1 &>/dev/null; then     youtube_search; else     echo "No internet connection"; fi
ls /bin/
cat /bin/dmenu
cd .script/
ls
cat dmen 
ls | ./dmen 
sudo cp dmen /bin/
dmen
ls | dmen
./youtube/youtubesearch 
visudo 
sudo visudo
sudo vim /bin/dmen
#!/bin/bash -i
apikey=AIzaSyAxoOzmqHSjvkv0LzYm5v4vUzvjorBu374
max_results=30
shopt -s expand_aliases
url_encode(){     ret=$(echo $@);     echo $(python -c "import urllib.parse, sys; print(urllib.parse.quote_plus(sys.argv[1]))" "$ret"); }
aborted(){     echo "Aborted";     exit; }
get_channel_id(){     channoulname=$(url_encode $channelname);     channelsearch=$(curl -s 'https://www.googleapis.com/youtube/v3/search?q='$channoulname'&type=channel&maxResults=25&part=snippet&key='$apikey)     chanchoice=$(echo $channelsearch | jq -r '.items[] | .snippet.channelTitle' | awk '{printf ("%2d: %s\n",NR,$0)}' | dmenu -l 10 -i -p 'Which channel ?' | sed 's/:.*//');     [[ ! -n $chanchoice ]] && youtube_search;     (( numchan= $chanchoice - 1 ));     channelID=$(echo $channelsearch | jq -r '.items['$numchan'].snippet.channelId'); }
youtube_search(){     channelID="";     searchingshit=$(cat ~/.script/youtube/datas/searchhistory | awk '{print$0}END{printf "\n\nChannel option"}' | dmenu -i -l 20 -p "Youtube search:") || aborted;     if [[ $searchingshit == 'Channel option' ]];then 	channelname=$(echo | dmenu -p "Channel Search") || youtube_search;         get_channel_id; 	searchingshit=$(echo | dmenu -i -l 20 -p "Search on this channel:") || youtube_search ;     fi;     echo $searchingshit >~/.script/youtube/datas/searchhistory     echo "Searching for "$searchingshit;     searchingshit=$(url_encode $searchingshit);     if [[ ! -n $channelID ]];then 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey;     else 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey'&channelId='$channelID;     fi         youtubesearchdata=$(curl -s $curly)     video=$(echo $youtubesearchdata | jq -r '.items[] | .snippet.title, .snippet.channelTitle, .snippet.publishedAt' | awk '{printf ("%.85s\n",$0)}' | awk '(NR%3==1){name=$0}(NR%3==2){date=$0}(NR%3==0){printf ("%2d: %-90s %-30s %.10s \n", NR/3, name, date, $0)}' | dmenu -l 30 -i -p 'YTSearch' | sed 's/:.*//');     [[ ! -n $video ]] && youtube_search;     (( num= $video - 1 ));     videoID=$(echo $youtubesearchdata | jq -r '.items['$num'].id.videoId')     res=$(echo -e "720\n1080\n360" | dmenu -i -p "Which resolution? (if avalaible)") || youtube_search;     mpv --ytdl-format="[height<=?"$res"]" 'https://www.youtube.com/watch?v='$videoID    ;     exit; }
if ping -q -c 1 -W 1 1.1.1.1 &>/dev/null; then     youtube_search; else     echo "No internet connection"; fi
cd .cache/wal/
ls
cd schemes/
ls
cd ..
ls
cd .config/wal/templates/
ls
cd .config/wal/templates/
ls
rm colors-emacs.el 
cat .cache/wal/base16-wal-theme.el 
configbash 
#!/bin/bash -i
apikey=AIzaSyAxoOzmqHSjvkv0LzYm5v4vUzvjorBu374
max_results=30
shopt -s expand_aliases
url_encode(){     ret=$(echo $@);     echo $(python -c "import urllib.parse, sys; print(urllib.parse.quote_plus(sys.argv[1]))" "$ret"); }
aborted(){     echo "Aborted";     exit; }
get_channel_id(){     channoulname=$(url_encode $channelname);     channelsearch=$(curl -s 'https://www.googleapis.com/youtube/v3/search?q='$channoulname'&type=channel&maxResults=25&part=snippet&key='$apikey)     chanchoice=$(echo $channelsearch | jq -r '.items[] | .snippet.channelTitle' | awk '{printf ("%2d: %s\n",NR,$0)}' | dmenu -l 10 -i -p 'Which channel ?' | sed 's/:.*//');     [[ ! -n $chanchoice ]] && youtube_search;     (( numchan= $chanchoice - 1 ));     channelID=$(echo $channelsearch | jq -r '.items['$numchan'].snippet.channelId'); }
youtube_search(){     channelID="";     searchingshit=$(cat ~/.script/youtube/datas/searchhistory | awk '{print$0}END{printf "\n\nChannel option"}' | dmenu -i -l 20 -p "Youtube search:") || aborted;     if [[ $searchingshit == 'Channel option' ]];then 	channelname=$(echo | dmenu -p "Channel Search") || youtube_search;         get_channel_id; 	searchingshit=$(echo | dmenu -i -l 20 -p "Search on this channel:") || youtube_search ;     fi;     echo $searchingshit >~/.script/youtube/datas/searchhistory     echo "Searching for "$searchingshit;     searchingshit=$(url_encode $searchingshit);     if [[ ! -n $channelID ]];then 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey;     else 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey'&channelId='$channelID;     fi         youtubesearchdata=$(curl -s $curly)     video=$(echo $youtubesearchdata | jq -r '.items[] | .snippet.title, .snippet.channelTitle, .snippet.publishedAt' | awk '{printf ("%.85s\n",$0)}' | awk '(NR%3==1){name=$0}(NR%3==2){date=$0}(NR%3==0){printf ("%2d: %-90s %-30s %.10s \n", NR/3, name, date, $0)}' | dmenu -l 30 -i -p 'YTSearch' | sed 's/:.*//');     [[ ! -n $video ]] && youtube_search;     (( num= $video - 1 ));     videoID=$(echo $youtubesearchdata | jq -r '.items['$num'].id.videoId')     res=$(echo -e "720\n1080\n360" | dmenu -i -p "Which resolution? (if avalaible)") || youtube_search;     mpv --ytdl-format="[height<=?"$res"]" 'https://www.youtube.com/watch?v='$videoID    ;     exit; }
if ping -q -c 1 -W 1 1.1.1.1 &>/dev/null; then     youtube_search; else     echo "No internet connection"; fi
neofetch 
cd .emacs.d/
cd packages/
ls
git clone git://github.com/jonathanchu/emacs-powerline.git
ls
cd emacs-powerline/
ls
python
vim
ls
hex="0x12345678"
python
cd Downloads/
ls
rm config 
rm compton-*
rm -fr compton-*
ls
echo -e "test\ntast\ntost"
echo -e "test\ntast\ntost" > test.txt
ls
cat test.txt 
sed -i '2s/*/c\:base02"#112233"' test.txt 
sed -i '2s/test/c\:base02"#112233"' test.txt 
sed '2s/*/c\:base02"#112233"' test.txt 
sed '2s/*/c\tust' test.txt 
sed 'tost/c\:base02"#112233"' test.txt 
sed '/tost/c\:base02"#112233"' test.txt 
sed '/tast/c\:base02"#112233"' test.txt 
sed '/tas/c\:base02"#112233"' test.txt 
cd Downloads/
sed '/tas/c\:base02"#112233"' test.txt 
sed -i '/tas/c\:base02"#112233"' test.txt 
ls
cat test.txt 
cd Downloads/
sed '/tos/c\:base02"#112233"' test.txt 
sed '/tos/c\:base02fsdf"#112233"' test.txt 
sed '/st/c\:base02fsdf"#112233"' test.txt 
sed '/ost/c\:base02fsdf"#112233"' test.txt 
cd .cache/wal/
ls
awk base16-wal-theme.el 
man awk
awk '/base02/{print$0}' base16-wal-theme.el 
awk '/base02/' base16-wal-theme.el 
cd .cache/wal
awk '/base02/' base16-wal-theme.el 
awk '/base02/' base16-wal-theme.el | sed -n -e 's/^.*stalled: //p'
awk '/base02/' base16-wal-theme.el | sed -n -e 's/^.*# //p'
awk '/base02/' base16-wal-theme.el | sed -n -e 's/^#* //p'
awk '/base02/' base16-wal-theme.el | sed -n -e 's/#.* //p'
awk '/base02/' base16-wal-theme.el | sed -n -e 's/#* //p'
awk '/base02/' base16-wal-theme.el | sed -n -e 's/#*. //p'
awk '/base02/' base16-wal-theme.el | sed -n -e 's/#.* //p'
awk '/base02/' base16-wal-theme.el | sed -n -e 's/base* //p'
awk '/base02/' base16-wal-theme.el | sed -n -e 's/base.* //p'
awk '/base02/' base16-wal-theme.el | sed -n -e 's/base02:.* //p'
awk '/base02/' base16-wal-theme.el | sed -n -e 's/base2:.* //p'
awk '/base02/' base16-wal-theme.el | sed -n -e 's/base:.* //p'
awk '/base02/' base16-wal-theme.el | sed -n -e 's/base.* //p'
awk '/base02/' base16-wal-theme.el | sed -n -e 's/base:.* //p'
awk '/base02/' base16-wal-theme.el | sed -n -e 's/base\:.* //p'
awk '/base02/' base16-wal-theme.el | sed -n -e 's/base:.* //p'
awk '/base02/' base16-wal-theme.el | sed -n -e 's/base.* //p'
awk '/base02/' base16-wal-theme.el | sed -n -e 's/base* //p'
awk '/base02/' base16-wal-theme.el | sed -n -e 's/base*. //p'
awk '/base02/' base16-wal-theme.el | sed -n -e 's/base.* //p'
awk '/base02/' base16-wal-theme.el | sed -n -e 's/^base.* //p'
awk '/base02/' base16-wal-theme.el | sed -n -e 's/^.*base.* //p'
awk '/base02/' base16-wal-theme.el | sed -n -e 's/^.*base" //p'
awk '/base02/' base16-wal-theme.el | sed -n -e 's/^.*base.* //p'
awk '/base02/' base16-wal-theme.el | cut -d\" -f2
hex=#112233
echo $(hex:1:2)
echo ${hex:1:2}
echo ${hex:3:4}
echo ${hex:3:2}
echo ${hex:4:2}
echo ${hex:5:2}
chmod +x .script/colorcorr 
cd Downloads/
ls
sed '/tos/c\:base02fsdf"#112233"' test.txt 
sed '/tos/c\:base02fsdf"#112233"' test.txt test2.txt
sed '/tos/c\:base02fsdf"#112233"' test.txt > test2.txt
cat test2.txt 
cd
cd .cache/wal/
sed -i '/base02/c\:base02 "#$r$g$b"'
sed '/base02/c\:base02 "#112233"' base16-wal-theme.el 
awk '/base02/' ~/.cache/base16-wal-theme.el | cut -d\" -f2
awk '/base02/' ~/.cache/wal/base16-wal-theme.el | cut -d\" -f2
hex=$(awk '/base02/' ~/.cache/wal/base16-wal-theme.el | cut -d\" -f2)
echo hex
echo $hex
.script/colorcorr 
python
.script/colorcorr 
python
.script/colorcorr 
cd .emacs.d/
ls
python
.script/colorcorr 
python
.script/colorcorr 
python
.script/colorcorr 
c'est cool
ls
ska emacs
rm -r .emacs.d/packages/emacs-powerline/
rm -rf .emacs.d/packages/emacs-powerline/
ska emacs
sudo reboot
neofetch 
htop
cd .config/surf-2.0/
make
sudo make install
ping elpa.gnu.org
ping www.google.com
ping https://melpa.milkbox.net/packages/
ping https://melpa.milkbox.net/
ping melpa.milkbox.net
ping marmalade-repo.org
sudo killall emacs
ska emacs
ncmpcpp 
#!/bin/bash -i
apikey=AIzaSyAxoOzmqHSjvkv0LzYm5v4vUzvjorBu374
max_results=30
shopt -s expand_aliases
url_encode(){     ret=$(echo $@);     echo $(python -c "import urllib.parse, sys; print(urllib.parse.quote_plus(sys.argv[1]))" "$ret"); }
aborted(){     echo "Aborted";     exit; }
get_channel_id(){     channoulname=$(url_encode $channelname);     channelsearch=$(curl -s 'https://www.googleapis.com/youtube/v3/search?q='$channoulname'&type=channel&maxResults=25&part=snippet&key='$apikey)     chanchoice=$(echo $channelsearch | jq -r '.items[] | .snippet.channelTitle' | awk '{printf ("%2d: %s\n",NR,$0)}' | dmenu -l 10 -i -p 'Which channel ?' | sed 's/:.*//');     [[ ! -n $chanchoice ]] && youtube_search;     (( numchan= $chanchoice - 1 ));     channelID=$(echo $channelsearch | jq -r '.items['$numchan'].snippet.channelId'); }
youtube_search(){     channelID="";     searchingshit=$(cat ~/.script/youtube/datas/searchhistory | awk '{print$0}END{printf "\n\nChannel option"}' | dmenu -i -l 20 -p "Youtube search:") || aborted;     if [[ $searchingshit == 'Channel option' ]];then 	channelname=$(echo | dmenu -p "Channel Search") || youtube_search;         get_channel_id; 	searchingshit=$(echo | dmenu -i -l 20 -p "Search on this channel:") || youtube_search ;     fi;     echo $searchingshit >~/.script/youtube/datas/searchhistory     echo "Searching for "$searchingshit;     searchingshit=$(url_encode $searchingshit);     if [[ ! -n $channelID ]];then 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey;     else 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey'&channelId='$channelID;     fi         youtubesearchdata=$(curl -s $curly)     video=$(echo $youtubesearchdata | jq -r '.items[] | .snippet.title, .snippet.channelTitle, .snippet.publishedAt' | awk '{printf ("%.85s\n",$0)}' | awk '(NR%3==1){name=$0}(NR%3==2){date=$0}(NR%3==0){printf ("%2d: %-90s %-30s %.10s \n", NR/3, name, date, $0)}' | dmenu -l 30 -i -p 'YTSearch' | sed 's/:.*//');     [[ ! -n $video ]] && youtube_search;     (( num= $video - 1 ));     videoID=$(echo $youtubesearchdata | jq -r '.items['$num'].id.videoId')     res=$(echo -e "720\n1080\n360" | dmenu -i -p "Which resolution? (if avalaible)") || youtube_search;     mpv --ytdl-format="[height<=?"$res"]" 'https://www.youtube.com/watch?v='$videoID    ;     exit; }
if ping -q -c 1 -W 1 1.1.1.1 &>/dev/null; then     youtube_search; else     echo "No internet connection"; fi
#!/bin/bash -i
apikey=AIzaSyAxoOzmqHSjvkv0LzYm5v4vUzvjorBu374
max_results=30
shopt -s expand_aliases
url_encode(){     ret=$(echo $@);     echo $(python -c "import urllib.parse, sys; print(urllib.parse.quote_plus(sys.argv[1]))" "$ret"); }
aborted(){     echo "Aborted";     exit; }
get_channel_id(){     channoulname=$(url_encode $channelname);     channelsearch=$(curl -s 'https://www.googleapis.com/youtube/v3/search?q='$channoulname'&type=channel&maxResults=25&part=snippet&key='$apikey)     chanchoice=$(echo $channelsearch | jq -r '.items[] | .snippet.channelTitle' | awk '{printf ("%2d: %s\n",NR,$0)}' | dmenu -l 10 -i -p 'Which channel ?' | sed 's/:.*//');     [[ ! -n $chanchoice ]] && youtube_search;     (( numchan= $chanchoice - 1 ));     channelID=$(echo $channelsearch | jq -r '.items['$numchan'].snippet.channelId'); }
youtube_search(){     channelID="";     searchingshit=$(cat ~/.script/youtube/datas/searchhistory | awk '{print$0}END{printf "\n\nChannel option"}' | dmenu -i -l 20 -p "Youtube search:") || aborted;     if [[ $searchingshit == 'Channel option' ]];then 	channelname=$(echo | dmenu -p "Channel Search") || youtube_search;         get_channel_id; 	searchingshit=$(echo | dmenu -i -l 20 -p "Search on this channel:") || youtube_search ;     fi;     echo $searchingshit >~/.script/youtube/datas/searchhistory     echo "Searching for "$searchingshit;     searchingshit=$(url_encode $searchingshit);     if [[ ! -n $channelID ]];then 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey;     else 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey'&channelId='$channelID;     fi         youtubesearchdata=$(curl -s $curly)     video=$(echo $youtubesearchdata | jq -r '.items[] | .snippet.title, .snippet.channelTitle, .snippet.publishedAt' | awk '{printf ("%.85s\n",$0)}' | awk '(NR%3==1){name=$0}(NR%3==2){date=$0}(NR%3==0){printf ("%2d: %-90s %-30s %.10s \n", NR/3, name, date, $0)}' | dmenu -l 30 -i -p 'YTSearch' | sed 's/:.*//');     [[ ! -n $video ]] && youtube_search;     (( num= $video - 1 ));     videoID=$(echo $youtubesearchdata | jq -r '.items['$num'].id.videoId')     res=$(echo -e "720\n1080\n360" | dmenu -i -p "Which resolution? (if avalaible)") || youtube_search;     mpv --ytdl-format="[height<=?"$res"]" 'https://www.youtube.com/watch?v='$videoID    ;     exit; }
if ping -q -c 1 -W 1 1.1.1.1 &>/dev/null; then     youtube_search; else     echo "No internet connection"; fi
vim .vimrc 
#!/bin/bash -i
apikey=AIzaSyAxoOzmqHSjvkv0LzYm5v4vUzvjorBu374
max_results=30
shopt -s expand_aliases
url_encode(){     ret=$(echo $@);     echo $(python -c "import urllib.parse, sys; print(urllib.parse.quote_plus(sys.argv[1]))" "$ret"); }
aborted(){     echo "Aborted";     exit; }
get_channel_id(){     channoulname=$(url_encode $channelname);     channelsearch=$(curl -s 'https://www.googleapis.com/youtube/v3/search?q='$channoulname'&type=channel&maxResults=25&part=snippet&key='$apikey)     chanchoice=$(echo $channelsearch | jq -r '.items[] | .snippet.channelTitle' | awk '{printf ("%2d: %s\n",NR,$0)}' | dmenu -l 10 -i -p 'Which channel ?' | sed 's/:.*//');     [[ ! -n $chanchoice ]] && youtube_search;     (( numchan= $chanchoice - 1 ));     channelID=$(echo $channelsearch | jq -r '.items['$numchan'].snippet.channelId'); }
youtube_search(){     channelID="";     searchingshit=$(cat ~/.script/youtube/datas/searchhistory | awk '{print$0}END{printf "\n\nChannel option"}' | dmenu -i -l 20 -p "Youtube search:") || aborted;     if [[ $searchingshit == 'Channel option' ]];then 	channelname=$(echo | dmenu -p "Channel Search") || youtube_search;         get_channel_id; 	searchingshit=$(echo | dmenu -i -l 20 -p "Search on this channel:") || youtube_search ;     fi;     echo $searchingshit >~/.script/youtube/datas/searchhistory     echo "Searching for "$searchingshit;     searchingshit=$(url_encode $searchingshit);     if [[ ! -n $channelID ]];then 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey;     else 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey'&channelId='$channelID;     fi         youtubesearchdata=$(curl -s $curly)     video=$(echo $youtubesearchdata | jq -r '.items[] | .snippet.title, .snippet.channelTitle, .snippet.publishedAt' | awk '{printf ("%.85s\n",$0)}' | awk '(NR%3==1){name=$0}(NR%3==2){date=$0}(NR%3==0){printf ("%2d: %-90s %-30s %.10s \n", NR/3, name, date, $0)}' | dmenu -l 30 -i -p 'YTSearch' | sed 's/:.*//');     [[ ! -n $video ]] && youtube_search;     (( num= $video - 1 ));     videoID=$(echo $youtubesearchdata | jq -r '.items['$num'].id.videoId')     res=$(echo -e "720\n1080\n360" | dmenu -i -p "Which resolution? (if avalaible)") || youtube_search;     mpv --ytdl-format="[height<=?"$res"]" 'https://www.youtube.com/watch?v='$videoID    ;     exit; }
if ping -q -c 1 -W 1 1.1.1.1 &>/dev/null; then     youtube_search; else     echo "No internet connection"; fi
#!/bin/bash -i
apikey=AIzaSyAxoOzmqHSjvkv0LzYm5v4vUzvjorBu374
max_results=30
shopt -s expand_aliases
url_encode(){     ret=$(echo $@);     echo $(python -c "import urllib.parse, sys; print(urllib.parse.quote_plus(sys.argv[1]))" "$ret"); }
aborted(){     echo "Aborted";     exit; }
get_channel_id(){     channoulname=$(url_encode $channelname);     channelsearch=$(curl -s 'https://www.googleapis.com/youtube/v3/search?q='$channoulname'&type=channel&maxResults=25&part=snippet&key='$apikey)     chanchoice=$(echo $channelsearch | jq -r '.items[] | .snippet.channelTitle' | awk '{printf ("%2d: %s\n",NR,$0)}' | dmenu -l 10 -i -p 'Which channel ?' | sed 's/:.*//');     [[ ! -n $chanchoice ]] && youtube_search;     (( numchan= $chanchoice - 1 ));     channelID=$(echo $channelsearch | jq -r '.items['$numchan'].snippet.channelId'); }
youtube_search(){     channelID="";     searchingshit=$(cat ~/.script/youtube/datas/searchhistory | awk '{print$0}END{printf "\n\nChannel option"}' | dmenu -i -l 20 -p "Youtube search:") || aborted;     if [[ $searchingshit == 'Channel option' ]];then 	channelname=$(echo | dmenu -p "Channel Search") || youtube_search;         get_channel_id; 	searchingshit=$(echo | dmenu -i -l 20 -p "Search on this channel:") || youtube_search ;     fi;     echo $searchingshit >~/.script/youtube/datas/searchhistory     echo "Searching for "$searchingshit;     searchingshit=$(url_encode $searchingshit);     if [[ ! -n $channelID ]];then 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey;     else 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey'&channelId='$channelID;     fi         youtubesearchdata=$(curl -s $curly)     video=$(echo $youtubesearchdata | jq -r '.items[] | .snippet.title, .snippet.channelTitle, .snippet.publishedAt' | awk '{printf ("%.85s\n",$0)}' | awk '(NR%3==1){name=$0}(NR%3==2){date=$0}(NR%3==0){printf ("%2d: %-90s %-30s %.10s \n", NR/3, name, date, $0)}' | dmenu -l 30 -i -p 'YTSearch' | sed 's/:.*//');     [[ ! -n $video ]] && youtube_search;     (( num= $video - 1 ));     videoID=$(echo $youtubesearchdata | jq -r '.items['$num'].id.videoId')     res=$(echo -e "720\n1080\n360" | dmenu -i -p "Which resolution? (if avalaible)") || youtube_search;     mpv --ytdl-format="[height<=?"$res"]" 'https://www.youtube.com/watch?v='$videoID    ;     exit; }
if ping -q -c 1 -W 1 1.1.1.1 &>/dev/null; then     youtube_search; else     echo "No internet connection"; fi
vim .config/i3/config
sudo killall dropbox 
free -h
htop
vimtutor 
vim Documents/gruvboxcolor 
cat /bin/dmen
dmen
ls | dmen
ls | dmen -i
mv Downloads/dmenu/ .config/
cd .config/dmenu/
ls
vim config.h 
make
sudo make install 
cd ..
cd surf-2.0/
vim config.h 
make
./surf
vim .config/tabbed-0.6/
cd .config/tabbed-0.6/
make
sudo make install
vim .keepmenu/keepmenu
vim .config/keepmenu/config.ini 
killall -q compton 
compton
vim .config/i3/config
compton
vim .config/i3/config
compton
vim .config/i3/config
vim .config/polybar/launch.sh 
cd .config/surf-2.0/
make
sudo make install
cd ..
cd tabbed-0.6/
ls
make
sudo make install
vim tutor
vimtutor 
tabbed 
tabbed surf -e
cat .cache/wal/colors.css 
cat .dwarffortress/data/init/colors.txt 
ska compton
compton
.config/polybar/launch.sh 
ska compton
killall compton
compton
ska compton
compton
vim .config/compton.conf 
neofetch 
neofetch
htop
neofetch
feh Images/screenshots/2019-19-17\:37\:36-screenshot.png 
neofetch
feh Images/screenshots/2019-19-17\:39\:36-screenshot.png 
scp Images/screenshots/2019-19-17\:39\:36-screenshot.png root@192.168.0.100/logosite/secretowl/rice.png
scp Images/screenshots/2019-19-17\:39\:36-screenshot.png ssh://root@192.168.0.100/logosite/secretowl/rice.png
ncmpcpp 
scp Images/screenshots/2019-19-17\:39\:36-screenshot.png root@192.168.0.100:/logosite/secretowl/rice.png
connect_to_zenocyne_bis 
cd .config/tabbed-0.6/
ls
make
make install
man scp
scp Images/screenshots/2019-19-17\:39\:36-screenshot.png root@192.168.0.100:/var/www/html/logosite/secretowl/rice.png
sudo su
#!/bin/bash -i
apikey=AIzaSyAxoOzmqHSjvkv0LzYm5v4vUzvjorBu374
max_results=30
shopt -s expand_aliases
url_encode(){     ret=$(echo $@);     echo $(python -c "import urllib.parse, sys; print(urllib.parse.quote_plus(sys.argv[1]))" "$ret"); }
aborted(){     echo "Aborted";     exit; }
get_channel_id(){     channoulname=$(url_encode $channelname);     channelsearch=$(curl -s 'https://www.googleapis.com/youtube/v3/search?q='$channoulname'&type=channel&maxResults=25&part=snippet&key='$apikey)     chanchoice=$(echo $channelsearch | jq -r '.items[] | .snippet.channelTitle' | awk '{printf ("%2d: %s\n",NR,$0)}' | dmenu -l 10 -i -p 'Which channel ?' | sed 's/:.*//');     [[ ! -n $chanchoice ]] && youtube_search;     (( numchan= $chanchoice - 1 ));     channelID=$(echo $channelsearch | jq -r '.items['$numchan'].snippet.channelId'); }
youtube_search(){     channelID="";     searchingshit=$(cat ~/.script/youtube/datas/searchhistory | awk '{print$0}END{printf "\n\nChannel option"}' | dmenu -i -l 20 -p "Youtube search:") || aborted;     if [[ $searchingshit == 'Channel option' ]];then 	channelname=$(echo | dmenu -p "Channel Search") || youtube_search;         get_channel_id; 	searchingshit=$(echo | dmenu -i -l 20 -p "Search on this channel:") || youtube_search ;     fi;     echo $searchingshit >~/.script/youtube/datas/searchhistory     echo "Searching for "$searchingshit;     searchingshit=$(url_encode $searchingshit);     if [[ ! -n $channelID ]];then 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey;     else 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey'&channelId='$channelID;     fi         youtubesearchdata=$(curl -s $curly)     video=$(echo $youtubesearchdata | jq -r '.items[] | .snippet.title, .snippet.channelTitle, .snippet.publishedAt' | awk '{printf ("%.85s\n",$0)}' | awk '(NR%3==1){name=$0}(NR%3==2){date=$0}(NR%3==0){printf ("%2d: %-90s %-30s %.10s \n", NR/3, name, date, $0)}' | dmenu -l 30 -i -p 'YTSearch' | sed 's/:.*//');     [[ ! -n $video ]] && youtube_search;     (( num= $video - 1 ));     videoID=$(echo $youtubesearchdata | jq -r '.items['$num'].id.videoId')     res=$(echo -e "720\n1080\n360" | dmenu -i -p "Which resolution? (if avalaible)") || youtube_search;     mpv --ytdl-format="[height<=?"$res"]" 'https://www.youtube.com/watch?v='$videoID    ;     exit; }
if ping -q -c 1 -W 1 1.1.1.1 &>/dev/null; then     youtube_search; else     echo "No internet connection"; fi
sudo pacman -S libnotify 
notify-send test
notify-send sfdf
sudo pacman -S dunst 
notify-send fsdf
mkdir .config/dunst && cp /usr/share/dunst/dunstrc .config/dunst/dunstrc
cd .config/dunst/
ls
vim dunstrc 
man dunst
.script/dunstwal 
ska dunst
dunst
ehco ${HOME}
echo ${HOME}
cd .script/
chmod +x dunstwal 
./dunstwal 
killall dunst
./dunstwal 
notify-send fds
notify-send 'fds'
dunst
notify-send 'fmldkj'
.script/owl --owl
notify-send 'lkfj'
neofetch
notify-send 'lkjlk'
notify-send jqmsldkjf
.script/dunstwal 
.script/owl 
.script/owl --owl
notify-send 'jfldskj'
.config/polybar/launch.sh 
.script/owl --owl
killall polybar 
.config/polybar/launch.sh 
sudo reboot
notify-send "jlmkj"
wal -i ~/Images/wallpapersdoc/
.script/colorcorr 
notify-send "lkj"
notify-send 'jlkj'
.script/owl --owl
dunst &
.script/owl --owl
notify-send 'lkj'
man notify-send
man libnotify
man dunst
wal -i ~/Images/wallpapersdoc/ -o ~/.script/colorcorr -o ~/.script/dunstwal
notify-send "hgg"
man wal
man pywa
man pywal
man wall 
wal h
wal -h
man pkill 
pkill compton 
compton
notify-send 'mlkj'
ls
cd Documents/
ls
cd ..
sl
ls
mkdir .icons
cd .icons/
cd
.script/dunstwal 
notify-send 'lkj'
.script/dunstwal 
nohup .script/dunstwal 
notify-send 'mlkj'
#!/bin/bash -i
# Parameters
shopt -s expand_aliases
channelsfile=/home/$USER/.script/twitch/datas/listchanneltwitch
gamesfile=/home/$USER/.script/twitch/datas/listgamestwitch 
clientID=9wba9dk3evmmlxs2xz0xwle0fwr6uc
gamesdb=/home/$USER/.script/gamedatabase/gamesdb
max_vid=100
nobodyshit(){     echo "Nobody streaming this shit right now";     noshit="No streams. Choose an other game:";     twitchgamefunction; }
aborted(){     echo "Aborted";     exit; }
check_and_launch(){     gametocheck=$(echo $@);     gametocheck=$(python -c "print('$gametocheck'.replace(' ','%20'))");     echo "Checking connected streams for $@ ..."     twitchdata=$(curl -s 'https://api.twitch.tv/kraken/streams?client_id='$clientID'&game='$gametocheck);     [[ $(echo $twitchdata | jq '._total') == 0 ]] && nobodyshit     stream=$(echo $twitchdata | jq -r '.streams[] | .channel.language, .channel.name' | awk 'NR%2{printf "%s:",$0;next;}1' | dmenu -i -p "Which stream ?" | sed 's/.*://');     [[ ! -n $stream ]] && aborted     exec firefox -new-window https://www.twitch.tv/popout/$stream/chat?popout= & mpv https://www.twitch.tv/$stream;     exit; }
twitchgamefunction(){             if [[ -n $@ ]]; then 	check_and_launch $@;     else	 	game=$(awk '{print $0} END { printf "Other\nAdd" }' $gamesfile | dmenu -i -p "$noshit") || aborted; 	if [[ $game == Add ]];then 0	    game=$(cat $gamesdb | dmenu -i -p "Which game do you want to add on favorite?") || aborted; 	    echo -e "$game" >>$gamesfile; 	    cert=$(echo -e "No\nYes" | dmenu -i -p "Do you want to check streams for $game?"); 	    [[ $cert == Yes ]] || aborted; 	elif [[ $game == Other ]]; then 	    game=$(cat $gamesdb| dmenu -i -p "$noshit") || aborted; 	fi; 	    check_and_launch $game;     fi; }
twitchlivefunction(){     if [[ -n $@ ]]; then 	echo "Checking if $@ is live ..."; 	test=$(curl -s https://api.twitch.tv/kraken/streams/"$@"?client_id=$clientID | jq ".stream._id") 	[ ! $test == null ] && (exec firefox -new-window https://www.twitch.tv/popout/$@/chat?popout= & mpv https://www.twitch.tv/"$@") || echo "$@ doesn't stream right now"; 	exit;     else 	echo "Checking connected streams ..."; 	twitchdata=$(curl -s 'https://api.twitch.tv/kraken/streams?client_id='$clientID'&channel='$(cat $channelsfile)) 	stream=$(echo $twitchdata | jq -r '.streams[] | .channel.name' | dmenu -i -p "Which stream do you want to watch?") || aborted; 	exec firefox -new-window https://www.twitch.tv/popout/$stream/chat?popout= & mpv https://www.twitch.tv/"$stream"; 	exit;     fi; }
twitchvod_search(){     searchingshit=$(python -c "print('"$(cat ~/.script/twitch/datas/listchanneltwitch)"'.replace(',','\n'))" | dmenu -p "TwitchVOD Channel:") || aborted;     echo "Searching for video on "$searchingshit;     curl_choose_and_watch; }
curl_choose_and_watch(){	
    twitchvod=$(curl -s 'https://api.twitch.tv/kraken/channels/'$searchingshit'/videos?client_id='$clientID'&limit='$max_vid'&offset='$offset);     total_vod=$(echo $twitchvod | jq '._total');     [[ $total_vod == null || $total_vod == 0 ]] && twitchvod_search
    (( borne_max=$total_vod - $max_vid ));     video=$(echo $twitchvod | jq -r '.videos[] | .title, .recorded_at' | awk -v bm=$borne_max -v offs=$offset 'BEGIN{ if (offs > 0 ) { printf "Prev\n" } }!(NR%2){printf ("%3d: %-100s %.10s\n", FNR/2+offs, p, $0)}{p=$0}END{ if (offs < bm) { printf "Next" } }' | dmenu -i -l 30 -p "Which video?" | sed 's/:.*//')     if [[ ! -n $video ]];then 	twitchvod_search;     elif [[ $video == Next ]];then 	((offset= $offset + 100 )); 	curl_choose_and_watch;     elif [[ $video == Prev ]];then         ((offset= $offset - 100 )); 	curl_choose_and_watch;     else	 	(( num=$video - 1 - $offset)); 	videourl=$(echo $twitchvod | jq -r '.videos['$num'].url')	
	res=$(echo -e "720\n1080\n360" | dmenu -i -p "Which resolution? (if avalaible)") || twitchvod_search; 	mpv --ytdl-format="[height<=?"$res"]" $videourl || twitchvod_search; 	exit;     fi; }
if ping -q -c 1 -W 1 1.1.1.1 &>/dev/null; then     case $1 in 	--live) 	    twitchlivefunction $2; 	    ;; 	--game) 	    noshit="Choose a game"; 	    twitchgamefunction "${@#$1}"; 	    ;; 	--vod) 	    offset=0; 	    twitchvod_search; 	    ;; 	*) 	    echo -e "This is the twitch script featuring dmenu and mpv! Heres the options available : \n     --live   To check if your favorites streamers are live\n     --game   To check available streams of a desired game\n     --vod    To check for VOD on a desired channel"; 	    ;;     esac; else     echo "No internet connection"; fi
#!/bin/bash -i
# Parameters
shopt -s expand_aliases
channelsfile=/home/$USER/.script/twitch/datas/listchanneltwitch
gamesfile=/home/$USER/.script/twitch/datas/listgamestwitch 
clientID=9wba9dk3evmmlxs2xz0xwle0fwr6uc
gamesdb=/home/$USER/.script/gamedatabase/gamesdb
max_vid=100
nobodyshit(){     echo "Nobody streaming this shit right now";     noshit="No streams. Choose an other game:";     twitchgamefunction; }
aborted(){     echo "Aborted";     exit; }
check_and_launch(){     gametocheck=$(echo $@);     gametocheck=$(python -c "print('$gametocheck'.replace(' ','%20'))");     echo "Checking connected streams for $@ ..."     twitchdata=$(curl -s 'https://api.twitch.tv/kraken/streams?client_id='$clientID'&game='$gametocheck);     [[ $(echo $twitchdata | jq '._total') == 0 ]] && nobodyshit     stream=$(echo $twitchdata | jq -r '.streams[] | .channel.language, .channel.name' | awk 'NR%2{printf "%s:",$0;next;}1' | dmenu -i -p "Which stream ?" | sed 's/.*://');     [[ ! -n $stream ]] && aborted     exec firefox -new-window https://www.twitch.tv/popout/$stream/chat?popout= & mpv https://www.twitch.tv/$stream;     exit; }
twitchgamefunction(){             if [[ -n $@ ]]; then 	check_and_launch $@;     else	 	game=$(awk '{print $0} END { printf "Other\nAdd" }' $gamesfile | dmenu -i -p "$noshit") || aborted; 	if [[ $game == Add ]];then 0	    game=$(cat $gamesdb | dmenu -i -p "Which game do you want to add on favorite?") || aborted; 	    echo -e "$game" >>$gamesfile; 	    cert=$(echo -e "No\nYes" | dmenu -i -p "Do you want to check streams for $game?"); 	    [[ $cert == Yes ]] || aborted; 	elif [[ $game == Other ]]; then 	    game=$(cat $gamesdb| dmenu -i -p "$noshit") || aborted; 	fi; 	    check_and_launch $game;     fi; }
twitchlivefunction(){     if [[ -n $@ ]]; then 	echo "Checking if $@ is live ..."; 	test=$(curl -s https://api.twitch.tv/kraken/streams/"$@"?client_id=$clientID | jq ".stream._id") 	[ ! $test == null ] && (exec firefox -new-window https://www.twitch.tv/popout/$@/chat?popout= & mpv https://www.twitch.tv/"$@") || echo "$@ doesn't stream right now"; 	exit;     else 	echo "Checking connected streams ..."; 	twitchdata=$(curl -s 'https://api.twitch.tv/kraken/streams?client_id='$clientID'&channel='$(cat $channelsfile)) 	stream=$(echo $twitchdata | jq -r '.streams[] | .channel.name' | dmenu -i -p "Which stream do you want to watch?") || aborted; 	exec firefox -new-window https://www.twitch.tv/popout/$stream/chat?popout= & mpv https://www.twitch.tv/"$stream"; 	exit;     fi; }
twitchvod_search(){     searchingshit=$(python -c "print('"$(cat ~/.script/twitch/datas/listchanneltwitch)"'.replace(',','\n'))" | dmenu -p "TwitchVOD Channel:") || aborted;     echo "Searching for video on "$searchingshit;     curl_choose_and_watch; }
curl_choose_and_watch(){	
    twitchvod=$(curl -s 'https://api.twitch.tv/kraken/channels/'$searchingshit'/videos?client_id='$clientID'&limit='$max_vid'&offset='$offset);     total_vod=$(echo $twitchvod | jq '._total');     [[ $total_vod == null || $total_vod == 0 ]] && twitchvod_search
    (( borne_max=$total_vod - $max_vid ));     video=$(echo $twitchvod | jq -r '.videos[] | .title, .recorded_at' | awk -v bm=$borne_max -v offs=$offset 'BEGIN{ if (offs > 0 ) { printf "Prev\n" } }!(NR%2){printf ("%3d: %-100s %.10s\n", FNR/2+offs, p, $0)}{p=$0}END{ if (offs < bm) { printf "Next" } }' | dmenu -i -l 30 -p "Which video?" | sed 's/:.*//')     if [[ ! -n $video ]];then 	twitchvod_search;     elif [[ $video == Next ]];then 	((offset= $offset + 100 )); 	curl_choose_and_watch;     elif [[ $video == Prev ]];then         ((offset= $offset - 100 )); 	curl_choose_and_watch;     else	 	(( num=$video - 1 - $offset)); 	videourl=$(echo $twitchvod | jq -r '.videos['$num'].url')	
	res=$(echo -e "720\n1080\n360" | dmenu -i -p "Which resolution? (if avalaible)") || twitchvod_search; 	mpv --ytdl-format="[height<=?"$res"]" $videourl || twitchvod_search; 	exit;     fi; }
if ping -q -c 1 -W 1 1.1.1.1 &>/dev/null; then     case $1 in 	--live) 	    twitchlivefunction $2; 	    ;; 	--game) 	    noshit="Choose a game"; 	    twitchgamefunction "${@#$1}"; 	    ;; 	--vod) 	    offset=0; 	    twitchvod_search; 	    ;; 	*) 	    echo -e "This is the twitch script featuring dmenu and mpv! Heres the options available : \n     --live   To check if your favorites streamers are live\n     --game   To check available streams of a desired game\n     --vod    To check for VOD on a desired channel"; 	    ;;     esac; else     echo "No internet connection"; fi
#!/bin/bash -i
# Parameters
shopt -s expand_aliases
channelsfile=/home/$USER/.script/twitch/datas/listchanneltwitch
gamesfile=/home/$USER/.script/twitch/datas/listgamestwitch 
clientID=9wba9dk3evmmlxs2xz0xwle0fwr6uc
gamesdb=/home/$USER/.script/gamedatabase/gamesdb
max_vid=100
nobodyshit(){     echo "Nobody streaming this shit right now";     noshit="No streams. Choose an other game:";     twitchgamefunction; }
aborted(){     echo "Aborted";     exit; }
check_and_launch(){     gametocheck=$(echo $@);     gametocheck=$(python -c "print('$gametocheck'.replace(' ','%20'))");     echo "Checking connected streams for $@ ..."     twitchdata=$(curl -s 'https://api.twitch.tv/kraken/streams?client_id='$clientID'&game='$gametocheck);     [[ $(echo $twitchdata | jq '._total') == 0 ]] && nobodyshit     stream=$(echo $twitchdata | jq -r '.streams[] | .channel.language, .channel.name' | awk 'NR%2{printf "%s:",$0;next;}1' | dmenu -i -p -l 10 "Which stream ?" | sed 's/.*://');     [[ ! -n $stream ]] && aborted     exec firefox -new-window https://www.twitch.tv/popout/$stream/chat?popout= & mpv https://www.twitch.tv/$stream;     exit; }
twitchgamefunction(){             if [[ -n $@ ]]; then 	check_and_launch $@;     else	 	game=$(awk '{print $0} END { printf "Other\nAdd" }' $gamesfile | dmenu -i -p "$noshit") || aborted; 	if [[ $game == Add ]];then 0	    game=$(cat $gamesdb | dmenu -i -p "Which game do you want to add on favorite?") || aborted; 	    echo -e "$game" >>$gamesfile; 	    cert=$(echo -e "No\nYes" | dmenu -i -p "Do you want to check streams for $game?"); 	    [[ $cert == Yes ]] || aborted; 	elif [[ $game == Other ]]; then 	    game=$(cat $gamesdb| dmenu -i -p "$noshit") || aborted; 	fi; 	    check_and_launch $game;     fi; }
twitchlivefunction(){     if [[ -n $@ ]]; then 	echo "Checking if $@ is live ..."; 	test=$(curl -s https://api.twitch.tv/kraken/streams/"$@"?client_id=$clientID | jq ".stream._id") 	[ ! $test == null ] && (exec firefox -new-window https://www.twitch.tv/popout/$@/chat?popout= & mpv https://www.twitch.tv/"$@") || echo "$@ doesn't stream right now"; 	exit;     else 	echo "Checking connected streams ..."; 	twitchdata=$(curl -s 'https://api.twitch.tv/kraken/streams?client_id='$clientID'&channel='$(cat $channelsfile)) 	stream=$(echo $twitchdata | jq -r '.streams[] | .channel.name' | dmenu -i -p "Which stream do you want to watch?") || aborted; 	exec firefox -new-window https://www.twitch.tv/popout/$stream/chat?popout= & mpv https://www.twitch.tv/"$stream"; 	exit;     fi; }
twitchvod_search(){     searchingshit=$(python -c "print('"$(cat ~/.script/twitch/datas/listchanneltwitch)"'.replace(',','\n'))" | dmenu -p "TwitchVOD Channel:") || aborted;     echo "Searching for video on "$searchingshit;     curl_choose_and_watch; }
curl_choose_and_watch(){	
    twitchvod=$(curl -s 'https://api.twitch.tv/kraken/channels/'$searchingshit'/videos?client_id='$clientID'&limit='$max_vid'&offset='$offset);     total_vod=$(echo $twitchvod | jq '._total');     [[ $total_vod == null || $total_vod == 0 ]] && twitchvod_search
    (( borne_max=$total_vod - $max_vid ));     video=$(echo $twitchvod | jq -r '.videos[] | .title, .recorded_at' | awk -v bm=$borne_max -v offs=$offset 'BEGIN{ if (offs > 0 ) { printf "Prev\n" } }!(NR%2){printf ("%3d: %-100s %.10s\n", FNR/2+offs, p, $0)}{p=$0}END{ if (offs < bm) { printf "Next" } }' | dmenu -i -l 30 -p "Which video?" | sed 's/:.*//')     if [[ ! -n $video ]];then 	twitchvod_search;     elif [[ $video == Next ]];then 	((offset= $offset + 100 )); 	curl_choose_and_watch;     elif [[ $video == Prev ]];then         ((offset= $offset - 100 )); 	curl_choose_and_watch;     else	 	(( num=$video - 1 - $offset)); 	videourl=$(echo $twitchvod | jq -r '.videos['$num'].url')	
	res=$(echo -e "720\n1080\n360" | dmenu -i -p "Which resolution? (if avalaible)") || twitchvod_search; 	mpv --ytdl-format="[height<=?"$res"]" $videourl || twitchvod_search; 	exit;     fi; }
if ping -q -c 1 -W 1 1.1.1.1 &>/dev/null; then     case $1 in 	--live) 	    twitchlivefunction $2; 	    ;; 	--game) 	    noshit="Choose a game"; 	    twitchgamefunction "${@#$1}"; 	    ;; 	--vod) 	    offset=0; 	    twitchvod_search; 	    ;; 	*) 	    echo -e "This is the twitch script featuring dmenu and mpv! Heres the options available : \n     --live   To check if your favorites streamers are live\n     --game   To check available streams of a desired game\n     --vod    To check for VOD on a desired channel"; 	    ;;     esac; else     echo "No internet connection"; fi
#!/bin/bash -i
# Parameters
shopt -s expand_aliases
channelsfile=/home/$USER/.script/twitch/datas/listchanneltwitch
gamesfile=/home/$USER/.script/twitch/datas/listgamestwitch 
clientID=9wba9dk3evmmlxs2xz0xwle0fwr6uc
gamesdb=/home/$USER/.script/gamedatabase/gamesdb
max_vid=100
nobodyshit(){     echo "Nobody streaming this shit right now";     noshit="No streams. Choose an other game:";     twitchgamefunction; }
aborted(){     echo "Aborted";     exit; }
check_and_launch(){     gametocheck=$(echo $@);     gametocheck=$(python -c "print('$gametocheck'.replace(' ','%20'))");     echo "Checking connected streams for $@ ..."     twitchdata=$(curl -s 'https://api.twitch.tv/kraken/streams?client_id='$clientID'&game='$gametocheck);     [[ $(echo $twitchdata | jq '._total') == 0 ]] && nobodyshit     stream=$(echo $twitchdata | jq -r '.streams[] | .channel.language, .channel.name' | awk 'NR%2{printf "%s:",$0;next;}1' | dmenu -i -p -l 10 "Which stream ?" | sed 's/.*://');     [[ ! -n $stream ]] && aborted     exec firefox -new-window https://www.twitch.tv/popout/$stream/chat?popout= & mpv https://www.twitch.tv/$stream;     exit; }
twitchgamefunction(){             if [[ -n $@ ]]; then 	check_and_launch $@;     else	 	game=$(awk '{print $0} END { printf "Other\nAdd" }' $gamesfile | dmenu -l 10 -i -p "$noshit") || aborted; 	if [[ $game == Add ]];then 0	    game=$(cat $gamesdb | dmenu -l 10 -i -p "Which game do you want to add on favorite?") || aborted; 	    echo -e "$game" >>$gamesfile; 	    cert=$(echo -e "No\nYes" | dmenu -l 10 -i -p "Do you want to check streams for $game?"); 	    [[ $cert == Yes ]] || aborted; 	elif [[ $game == Other ]]; then 	    game=$(cat $gamesdb| dmenu -l 10 -i -p "$noshit") || aborted; 	fi; 	    check_and_launch $game;     fi; }
twitchlivefunction(){     if [[ -n $@ ]]; then 	echo "Checking if $@ is live ..."; 	test=$(curl -s https://api.twitch.tv/kraken/streams/"$@"?client_id=$clientID | jq ".stream._id") 	[ ! $test == null ] && (exec firefox -new-window https://www.twitch.tv/popout/$@/chat?popout= & mpv https://www.twitch.tv/"$@") || echo "$@ doesn't stream right now"; 	exit;     else 	echo "Checking connected streams ..."; 	twitchdata=$(curl -s 'https://api.twitch.tv/kraken/streams?client_id='$clientID'&channel='$(cat $channelsfile)) 	stream=$(echo $twitchdata | jq -r '.streams[] | .channel.name' | dmenu -l 10 -i -p "Which stream do you want to watch?") || aborted; 	exec firefox -new-window https://www.twitch.tv/popout/$stream/chat?popout= & mpv https://www.twitch.tv/"$stream"; 	exit;     fi; }
twitchvod_search(){     searchingshit=$(python -c "print('"$(cat ~/.script/twitch/datas/listchanneltwitch)"'.replace(',','\n'))" | dmenu -l 10 -p "TwitchVOD Channel:") || aborted;     echo "Searching for video on "$searchingshit;     curl_choose_and_watch; }
curl_choose_and_watch(){	
    twitchvod=$(curl -s 'https://api.twitch.tv/kraken/channels/'$searchingshit'/videos?client_id='$clientID'&limit='$max_vid'&offset='$offset);     total_vod=$(echo $twitchvod | jq '._total');     [[ $total_vod == null || $total_vod == 0 ]] && twitchvod_search
    (( borne_max=$total_vod - $max_vid ));     video=$(echo $twitchvod | jq -r '.videos[] | .title, .recorded_at' | awk -v bm=$borne_max -v offs=$offset 'BEGIN{ if (offs > 0 ) { printf "Prev\n" } }!(NR%2){printf ("%3d: %-100s %.10s\n", FNR/2+offs, p, $0)}{p=$0}END{ if (offs < bm) { printf "Next" } }' | dmenu -i -l 30 -p "Which video?" | sed 's/:.*//')     if [[ ! -n $video ]];then 	twitchvod_search;     elif [[ $video == Next ]];then 	((offset= $offset + 100 )); 	curl_choose_and_watch;     elif [[ $video == Prev ]];then         ((offset= $offset - 100 )); 	curl_choose_and_watch;     else	 	(( num=$video - 1 - $offset)); 	videourl=$(echo $twitchvod | jq -r '.videos['$num'].url')	
	res=$(echo -e "720\n1080\n360" | dmenu -i -p "Which resolution? (if avalaible)") || twitchvod_search; 	mpv --ytdl-format="[height<=?"$res"]" $videourl || twitchvod_search; 	exit;     fi; }
if ping -q -c 1 -W 1 1.1.1.1 &>/dev/null; then     case $1 in 	--live) 	    twitchlivefunction $2; 	    ;; 	--game) 	    noshit="Choose a game"; 	    twitchgamefunction "${@#$1}"; 	    ;; 	--vod) 	    offset=0; 	    twitchvod_search; 	    ;; 	*) 	    echo -e "This is the twitch script featuring dmenu and mpv! Heres the options available : \n     --live   To check if your favorites streamers are live\n     --game   To check available streams of a desired game\n     --vod    To check for VOD on a desired channel"; 	    ;;     esac; else     echo "No internet connection"; fi
#!/bin/bash -i
# Parameters
shopt -s expand_aliases
channelsfile=/home/$USER/.script/twitch/datas/listchanneltwitch
gamesfile=/home/$USER/.script/twitch/datas/listgamestwitch 
clientID=9wba9dk3evmmlxs2xz0xwle0fwr6uc
gamesdb=/home/$USER/.script/gamedatabase/gamesdb
max_vid=100
nobodyshit(){     echo "Nobody streaming this shit right now";     noshit="No streams. Choose an other game:";     twitchgamefunction; }
aborted(){     echo "Aborted";     exit; }
check_and_launch(){     gametocheck=$(echo $@);     gametocheck=$(python -c "print('$gametocheck'.replace(' ','%20'))");     echo "Checking connected streams for $@ ..."     twitchdata=$(curl -s 'https://api.twitch.tv/kraken/streams?client_id='$clientID'&game='$gametocheck);     [[ $(echo $twitchdata | jq '._total') == 0 ]] && nobodyshit     stream=$(echo $twitchdata | jq -r '.streams[] | .channel.language, .channel.name' | awk 'NR%2{printf "%s:",$0;next;}1' | dmenu -i -p -l 10 "Which stream ?" | sed 's/.*://');     [[ ! -n $stream ]] && aborted     exec firefox -new-window https://www.twitch.tv/popout/$stream/chat?popout= & mpv https://www.twitch.tv/$stream;     exit; }
twitchgamefunction(){             if [[ -n $@ ]]; then 	check_and_launch $@;     else	 	game=$(awk '{print $0} END { printf "Other\nAdd" }' $gamesfile | dmenu -l 10 -i -p "$noshit") || aborted; 	if [[ $game == Add ]];then 0	    game=$(cat $gamesdb | dmenu -l 10 -i -p "Which game do you want to add on favorite?") || aborted; 	    echo -e "$game" >>$gamesfile; 	    cert=$(echo -e "No\nYes" | dmenu -l 10 -i -p "Do you want to check streams for $game?"); 	    [[ $cert == Yes ]] || aborted; 	elif [[ $game == Other ]]; then 	    game=$(cat $gamesdb| dmenu -l 10 -i -p "$noshit") || aborted; 	fi; 	    check_and_launch $game;     fi; }
twitchlivefunction(){     if [[ -n $@ ]]; then 	echo "Checking if $@ is live ..."; 	test=$(curl -s https://api.twitch.tv/kraken/streams/"$@"?client_id=$clientID | jq ".stream._id") 	[ ! $test == null ] && (exec firefox -new-window https://www.twitch.tv/popout/$@/chat?popout= & mpv https://www.twitch.tv/"$@") || echo "$@ doesn't stream right now"; 	exit;     else 	echo "Checking connected streams ..."; 	twitchdata=$(curl -s 'https://api.twitch.tv/kraken/streams?client_id='$clientID'&channel='$(cat $channelsfile)) 	stream=$(echo $twitchdata | jq -r '.streams[] | .channel.name' | dmenu -l 10 -i -p "Which stream do you want to watch?") || aborted; 	exec firefox -new-window https://www.twitch.tv/popout/$stream/chat?popout= & mpv https://www.twitch.tv/"$stream"; 	exit;     fi; }
twitchvod_search(){     searchingshit=$(python -c "print('"$(cat ~/.script/twitch/datas/listchanneltwitch)"'.replace(',','\n'))" | dmenu -l 10 -p "TwitchVOD Channel:") || aborted;     echo "Searching for video on "$searchingshit;     curl_choose_and_watch; }
curl_choose_and_watch(){	
    twitchvod=$(curl -s 'https://api.twitch.tv/kraken/channels/'$searchingshit'/videos?client_id='$clientID'&limit='$max_vid'&offset='$offset);     total_vod=$(echo $twitchvod | jq '._total');     [[ $total_vod == null || $total_vod == 0 ]] && twitchvod_search
    (( borne_max=$total_vod - $max_vid ));     video=$(echo $twitchvod | jq -r '.videos[] | .title, .recorded_at' | awk -v bm=$borne_max -v offs=$offset 'BEGIN{ if (offs > 0 ) { printf "Prev\n" } }!(NR%2){printf ("%3d: %-100s %.10s\n", FNR/2+offs, p, $0)}{p=$0}END{ if (offs < bm) { printf "Next" } }' | dmenu -i -l 30 -p "Which video?" | sed 's/:.*//')     if [[ ! -n $video ]];then 	twitchvod_search;     elif [[ $video == Next ]];then 	((offset= $offset + 100 )); 	curl_choose_and_watch;     elif [[ $video == Prev ]];then         ((offset= $offset - 100 )); 	curl_choose_and_watch;     else	 	(( num=$video - 1 - $offset)); 	videourl=$(echo $twitchvod | jq -r '.videos['$num'].url')	
	res=$(echo -e "720\n1080\n360" | dmenu -i -p "Which resolution? (if avalaible)") || twitchvod_search; 	mpv --ytdl-format="[height<=?"$res"]" $videourl || twitchvod_search; 	exit;     fi; }
if ping -q -c 1 -W 1 1.1.1.1 &>/dev/null; then     case $1 in 	--live) 	    twitchlivefunction $2; 	    ;; 	--game) 	    noshit="Choose a game"; 	    twitchgamefunction "${@#$1}"; 	    ;; 	--vod) 	    offset=0; 	    twitchvod_search; 	    ;; 	*) 	    echo -e "This is the twitch script featuring dmenu and mpv! Heres the options available : \n     --live   To check if your favorites streamers are live\n     --game   To check available streams of a desired game\n     --vod    To check for VOD on a desired channel"; 	    ;;     esac; else     echo "No internet connection"; fi
cd Downloads/
ls
cat ttf-to-svg 
emacs ttf-to-svg 
ls
rm t
ll
rm *
ls
ll
rm .#ttf-to-svg 
ls
ll
cd 
cd Images/
l
ls
cd Wallpapers/
ls
cd backup/
sl
ls
feh zool.jpg 
ls
cd ..
ls
cd ..
cd Wallpapers/
ls
cd ..
rm -r Wallpapers/
cd
cd .script/
ls
cd aurorApp/
ls
ll
cd ..
rmdir aurorApp/
ls
cd dwarffortress/
ls
ll
cd ..
rmdir dwarffortress/
ls
cd note/
ls
cd ..
cd gamedatabase/
ls
ll
cat gamesdb 
ls
cd ..
ls
cd gamedatabase/
ls
cd 
cd Downloads/
git clone git@github.com:BrachystochroneSD/dotscripts.git
ls
ll
cd
mv Downloads/gamedbupdate .script/gamedatabase/
cd .script/gamedatabase/
ls
chmod +x gamedbupdate 
notify-send 'jlkj'
.script/dunstwal 
gamedbupdate 
ls
ll
ls
cat nohup.out 
rm nohup.out 
rm screenshot.*
ls
ll
cat .games.tmp 
rm .games.tmp 
cd /tmp/
ls
ll
gamedbupdate 
cd
curly=$(curl -s 'https://www.giantbomb.com/api/games/?api_key='$apikey'&format=json&field_list=name&offset='$offset)
echo curly
echo $curly
curly=$(curl -s 'https://www.giantbomb.com/api/games/?api_key='$apikey'&format=json&field_list=name&offset=0')
echo $curly
curly=$(curl -s 'https://www.giantbomb.com/api/games/?api_key=abda390e015cc8cfba7cf4574fd883b2aeca0081&format=json&field_list=name&offset=0')
echo $curly
echo $curly | jq 'results[] | .name'
echo $curly | jq 'results[]'
echo $curly | jq 'results[0].name'
echo $curly | jq -r 'results[].name'
echo $curly | jq -r 'results[]'
echo $curly | jq
echo $curly | jq .results
echo $curly | jq .results[]
echo $curly | jq .results[] | jq .name
echo $curly | jq .results[] | jq .name | sed -i 's/^"//'
echo $curly | jq .results[] | jq .name | sed 's/^"//'
echo $curly | jq .results[] | jq .name | sed 's/^"\(.*\)"$/\1/'
echo $curly | jq .results[] | jq .name | sed 's/^"\(.*\)"$/\/'
echo $curly | jq .results[] | jq .name | sed 's/^"\(.*\)"$/\2/'
echo $curly | jq .results[] | jq .name | sed 's/^"\(.*\)"$/\0/'
echo $curly | jq .results[] | jq .name | sed 's/^"\(.*\)"$/\1/'
echo $curly | jq .results[] | jq .name | sed 's/^"\(.*\)"$/\1/' > Downloads/test
cat Downloads/test 
echo $curly | jq .results[] | jq .name | sed 's/^"\(.*\)"$/\1/' >> Downloads/test
cat Downloads/test | wc -l
echo $curly | jq .results[] | jq .name | sed 's/^"\(.*\)"$/\1/' >> Downloads/test
cat Downloads/test | wc -l
.script/gamedatabase/gamedbupdate2
chmod +x .script/gamedatabase/gamedbupdate2
.script/gamedatabase/gamedbupdate2 
rm .script/gamedatabase/gamedbupdate2 
gamedbupdate 
ls
ll
cat .fehbg 
neofetch 
.script/surf/loadbookmark 
#!/bin/bash -i
apikey=AIzaSyAxoOzmqHSjvkv0LzYm5v4vUzvjorBu374
max_results=30
shopt -s expand_aliases
url_encode(){     ret=$(echo $@);     echo $(python -c "import urllib.parse, sys; print(urllib.parse.quote_plus(sys.argv[1]))" "$ret"); }
aborted(){     echo "Aborted";     exit; }
get_channel_id(){     channoulname=$(url_encode $channelname);     channelsearch=$(curl -s 'https://www.googleapis.com/youtube/v3/search?q='$channoulname'&type=channel&maxResults=25&part=snippet&key='$apikey)     chanchoice=$(echo $channelsearch | jq -r '.items[] | .snippet.channelTitle' | awk '{printf ("%2d: %s\n",NR,$0)}' | dmenu -l 10 -i -p 'Which channel ?' | sed 's/:.*//');     [[ ! -n $chanchoice ]] && youtube_search;     (( numchan= $chanchoice - 1 ));     channelID=$(echo $channelsearch | jq -r '.items['$numchan'].snippet.channelId'); }
youtube_search(){     channelID="";     searchingshit=$(cat ~/.script/youtube/datas/searchhistory | awk '{print$0}END{printf "\n\nChannel option"}' | dmenu -i -l 20 -p "Youtube search:") || aborted;     if [[ $searchingshit == 'Channel option' ]];then 	channelname=$(echo | dmenu -p "Channel Search") || youtube_search;         get_channel_id; 	searchingshit=$(echo | dmenu -i -l 20 -p "Search on this channel:") || youtube_search ;     fi;     echo $searchingshit >~/.script/youtube/datas/searchhistory     echo "Searching for "$searchingshit;     searchingshit=$(url_encode $searchingshit);     if [[ ! -n $channelID ]];then 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey;     else 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey'&channelId='$channelID;     fi         youtubesearchdata=$(curl -s $curly)     video=$(echo $youtubesearchdata | jq -r '.items[] | .snippet.title, .snippet.channelTitle, .snippet.publishedAt' | awk '{printf ("%.85s\n",$0)}' | awk '(NR%3==1){name=$0}(NR%3==2){date=$0}(NR%3==0){printf ("%2d: %-90s %-30s %.10s \n", NR/3, name, date, $0)}' | dmenu -l 30 -i -p 'YTSearch' | sed 's/:.*//');     [[ ! -n $video ]] && youtube_search;     (( num= $video - 1 ));     videoID=$(echo $youtubesearchdata | jq -r '.items['$num'].id.videoId')     res=$(echo -e "720\n1080\n360" | dmenu -i -p "Which resolution? (if avalaible)") || youtube_search;     mpv --ytdl-format="[height<=?"$res"]" 'https://www.youtube.com/watch?v='$videoID    ;     exit; }
if ping -q -c 1 -W 1 1.1.1.1 &>/dev/null; then     youtube_search; else     echo "No internet connection"; fi
#!/bin/bash -i
apikey=AIzaSyAxoOzmqHSjvkv0LzYm5v4vUzvjorBu374
max_results=30
. "${HOME}/.cache/wal/colors.sh"
url_encode(){     ret=$(echo $@);     echo $(python -c "import urllib.parse, sys; print(urllib.parse.quote_plus(sys.argv[1]))" "$ret"); }
aborted(){     echo "Aborted";     exit; }
get_channel_id(){     channoulname=$(url_encode $channelname);     channelsearch=$(curl -s 'https://www.googleapis.com/youtube/v3/search?q='$channoulname'&type=channel&maxResults=25&part=snippet&key='$apikey)     chanchoice=$(echo $channelsearch | jq -r '.items[] | .snippet.channelTitle' | awk '{printf ("%2d: %s\n",NR,$0)}' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 10 -i -p 'Which channel ?' | sed 's/:.*//');     [[ ! -n $chanchoice ]] && youtube_search;     (( numchan= $chanchoice - 1 ));     channelID=$(echo $channelsearch | jq -r '.items['$numchan'].snippet.channelId'); }
youtube_search(){     channelID="";     searchingshit=$(cat ~/.script/youtube/datas/searchhistory | awk '{print$0}END{printf "\n\nChannel option"}' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -l 20 -p "Youtube search:") || aborted;     if [[ $searchingshit == 'Channel option' ]];then 	channelname=$(echo | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -p "Channel Search") || youtube_search;         get_channel_id; 	searchingshit=$(echo | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -l 20 -p "Search on this channel:") || youtube_search ;     fi;     echo $searchingshit >~/.script/youtube/datas/searchhistory     echo "Searching for "$searchingshit;     searchingshit=$(url_encode $searchingshit);     if [[ ! -n $channelID ]];then 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey;     else 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey'&channelId='$channelID;     fi         youtubesearchdata=$(curl -s $curly)     video=$(echo $youtubesearchdata | jq -r '.items[] | .snippet.title, .snippet.channelTitle, .snippet.publishedAt' | awk '{printf ("%.85s\n",$0)}' | awk '(NR%3==1){name=$0}(NR%3==2){date=$0}(NR%3==0){printf ("%2d: %-90s %-30s %.10s \n", NR/3, name, date, $0)}' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 30 -i -p 'YTSearch' | sed 's/:.*//');     [[ ! -n $video ]] && youtube_search;     (( num= $video - 1 ));     videoID=$(echo $youtubesearchdata | jq -r '.items['$num'].id.videoId')     res=$(echo -e "720\n1080\n360" | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -p "Which resolution? (if avalaible)") || youtube_search;     mpv --ytdl-format="[height<=?"$res"]" 'https://www.youtube.com/watch?v='$videoID    ;     exit; }
if ping -q -c 1 -W 1 1.1.1.1 &>/dev/null; then     youtube_search; else     echo "No internet connection"; fi
#!/bin/bash -i
# Parameters
. "${HOME}/.cache/wal/colors.sh"
channelsfile=/home/$USER/.script/twitch/datas/listchanneltwitch
gamesfile=/home/$USER/.script/twitch/datas/listgamestwitch 
clientID=9wba9dk3evmmlxs2xz0xwle0fwr6uc
gamesdb=/home/$USER/.script/gamedatabase/gamesdb
max_vid=100
nobodyshit(){     echo "Nobody streaming this shit right now";     noshit="No streams. Choose an other game:";     twitchgamefunction; }
aborted(){     echo "Aborted";     exit; }
check_and_launch(){     gametocheck=$(echo $@);     gametocheck=$(python -c "print('$gametocheck'.replace(' ','%20'))");     echo "Checking connected streams for $@ ..."     twitchdata=$(curl -s 'https://api.twitch.tv/kraken/streams?client_id='$clientID'&game='$gametocheck);     [[ $(echo $twitchdata | jq '._total') == 0 ]] && nobodyshit     stream=$(echo $twitchdata | jq -r '.streams[] | .channel.language, .channel.name' | awk 'NR%2{printf "%s:",$0;next;}1' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -p -l 10 "Which stream ?" | sed 's/.*://');     [[ ! -n $stream ]] && aborted     exec firefox -new-window https://www.twitch.tv/popout/$stream/chat?popout= & mpv https://www.twitch.tv/$stream;     exit; }
twitchgamefunction(){             if [[ -n $@ ]]; then 	check_and_launch $@;     else	 	game=$(awk '{print $0} END { printf "Other\nAdd" }' $gamesfile | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 10 -i -p "$noshit") || aborted; 	if [[ $game == Add ]];then 0	    game=$(cat $gamesdb | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 10 -i -p "Which game do you want to add on favorite?") || aborted; 	    echo -e "$game" >>$gamesfile; 	    cert=$(echo -e "No\nYes" | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 10 -i -p "Do you want to check streams for $game?"); 	    [[ $cert == Yes ]] || aborted; 	elif [[ $game == Other ]]; then 	    game=$(cat $gamesdb| dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 10 -i -p "$noshit") || aborted; 	fi; 	    check_and_launch $game;     fi; }
twitchlivefunction(){     if [[ -n $@ ]]; then 	echo "Checking if $@ is live ..."; 	test=$(curl -s https://api.twitch.tv/kraken/streams/"$@"?client_id=$clientID | jq ".stream._id") 	[ ! $test == null ] && (exec firefox -new-window https://www.twitch.tv/popout/$@/chat?popout= & mpv https://www.twitch.tv/"$@") || echo "$@ doesn't stream right now"; 	exit;     else 	echo "Checking connected streams ..."; 	twitchdata=$(curl -s 'https://api.twitch.tv/kraken/streams?client_id='$clientID'&channel='$(cat $channelsfile)) 	stream=$(echo $twitchdata | jq -r '.streams[] | .channel.name' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 10 -i -p "Which stream do you want to watch?") || aborted; 	exec firefox -new-window https://www.twitch.tv/popout/$stream/chat?popout= & mpv https://www.twitch.tv/"$stream"; 	exit;     fi; }
twitchvod_search(){     searchingshit=$(python -c "print('"$(cat ~/.script/twitch/datas/listchanneltwitch)"'.replace(',','\n'))" | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 10 -p "TwitchVOD Channel:") || aborted;     echo "Searching for video on "$searchingshit;     curl_choose_and_watch; }
curl_choose_and_watch(){	
    twitchvod=$(curl -s 'https://api.twitch.tv/kraken/channels/'$searchingshit'/videos?client_id='$clientID'&limit='$max_vid'&offset='$offset);     total_vod=$(echo $twitchvod | jq '._total');     [[ $total_vod == null || $total_vod == 0 ]] && twitchvod_search
    (( borne_max=$total_vod - $max_vid ));     video=$(echo $twitchvod | jq -r '.videos[] | .title, .recorded_at' | awk -v bm=$borne_max -v offs=$offset 'BEGIN{ if (offs > 0 ) { printf "Prev\n" } }!(NR%2){printf ("%3d: %-100s %.10s\n", FNR/2+offs, p, $0)}{p=$0}END{ if (offs < bm) { printf "Next" } }' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -l 30 -p "Which video?" | sed 's/:.*//')     if [[ ! -n $video ]];then 	twitchvod_search;     elif [[ $video == Next ]];then 	((offset= $offset + 100 )); 	curl_choose_and_watch;     elif [[ $video == Prev ]];then         ((offset= $offset - 100 )); 	curl_choose_and_watch;     else	 	(( num=$video - 1 - $offset)); 	videourl=$(echo $twitchvod | jq -r '.videos['$num'].url')	
	res=$(echo -e "720\n1080\n360" | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -p "Which resolution? (if avalaible)") || twitchvod_search; 	mpv --ytdl-format="[height<=?"$res"]" $videourl || twitchvod_search; 	exit;     fi; }
if ping -q -c 1 -W 1 1.1.1.1 &>/dev/null; then     case $1 in 	--live) 	    twitchlivefunction $2; 	    ;; 	--game) 	    noshit="Choose a game"; 	    twitchgamefunction "${@#$1}"; 	    ;; 	--vod) 	    offset=0; 	    twitchvod_search; 	    ;; 	*) 	    echo -e "This is the twitch script featuring dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" and mpv! Heres the options available : \n     --live   To check if your favorites streamers are live\n     --game   To check available streams of a desired game\n     --vod    To check for VOD on a desired channel"; 	    ;;     esac; else     echo "No internet connection"; fi
man surf 
#!/bin/bash -i
# Parameters
. "${HOME}/.cache/wal/colors.sh"
channelsfile=/home/$USER/.script/twitch/datas/listchanneltwitch
gamesfile=/home/$USER/.script/twitch/datas/listgamestwitch 
clientID=9wba9dk3evmmlxs2xz0xwle0fwr6uc
gamesdb=/home/$USER/.script/gamedatabase/gamesdb
max_vid=100
nobodyshit(){     echo "Nobody streaming this shit right now";     noshit="No streams. Choose an other game:";     twitchgamefunction; }
aborted(){     echo "Aborted";     exit; }
check_and_launch(){     gametocheck=$(echo $@);     gametocheck=$(python -c "print('$gametocheck'.replace(' ','%20'))");     echo "Checking connected streams for $@ ..."     twitchdata=$(curl -s 'https://api.twitch.tv/kraken/streams?client_id='$clientID'&game='$gametocheck);     [[ $(echo $twitchdata | jq '._total') == 0 ]] && nobodyshit     stream=$(echo $twitchdata | jq -r '.streams[] | .channel.language, .channel.name' | awk 'NR%2{printf "%s:",$0;next;}1' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -p -l 10 "Which stream ?" | sed 's/.*://');     [[ ! -n $stream ]] && aborted     exec surf https://www.twitch.tv/popout/$stream/chat?popout= & mpv https://www.twitch.tv/$stream;     exit; }
twitchgamefunction(){             if [[ -n $@ ]]; then 	check_and_launch $@;     else	 	game=$(awk '{print $0} END { printf "Other\nAdd" }' $gamesfile | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 10 -i -p "$noshit") || aborted; 	if [[ $game == Add ]];then 0	    game=$(cat $gamesdb | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 10 -i -p "Which game do you want to add on favorite?") || aborted; 	    echo -e "$game" >>$gamesfile; 	    cert=$(echo -e "No\nYes" | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 10 -i -p "Do you want to check streams for $game?"); 	    [[ $cert == Yes ]] || aborted; 	elif [[ $game == Other ]]; then 	    game=$(cat $gamesdb| dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 10 -i -p "$noshit") || aborted; 	fi; 	    check_and_launch $game;     fi; }
twitchlivefunction(){     if [[ -n $@ ]]; then 	echo "Checking if $@ is live ..."; 	test=$(curl -s https://api.twitch.tv/kraken/streams/"$@"?client_id=$clientID | jq ".stream._id") 	[ ! $test == null ] && (exec surf https://www.twitch.tv/popout/$@/chat?popout= & mpv https://www.twitch.tv/"$@") || echo "$@ doesn't stream right now"; 	exit;     else 	echo "Checking connected streams ..."; 	twitchdata=$(curl -s 'https://api.twitch.tv/kraken/streams?client_id='$clientID'&channel='$(cat $channelsfile)) 	stream=$(echo $twitchdata | jq -r '.streams[] | .channel.name' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 10 -i -p "Which stream do you want to watch?") || aborted; 	exec surf -new-window https://www.twitch.tv/popout/$stream/chat?popout= & mpv https://www.twitch.tv/"$stream"; 	exit;     fi; }
twitchvod_search(){     searchingshit=$(python -c "print('"$(cat ~/.script/twitch/datas/listchanneltwitch)"'.replace(',','\n'))" | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 10 -p "TwitchVOD Channel:") || aborted;     echo "Searching for video on "$searchingshit;     curl_choose_and_watch; }
curl_choose_and_watch(){	
    twitchvod=$(curl -s 'https://api.twitch.tv/kraken/channels/'$searchingshit'/videos?client_id='$clientID'&limit='$max_vid'&offset='$offset);     total_vod=$(echo $twitchvod | jq '._total');     [[ $total_vod == null || $total_vod == 0 ]] && twitchvod_search
    (( borne_max=$total_vod - $max_vid ));     video=$(echo $twitchvod | jq -r '.videos[] | .title, .recorded_at' | awk -v bm=$borne_max -v offs=$offset 'BEGIN{ if (offs > 0 ) { printf "Prev\n" } }!(NR%2){printf ("%3d: %-100s %.10s\n", FNR/2+offs, p, $0)}{p=$0}END{ if (offs < bm) { printf "Next" } }' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -l 30 -p "Which video?" | sed 's/:.*//')     if [[ ! -n $video ]];then 	twitchvod_search;     elif [[ $video == Next ]];then 	((offset= $offset + 100 )); 	curl_choose_and_watch;     elif [[ $video == Prev ]];then         ((offset= $offset - 100 )); 	curl_choose_and_watch;     else	 	(( num=$video - 1 - $offset)); 	videourl=$(echo $twitchvod | jq -r '.videos['$num'].url')	
	res=$(echo -e "720\n1080\n360" | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -p "Which resolution? (if avalaible)") || twitchvod_search; 	mpv --ytdl-format="[height<=?"$res"]" $videourl || twitchvod_search; 	exit;     fi; }
if ping -q -c 1 -W 1 1.1.1.1 &>/dev/null; then     case $1 in 	--live) 	    twitchlivefunction $2; 	    ;; 	--game) 	    noshit="Choose a game"; 	    twitchgamefunction "${@#$1}"; 	    ;; 	--vod) 	    offset=0; 	    twitchvod_search; 	    ;; 	*) 	    echo -e "This is the twitch script featuring dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" and mpv! Heres the options available : \n     --live   To check if your favorites streamers are live\n     --game   To check available streams of a desired game\n     --vod    To check for VOD on a desired channel"; 	    ;;     esac; else     echo "No internet connection"; fi
#!/bin/bash -i
# Parameters
. "${HOME}/.cache/wal/colors.sh"
channelsfile=/home/$USER/.script/twitch/datas/listchanneltwitch
gamesfile=/home/$USER/.script/twitch/datas/listgamestwitch 
clientID=9wba9dk3evmmlxs2xz0xwle0fwr6uc
gamesdb=/home/$USER/.script/gamedatabase/gamesdb
max_vid=100
nobodyshit(){     echo "Nobody streaming this shit right now";     noshit="No streams. Choose an other game:";     twitchgamefunction; }
aborted(){     echo "Aborted";     exit; }
check_and_launch(){     gametocheck=$(echo $@);     gametocheck=$(python -c "print('$gametocheck'.replace(' ','%20'))");     echo "Checking connected streams for $@ ..."     twitchdata=$(curl -s 'https://api.twitch.tv/kraken/streams?client_id='$clientID'&game='$gametocheck);     [[ $(echo $twitchdata | jq '._total') == 0 ]] && nobodyshit     stream=$(echo $twitchdata | jq -r '.streams[] | .channel.language, .channel.name' | awk 'NR%2{printf "%s:",$0;next;}1' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -p -l 10 "Which stream ?" | sed 's/.*://');     [[ ! -n $stream ]] && aborted     exec surf https://www.twitch.tv/popout/$stream/chat?popout= & mpv https://www.twitch.tv/$stream;     exit; }
twitchgamefunction(){             if [[ -n $@ ]]; then 	check_and_launch $@;     else	 	game=$(awk '{print $0} END { printf "Other\nAdd" }' $gamesfile | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 10 -i -p "$noshit") || aborted; 	if [[ $game == Add ]];then 0	    game=$(cat $gamesdb | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 10 -i -p "Which game do you want to add on favorite?") || aborted; 	    echo -e "$game" >>$gamesfile; 	    cert=$(echo -e "No\nYes" | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 10 -i -p "Do you want to check streams for $game?"); 	    [[ $cert == Yes ]] || aborted; 	elif [[ $game == Other ]]; then 	    game=$(cat $gamesdb| dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 10 -i -p "$noshit") || aborted; 	fi; 	    check_and_launch $game;     fi; }
twitchlivefunction(){     if [[ -n $@ ]]; then 	echo "Checking if $@ is live ..."; 	test=$(curl -s https://api.twitch.tv/kraken/streams/"$@"?client_id=$clientID | jq ".stream._id") 	[ ! $test == null ] && (exec surf https://www.twitch.tv/popout/$@/chat?popout= & mpv https://www.twitch.tv/"$@") || echo "$@ doesn't stream right now"; 	exit;     else 	echo "Checking connected streams ..."; 	twitchdata=$(curl -s 'https://api.twitch.tv/kraken/streams?client_id='$clientID'&channel='$(cat $channelsfile)) 	stream=$(echo $twitchdata | jq -r '.streams[] | .channel.name' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 10 -i -p "Which stream do you want to watch?") || aborted; 	exec surf -new-window https://www.twitch.tv/popout/$stream/chat?popout= & mpv https://www.twitch.tv/"$stream"; 	exit;     fi; }
twitchvod_search(){     searchingshit=$(python -c "print('"$(cat ~/.script/twitch/datas/listchanneltwitch)"'.replace(',','\n'))" | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 10 -p "TwitchVOD Channel:") || aborted;     echo "Searching for video on "$searchingshit;     curl_choose_and_watch; }
curl_choose_and_watch(){	
    twitchvod=$(curl -s 'https://api.twitch.tv/kraken/channels/'$searchingshit'/videos?client_id='$clientID'&limit='$max_vid'&offset='$offset);     total_vod=$(echo $twitchvod | jq '._total');     [[ $total_vod == null || $total_vod == 0 ]] && twitchvod_search
    (( borne_max=$total_vod - $max_vid ));     video=$(echo $twitchvod | jq -r '.videos[] | .title, .recorded_at' | awk -v bm=$borne_max -v offs=$offset 'BEGIN{ if (offs > 0 ) { printf "Prev\n" } }!(NR%2){printf ("%3d: %-100s %.10s\n", FNR/2+offs, p, $0)}{p=$0}END{ if (offs < bm) { printf "Next" } }' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -l 30 -p "Which video?" | sed 's/:.*//')     if [[ ! -n $video ]];then 	twitchvod_search;     elif [[ $video == Next ]];then 	((offset= $offset + 100 )); 	curl_choose_and_watch;     elif [[ $video == Prev ]];then         ((offset= $offset - 100 )); 	curl_choose_and_watch;     else	 	(( num=$video - 1 - $offset)); 	videourl=$(echo $twitchvod | jq -r '.videos['$num'].url')	
	res=$(echo -e "720\n1080\n360" | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -p "Which resolution? (if avalaible)") || twitchvod_search; 	mpv --ytdl-format="[height<=?"$res"]" $videourl || twitchvod_search; 	exit;     fi; }
if ping -q -c 1 -W 1 1.1.1.1 &>/dev/null; then     case $1 in 	--live) 	    twitchlivefunction $2; 	    ;; 	--game) 	    noshit="Choose a game"; 	    twitchgamefunction "${@#$1}"; 	    ;; 	--vod) 	    offset=0; 	    twitchvod_search; 	    ;; 	*) 	    echo -e "This is the twitch script featuring dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" and mpv! Heres the options available : \n     --live   To check if your favorites streamers are live\n     --game   To check available streams of a desired game\n     --vod    To check for VOD on a desired channel"; 	    ;;     esac; else     echo "No internet connection"; fi
#!/bin/bash -i
apikey=AIzaSyAxoOzmqHSjvkv0LzYm5v4vUzvjorBu374
max_results=30
. "${HOME}/.cache/wal/colors.sh"
url_encode(){     ret=$(echo $@);     echo $(python -c "import urllib.parse, sys; print(urllib.parse.quote_plus(sys.argv[1]))" "$ret"); }
aborted(){     echo "Aborted";     exit; }
get_channel_id(){     channoulname=$(url_encode $channelname);     channelsearch=$(curl -s 'https://www.googleapis.com/youtube/v3/search?q='$channoulname'&type=channel&maxResults=25&part=snippet&key='$apikey)     chanchoice=$(echo $channelsearch | jq -r '.items[] | .snippet.channelTitle' | awk '{printf ("%2d: %s\n",NR,$0)}' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 10 -i -p 'Which channel ?' | sed 's/:.*//');     [[ ! -n $chanchoice ]] && youtube_search;     (( numchan= $chanchoice - 1 ));     channelID=$(echo $channelsearch | jq -r '.items['$numchan'].snippet.channelId'); }
youtube_search(){     channelID="";     searchingshit=$(cat ~/.script/youtube/datas/searchhistory | awk '{print$0}END{printf "\n\nChannel option"}' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -l 20 -p "Youtube search:") || aborted;     if [[ $searchingshit == 'Channel option' ]];then 	channelname=$(echo | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -p "Channel Search") || youtube_search;         get_channel_id; 	searchingshit=$(echo | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -l 20 -p "Search on this channel:") || youtube_search ;     fi;     echo $searchingshit >~/.script/youtube/datas/searchhistory     echo "Searching for "$searchingshit;     searchingshit=$(url_encode $searchingshit);     if [[ ! -n $channelID ]];then 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey;     else 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey'&channelId='$channelID;     fi         youtubesearchdata=$(curl -s $curly)     video=$(echo $youtubesearchdata | jq -r '.items[] | .snippet.title, .snippet.channelTitle, .snippet.publishedAt' | awk '{printf ("%.85s\n",$0)}' | awk '(NR%3==1){name=$0}(NR%3==2){date=$0}(NR%3==0){printf ("%2d: %-90s %-30s %.10s \n", NR/3, name, date, $0)}' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 30 -i -p 'YTSearch' | sed 's/:.*//');     [[ ! -n $video ]] && youtube_search;     (( num= $video - 1 ));     videoID=$(echo $youtubesearchdata | jq -r '.items['$num'].id.videoId')     res=$(echo -e "720\n1080\n360" | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -p "Which resolution? (if avalaible)") || youtube_search;     mpv --ytdl-format="[height<=?"$res"]" 'https://www.youtube.com/watch?v='$videoID    ;     exit; }
if ping -q -c 1 -W 1 1.1.1.1 &>/dev/null; then     youtube_search; else     echo "No internet connection"; fi
man surf 
man tabbed 
man surf
man tabbe
man tabbed 
man surf
mv Dropbox/owl_vector.svg .icons/
notify-send 'lkj'
mv .icons/owl_vector.svg .icons/dialog-information.svg
notify-send 'lkj'
cd .icons/
ls
notify-send 'lkj'
sudo pacman -S adwaita-icon-theme 
notify-send -h
notify-send help
dunstify 'lkj'
man dunstify
dunstfy -h
dunstfy help
dunstify help
dunstify -h
dunstify --help
mv .icons/dialog-information.svg .icons/owl.svg
dunstify -i owl test
dunstify test
sudo pacman -Rs libnotify 
.script/dunstwal 
man tabbed 
tabbed -u "$bg1" -U "$fg1" -t "$bg1" -T "$bga" -c surf -e
. .cache/wal/colors.sh
tabbed -u $color0 -U $color15 -t $color3 -T $color8 -c surf -e
tabbed -u $color0 -U $color15 -t $color0 -T $color8 -c surf -e
tabbed -u $color0 -U $color15 -t $color8 -T $color0 -c surf -e
surf
neofetch 
man youtube-dl 
vimtutor
neofetch
ncmpcpp 
ms
ls
sudo reboot
tout marche comme prévu
ls
source .bashrc 
nnn
nnn ?
nnn -i
chmox +x .script/nnn 
chmod +x .script/nnn 
.script/nnn 
.script/nnn
rm .script/nnn 
man nnn
NNN_NO_AUTOSELECT=1
nnn
export NNN_NO_AUTOSELECT=1
nnn
source .bashrc 
.script/colorcorr 
neofetch
emacs
ls
#!/bin/bash -i
apikey=AIzaSyAxoOzmqHSjvkv0LzYm5v4vUzvjorBu374
max_results=30
url_encode(){     ret=$(echo $@);     echo $(python -c "import urllib.parse, sys; print(urllib.parse.quote_plus(sys.argv[1]))" "$ret"); }
aborted(){     echo "Aborted";     exit; }
get_channel_id(){     channoulname=$(url_encode $channelname);     channelsearch=$(curl -s 'https://www.googleapis.com/youtube/v3/search?q='$channoulname'&type=channel&maxResults=25&part=snippet&key='$apikey)     chanchoice=$(echo $channelsearch | jq -r '.items[] | .snippet.channelTitle' | awk '{printf ("%2d: %s\n",NR,$0)}' | /bin/dmen -l 10 -i -p 'Which channel ?' | sed 's/:.*//');     [[ ! -n $chanchoice ]] && youtube_search;     (( numchan= $chanchoice - 1 ));     channelID=$(echo $channelsearch | jq -r '.items['$numchan'].snippet.channelId'); }
youtube_search(){     channelID="";     searchingshit=$(cat ~/.script/youtube/datas/searchhistory | awk '{print$0}END{printf "\n\nChannel option"}' | /bin/dmen -i -l 20 -p "Youtube search:") || aborted;     if [[ $searchingshit == 'Channel option' ]];then 	channelname=$(echo | /bin/dmen -p "Channel Search") || youtube_search;         get_channel_id; 	searchingshit=$(echo | /bin/dmen -i -l 20 -p "Search on this channel:") || youtube_search ;     fi;     echo $searchingshit >~/.script/youtube/datas/searchhistory     echo "Searching for "$searchingshit;     searchingshit=$(url_encode $searchingshit);     if [[ ! -n $channelID ]];then 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey;     else 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey'&channelId='$channelID;     fi         youtubesearchdata=$(curl -s $curly)     video=$(echo $youtubesearchdata | jq -r '.items[] | .snippet.title, .snippet.channelTitle, .snippet.publishedAt' | awk '{printf ("%.85s\n",$0)}' | awk '(NR%3==1){name=$0}(NR%3==2){date=$0}(NR%3==0){printf ("%2d: %-90s %-30s %.10s \n", NR/3, name, date, $0)}' | /bin/dmen -l 30 -i -p 'YTSearch' | sed 's/:.*//');     [[ ! -n $video ]] && youtube_search;     (( num= $video - 1 ));     videoID=$(echo $youtubesearchdata | jq -r '.items['$num'].id.videoId')     res=$(echo -e "720\n1080\n360" | /bin/dmen -i -p "Which resolution? (if avalaible)") || youtube_search;     mpv --ytdl-format="[height<=?"$res"]" 'https://www.youtube.com/watch?v='$videoID    ;     exit; }
if ping -q -c 1 -W 1 1.1.1.1 &>/dev/null; then     youtube_search; else     echo "No internet connection"; fi
#!/bin/bash -i
apikey=AIzaSyAxoOzmqHSjvkv0LzYm5v4vUzvjorBu374
max_results=30
url_encode(){     ret=$(echo $@);     echo $(python -c "import urllib.parse, sys; print(urllib.parse.quote_plus(sys.argv[1]))" "$ret"); }
aborted(){     echo "Aborted";     exit; }
get_channel_id(){     channoulname=$(url_encode $channelname);     channelsearch=$(curl -s 'https://www.googleapis.com/youtube/v3/search?q='$channoulname'&type=channel&maxResults=25&part=snippet&key='$apikey)     chanchoice=$(echo $channelsearch | jq -r '.items[] | .snippet.channelTitle' | awk '{printf ("%2d: %s\n",NR,$0)}' | /bin/dmen -l 10 -i -p 'Which channel ?' | sed 's/:.*//');     [[ ! -n $chanchoice ]] && youtube_search;     (( numchan= $chanchoice - 1 ));     channelID=$(echo $channelsearch | jq -r '.items['$numchan'].snippet.channelId'); }
youtube_search(){     channelID="";     searchingshit=$(cat ~/.script/youtube/datas/searchhistory | awk '{print$0}END{printf "\n\nChannel option"}' | /bin/dmen -i -l 20 -p "Youtube search:") || aborted;     if [[ $searchingshit == 'Channel option' ]];then 	channelname=$(echo | /bin/dmen -p "Channel Search") || youtube_search;         get_channel_id; 	searchingshit=$(echo | /bin/dmen -i -l 20 -p "Search on this channel:") || youtube_search ;     fi;     echo $searchingshit >~/.script/youtube/datas/searchhistory     echo "Searching for "$searchingshit;     searchingshit=$(url_encode $searchingshit);     if [[ ! -n $channelID ]];then 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey;     else 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey'&channelId='$channelID;     fi         youtubesearchdata=$(curl -s $curly)     video=$(echo $youtubesearchdata | jq -r '.items[] | .snippet.title, .snippet.channelTitle, .snippet.publishedAt' | awk '{printf ("%.85s\n",$0)}' | awk '(NR%3==1){name=$0}(NR%3==2){date=$0}(NR%3==0){printf ("%2d: %-90s %-30s %.10s \n", NR/3, name, date, $0)}' | /bin/dmen -l 30 -i -p 'YTSearch' | sed 's/:.*//');     [[ ! -n $video ]] && youtube_search;     (( num= $video - 1 ));     videoID=$(echo $youtubesearchdata | jq -r '.items['$num'].id.videoId')     res=$(echo -e "720\n1080\n360" | /bin/dmen -i -p "Which resolution? (if avalaible)") || youtube_search;     mpv --ytdl-format="[height<=?"$res"]" 'https://www.youtube.com/watch?v='$videoID    ;     exit; }
if ping -q -c 1 -W 1 1.1.1.1 &>/dev/null; then     youtube_search; else     echo "No internet connection"; fi
#!/bin/bash -i
apikey=AIzaSyAxoOzmqHSjvkv0LzYm5v4vUzvjorBu374
max_results=30
. "${HOME}/.cache/wal/colors.sh"
url_encode(){     ret=$(echo $@);     echo $(python -c "import urllib.parse, sys; print(urllib.parse.quote_plus(sys.argv[1]))" "$ret"); }
aborted(){     echo "Aborted";     exit; }
get_channel_id(){     channoulname=$(url_encode $channelname);     channelsearch=$(curl -s 'https://www.googleapis.com/youtube/v3/search?q='$channoulname'&type=channel&maxResults=25&part=snippet&key='$apikey)     chanchoice=$(echo $channelsearch | jq -r '.items[] | .snippet.channelTitle' | awk '{printf ("%2d: %s\n",NR,$0)}' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 10 -i -p 'Which channel ?' | sed 's/:.*//');     [[ ! -n $chanchoice ]] && youtube_search;     (( numchan= $chanchoice - 1 ));     channelID=$(echo $channelsearch | jq -r '.items['$numchan'].snippet.channelId'); }
youtube_search(){     channelID="";     searchingshit=$(cat ~/.script/youtube/datas/searchhistory | awk '{print$0}END{printf "\n\nChannel option"}' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -l 20 -p "Youtube search:") || aborted;     if [[ $searchingshit == 'Channel option' ]];then 	channelname=$(echo | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -p "Channel Search") || youtube_search;         get_channel_id; 	searchingshit=$(echo | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -l 20 -p "Search on this channel:") || youtube_search ;     fi;     echo $searchingshit >~/.script/youtube/datas/searchhistory     echo "Searching for "$searchingshit;     searchingshit=$(url_encode $searchingshit);     if [[ ! -n $channelID ]];then 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey;     else 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey'&channelId='$channelID;     fi         youtubesearchdata=$(curl -s $curly)     video=$(echo $youtubesearchdata | jq -r '.items[] | .snippet.title, .snippet.channelTitle, .snippet.publishedAt' | awk '{printf ("%.85s\n",$0)}' | awk '(NR%3==1){name=$0}(NR%3==2){date=$0}(NR%3==0){printf ("%2d: %-90s %-30s %.10s \n", NR/3, name, date, $0)}' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 30 -i -p 'YTSearch' | sed 's/:.*//');     [[ ! -n $video ]] && youtube_search;     (( num= $video - 1 ));     videoID=$(echo $youtubesearchdata | jq -r '.items['$num'].id.videoId')     res=$(echo -e "720\n1080\n360" | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -p "Which resolution? (if avalaible)") || youtube_search;     mpv --ytdl-format="[height<=?"$res"]" 'https://www.youtube.com/watch?v='$videoID    ;     exit; }
if ping -q -c 1 -W 1 1.1.1.1 &>/dev/null; then     youtube_search; else     echo "No internet connection"; fi
.script/youtube/youtubesearch 
man surf 
man xprop 
echo "" > .surf/script.js 
cat .surf/script.js 
#!/bin/bash -i
apikey=AIzaSyAxoOzmqHSjvkv0LzYm5v4vUzvjorBu374
max_results=30
. "${HOME}/.cache/wal/colors.sh"
url_encode(){     ret=$(echo $@);     echo $(python -c "import urllib.parse, sys; print(urllib.parse.quote_plus(sys.argv[1]))" "$ret"); }
aborted(){     echo "Aborted";     exit; }
get_channel_id(){     channoulname=$(url_encode $channelname);     channelsearch=$(curl -s 'https://www.googleapis.com/youtube/v3/search?q='$channoulname'&type=channel&maxResults=25&part=snippet&key='$apikey)     chanchoice=$(echo $channelsearch | jq -r '.items[] | .snippet.channelTitle' | awk '{printf ("%2d: %s\n",NR,$0)}' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 10 -i -p 'Which channel ?' | sed 's/:.*//');     [[ ! -n $chanchoice ]] && youtube_search;     (( numchan= $chanchoice - 1 ));     channelID=$(echo $channelsearch | jq -r '.items['$numchan'].snippet.channelId'); }
youtube_search(){     channelID="";     searchingshit=$(cat ~/.script/youtube/datas/searchhistory | awk '{print$0}END{printf "\n\nChannel option"}' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -l 20 -p "Youtube search:") || aborted;     if [[ $searchingshit == 'Channel option' ]];then 	channelname=$(echo | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -p "Channel Search") || youtube_search;         get_channel_id; 	searchingshit=$(echo | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -l 20 -p "Search on this channel:") || youtube_search ;     fi;     echo $searchingshit >~/.script/youtube/datas/searchhistory     echo "Searching for "$searchingshit;     searchingshit=$(url_encode $searchingshit);     if [[ ! -n $channelID ]];then 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey;     else 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey'&channelId='$channelID;     fi         youtubesearchdata=$(curl -s $curly)     video=$(echo $youtubesearchdata | jq -r '.items[] | .snippet.title, .snippet.channelTitle, .snippet.publishedAt' | awk '{printf ("%.85s\n",$0)}' | awk '(NR%3==1){name=$0}(NR%3==2){date=$0}(NR%3==0){printf ("%2d: %-90s %-30s %.10s \n", NR/3, name, date, $0)}' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 30 -i -p 'YTSearch' | sed 's/:.*//');     [[ ! -n $video ]] && youtube_search;     (( num= $video - 1 ));     videoID=$(echo $youtubesearchdata | jq -r '.items['$num'].id.videoId')     res=$(echo -e "720\n1080\n360" | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -p "Which resolution? (if avalaible)") || youtube_search;     mpv --ytdl-format="[height<=?"$res"]" 'https://www.youtube.com/watch?v='$videoID    ;     exit; }
if ping -q -c 1 -W 1 1.1.1.1 &>/dev/null; then     youtube_search; else     echo "No internet connection"; fi
killall ncmpcpp 
man nnn
. .bashrc 
nnn
sudo pacman -S w3m-img
sudo pacman -S fff
fff 
fff
w3m www.zenocyne.com
w3m reddit.com
sudo pacman -S fbset 
sudo pacman -S xdotool 
sudo pacman -S w3m
w3mman 
man w3m
fff
man fff
fff
man nnn
sudo pacman -Rs nnn
man fff
fff
vim .config/i3/config
xdg-open help
man xdg-open
cat .Xauthority 
cd
cat .xinitrc 
$BROWSER
echo $BROWSER
echo $DEFAULT_BROWSER
xdg-settings set default-web-browser surf.desktop
xdg-settings set default-url-scheme-handler irc surf.desktop
surf www.zenocyne.com/indexdemoncul.html
mksir .local/share/applications
mkdir .local/share/applications
xdg-settings get default-web-browser 
vim .local/share/applications/surf.desktop
ls .local/share/applications/surf.desktop 
cat .local/share/applications/surf.desktop 
xdg-settings set default-web-browser surf.desktop
vim .script/surf/surftabbed
chmod +x .script/surf/surftabbed
xdg-settings set default-web-browser surf.desktop
xdg-settings get default-web-browser 
ls
vim /bin/surftabbed 
surftabbed 
vim .config/i3/config
surftabbed www.zenocyne.com
dmen f
ls | dmen
sudo vim /bin/surftabbed 
surftabbed reddit.com
cat ~/.cache/wal/colors.sh
ls| dmen
dmen
dmen "fjsmdlkjf"
sudo vim /bin/surftabbed 
surftabbed reddit.com
man surf
man tabbed
python
vim .local/share/applications/surf.desktop 
xdg-settings set default-web-browser surf.desktop
sudo cp .script/surf/surftabbed /bin/
vim .local/share/applications/surf.desktop 
xdg-settings set default-web-browser surf.desktop
xdg-open "www.zenocyne.com"
xdg-open "https://www.zenocyne.com"
cat /usr/dmen
cat /bin/dmen
surftabbed www.zenocyne.com
#!/bin/bash -i
apikey=AIzaSyAxoOzmqHSjvkv0LzYm5v4vUzvjorBu374
max_results=30
. "${HOME}/.cache/wal/colors.sh"
url_encode(){     ret=$(echo $@);     echo $(python -c "import urllib.parse, sys; print(urllib.parse.quote_plus(sys.argv[1]))" "$ret"); }
aborted(){     echo "Aborted";     exit; }
get_channel_id(){     channoulname=$(url_encode $channelname);     channelsearch=$(curl -s 'https://www.googleapis.com/youtube/v3/search?q='$channoulname'&type=channel&maxResults=25&part=snippet&key='$apikey)     chanchoice=$(echo $channelsearch | jq -r '.items[] | .snippet.channelTitle' | awk '{printf ("%2d: %s\n",NR,$0)}' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 10 -i -p 'Which channel ?' | sed 's/:.*//');     [[ ! -n $chanchoice ]] && youtube_search;     (( numchan= $chanchoice - 1 ));     channelID=$(echo $channelsearch | jq -r '.items['$numchan'].snippet.channelId'); }
youtube_search(){     channelID="";     searchingshit=$(cat ~/.script/youtube/datas/searchhistory | awk '{print$0}END{printf "\n\nChannel option"}' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -l 20 -p "Youtube search:") || aborted;     if [[ $searchingshit == 'Channel option' ]];then 	channelname=$(echo | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -p "Channel Search") || youtube_search;         get_channel_id; 	searchingshit=$(echo | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -l 20 -p "Search on this channel:") || youtube_search ;     fi;     echo $searchingshit >~/.script/youtube/datas/searchhistory     echo "Searching for "$searchingshit;     searchingshit=$(url_encode $searchingshit);     if [[ ! -n $channelID ]];then 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey;     else 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey'&channelId='$channelID;     fi         youtubesearchdata=$(curl -s $curly)     video=$(echo $youtubesearchdata | jq -r '.items[] | .snippet.title, .snippet.channelTitle, .snippet.publishedAt' | awk '{printf ("%.85s\n",$0)}' | awk '(NR%3==1){name=$0}(NR%3==2){date=$0}(NR%3==0){printf ("%2d: %-90s %-30s %.10s \n", NR/3, name, date, $0)}' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 30 -i -p 'YTSearch' | sed 's/:.*//');     [[ ! -n $video ]] && youtube_search;     (( num= $video - 1 ));     videoID=$(echo $youtubesearchdata | jq -r '.items['$num'].id.videoId')     res=$(echo -e "720\n1080\n360" | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -p "Which resolution? (if avalaible)") || youtube_search;     mpv --ytdl-format="[height<=?"$res"]" 'https://www.youtube.com/watch?v='$videoID    ;     exit; }
if ping -q -c 1 -W 1 1.1.1.1 &>/dev/null; then     youtube_search; else     echo "No internet connection"; fi
#!/bin/bash -i
apikey=AIzaSyAxoOzmqHSjvkv0LzYm5v4vUzvjorBu374
max_results=30
. "${HOME}/.cache/wal/colors.sh"
url_encode(){     ret=$(echo $@);     echo $(python -c "import urllib.parse, sys; print(urllib.parse.quote_plus(sys.argv[1]))" "$ret"); }
aborted(){     echo "Aborted";     exit; }
get_channel_id(){     channoulname=$(url_encode $channelname);     channelsearch=$(curl -s 'https://www.googleapis.com/youtube/v3/search?q='$channoulname'&type=channel&maxResults=25&part=snippet&key='$apikey)     chanchoice=$(echo $channelsearch | jq -r '.items[] | .snippet.channelTitle' | awk '{printf ("%2d: %s\n",NR,$0)}' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 10 -i -p 'Which channel ?' | sed 's/:.*//');     [[ ! -n $chanchoice ]] && youtube_search;     (( numchan= $chanchoice - 1 ));     channelID=$(echo $channelsearch | jq -r '.items['$numchan'].snippet.channelId'); }
youtube_search(){     channelID="";     searchingshit=$(cat ~/.script/youtube/datas/searchhistory | awk '{print$0}END{printf "\n\nChannel option"}' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -l 20 -p "Youtube search:") || aborted;     if [[ $searchingshit == 'Channel option' ]];then 	channelname=$(echo | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -p "Channel Search") || youtube_search;         get_channel_id; 	searchingshit=$(echo | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -l 20 -p "Search on this channel:") || youtube_search ;     fi;     echo $searchingshit >~/.script/youtube/datas/searchhistory     echo "Searching for "$searchingshit;     searchingshit=$(url_encode $searchingshit);     if [[ ! -n $channelID ]];then 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey;     else 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey'&channelId='$channelID;     fi         youtubesearchdata=$(curl -s $curly)     video=$(echo $youtubesearchdata | jq -r '.items[] | .snippet.title, .snippet.channelTitle, .snippet.publishedAt' | awk '{printf ("%.85s\n",$0)}' | awk '(NR%3==1){name=$0}(NR%3==2){date=$0}(NR%3==0){printf ("%2d: %-90s %-30s %.10s \n", NR/3, name, date, $0)}' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 30 -i -p 'YTSearch' | sed 's/:.*//');     [[ ! -n $video ]] && youtube_search;     (( num= $video - 1 ));     videoID=$(echo $youtubesearchdata | jq -r '.items['$num'].id.videoId')     res=$(echo -e "720\n1080\n360" | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -p "Which resolution? (if avalaible)") || youtube_search;     mpv --ytdl-format="[height<=?"$res"]" 'https://www.youtube.com/watch?v='$videoID    ;     exit; }
if ping -q -c 1 -W 1 1.1.1.1 &>/dev/null; then     youtube_search; else     echo "No internet connection"; fi
vim .config/surf-2.0/config.def.h
vim .config/surf-2.0/config.h
cd .config/tabbed-0.6/
make
sudo make install
cd 
cd .config/surf-2.0/
make
sudo make install
f
man fff
configbash 
f
l
f
#!/bin/bash -i
# Parameters
. "${HOME}/.cache/wal/colors.sh"
channelsfile=/home/$USER/.script/twitch/datas/listchanneltwitch
gamesfile=/home/$USER/.script/twitch/datas/listgamestwitch 
clientID=9wba9dk3evmmlxs2xz0xwle0fwr6uc
gamesdb=/home/$USER/.script/gamedatabase/gamesdb
max_vid=100
nobodyshit(){     echo "Nobody streaming this shit right now";     dunstify -i owl "Nobody streaming this shit right now";     noshit="No streams. Choose an other game:";     twitchgamefunction; }
aborted(){     echo "Aborted";     exit; }
check_and_launch(){     gametocheck=$(echo $@);     gametocheck=$(python -c "print('$gametocheck'.replace(' ','%20'))");     echo "Checking connected streams for $@ ..."     twitchdata=$(curl -s 'https://api.twitch.tv/kraken/streams?client_id='$clientID'&game='$gametocheck);     [[ $(echo $twitchdata | jq '._total') == 0 ]] && nobodyshit     stream=$(echo $twitchdata | jq -r '.streams[] | .channel.language, .channel.name' | awk 'NR%2{printf "%s:",$0;next;}1' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -p -l 10 "Which stream ?" | sed 's/.*://');     [[ ! -n $stream ]] && aborted     exec surf https://www.twitch.tv/popout/$stream/chat?popout= & mpv https://www.twitch.tv/$stream;     exit; }
twitchgamefunction(){             if [[ -n $@ ]]; then 	check_and_launch $@;     else	 	game=$(awk '{print $0} END { printf "Other\nAdd" }' $gamesfile | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 10 -i -p "$noshit") || aborted; 	if [[ $game == Add ]];then 0	    game=$(cat $gamesdb | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 10 -i -p "Which game do you want to add on favorite?") || aborted; 	    echo -e "$game" >>$gamesfile; 	    cert=$(echo -e "No\nYes" | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 10 -i -p "Do you want to check streams for $game?"); 	    [[ $cert == Yes ]] || aborted; 	elif [[ $game == Other ]]; then 	    game=$(cat $gamesdb| dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 10 -i -p "$noshit") || aborted; 	fi; 	    check_and_launch $game;     fi; }
twitchlivefunction(){     if [[ -n $@ ]]; then 	echo "Checking if $@ is live ..."; 	test=$(curl -s https://api.twitch.tv/kraken/streams/"$@"?client_id=$clientID | jq ".stream._id") 	[ ! $test == null ] && (exec surf https://www.twitch.tv/popout/$@/chat?popout= & mpv https://www.twitch.tv/"$@") || echo "$@ doesn't stream right now"; 	exit;     else 	echo "Checking connected streams ..."; 	twitchdata=$(curl -s 'https://api.twitch.tv/kraken/streams?client_id='$clientID'&channel='$(cat $channelsfile)) 	stream=$(echo $twitchdata | jq -r '.streams[] | .channel.name' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 10 -i -p "Which stream do you want to watch?") || aborted; 	exec surf -new-window https://www.twitch.tv/popout/$stream/chat?popout= & mpv https://www.twitch.tv/"$stream"; 	exit;     fi; }
twitchvod_search(){     searchingshit=$(python -c "print('"$(cat ~/.script/twitch/datas/listchanneltwitch)"'.replace(',','\n'))" | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 10 -p "TwitchVOD Channel:") || aborted;     echo "Searching for video on "$searchingshit;     curl_choose_and_watch; }
curl_choose_and_watch(){	
    twitchvod=$(curl -s 'https://api.twitch.tv/kraken/channels/'$searchingshit'/videos?client_id='$clientID'&limit='$max_vid'&offset='$offset);     total_vod=$(echo $twitchvod | jq '._total');     [[ $total_vod == null || $total_vod == 0 ]] && twitchvod_search
    (( borne_max=$total_vod - $max_vid ));     video=$(echo $twitchvod | jq -r '.videos[] | .title, .recorded_at' | awk -v bm=$borne_max -v offs=$offset 'BEGIN{ if (offs > 0 ) { printf "Prev\n" } }!(NR%2){printf ("%3d: %-100s %.10s\n", FNR/2+offs, p, $0)}{p=$0}END{ if (offs < bm) { printf "Next" } }' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -l 30 -p "Which video?" | sed 's/:.*//')     if [[ ! -n $video ]];then 	twitchvod_search;     elif [[ $video == Next ]];then 	((offset= $offset + 100 )); 	curl_choose_and_watch;     elif [[ $video == Prev ]];then         ((offset= $offset - 100 )); 	curl_choose_and_watch;     else	 	(( num=$video - 1 - $offset)); 	videourl=$(echo $twitchvod | jq -r '.videos['$num'].url')	
	res=$(echo -e "720\n1080\n360" | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -p "Which resolution? (if avalaible)") || twitchvod_search; 	mpv --ytdl-format="[height<=?"$res"]" $videourl || twitchvod_search; 	exit;     fi; }
if ping -q -c 1 -W 1 1.1.1.1 &>/dev/null; then     case $1 in 	--live) 	    twitchlivefunction $2; 	    ;; 	--game) 	    noshit="Choose a game"; 	    twitchgamefunction "${@#$1}"; 	    ;; 	--vod) 	    offset=0; 	    twitchvod_search; 	    ;; 	*) 	    echo -e "This is the twitch script featuring dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" and mpv! Heres the options available : \n     --live   To check if your favorites streamers are live\n     --game   To check available streams of a desired game\n     --vod    To check for VOD on a desired channel"; 	    ;;     esac; else     echo "No internet connection"; fi
#!/bin/bash -i
# Parameters
. "${HOME}/.cache/wal/colors.sh"
channelsfile=/home/$USER/.script/twitch/datas/listchanneltwitch
gamesfile=/home/$USER/.script/twitch/datas/listgamestwitch 
clientID=9wba9dk3evmmlxs2xz0xwle0fwr6uc
gamesdb=/home/$USER/.script/gamedatabase/gamesdb
max_vid=100
nobodyshit(){     echo "Nobody streaming this shit right now";     dunstify -i owl "Nobody streaming this shit right now";     noshit="No streams. Choose an other game:";     twitchgamefunction; }
aborted(){     echo "Aborted";     exit; }
check_and_launch(){     gametocheck=$(echo $@);     gametocheck=$(python -c "print('$gametocheck'.replace(' ','%20'))");     echo "Checking connected streams for $@ ..."     twitchdata=$(curl -s 'https://api.twitch.tv/kraken/streams?client_id='$clientID'&game='$gametocheck);     [[ $(echo $twitchdata | jq '._total') == 0 ]] && nobodyshit     stream=$(echo $twitchdata | jq -r '.streams[] | .channel.language, .channel.name' | awk 'NR%2{printf "%s:",$0;next;}1' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -p -l 10 "Which stream ?" | sed 's/.*://');     [[ ! -n $stream ]] && aborted     exec surf https://www.twitch.tv/popout/$stream/chat?popout= & mpv https://www.twitch.tv/$stream;     exit; }
twitchgamefunction(){             if [[ -n $@ ]]; then 	check_and_launch $@;     else	 	game=$(awk '{print $0} END { printf "Other\nAdd" }' $gamesfile | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 10 -i -p "$noshit") || aborted; 	if [[ $game == Add ]];then 0	    game=$(cat $gamesdb | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 10 -i -p "Which game do you want to add on favorite?") || aborted; 	    echo -e "$game" >>$gamesfile; 	    cert=$(echo -e "No\nYes" | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 10 -i -p "Do you want to check streams for $game?"); 	    [[ $cert == Yes ]] || aborted; 	elif [[ $game == Other ]]; then 	    game=$(cat $gamesdb| dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 10 -i -p "$noshit") || aborted; 	fi; 	    check_and_launch $game;     fi; }
twitchlivefunction(){     if [[ -n $@ ]]; then 	echo "Checking if $@ is live ..."; 	test=$(curl -s https://api.twitch.tv/kraken/streams/"$@"?client_id=$clientID | jq ".stream._id") 	[ ! $test == null ] && (exec surf https://www.twitch.tv/popout/$@/chat?popout= & mpv https://www.twitch.tv/"$@") || echo "$@ doesn't stream right now"; 	exit;     else 	echo "Checking connected streams ..."; 	twitchdata=$(curl -s 'https://api.twitch.tv/kraken/streams?client_id='$clientID'&channel='$(cat $channelsfile)) 	stream=$(echo $twitchdata | jq -r '.streams[] | .channel.name' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 10 -i -p "Which stream do you want to watch?") || aborted; 	exec surf -new-window https://www.twitch.tv/popout/$stream/chat?popout= & mpv https://www.twitch.tv/"$stream"; 	exit;     fi; }
twitchvod_search(){     searchingshit=$(python -c "print('"$(cat ~/.script/twitch/datas/listchanneltwitch)"'.replace(',','\n'))" | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 10 -p "TwitchVOD Channel:") || aborted;     echo "Searching for video on "$searchingshit;     curl_choose_and_watch; }
curl_choose_and_watch(){	
    twitchvod=$(curl -s 'https://api.twitch.tv/kraken/channels/'$searchingshit'/videos?client_id='$clientID'&limit='$max_vid'&offset='$offset);     total_vod=$(echo $twitchvod | jq '._total');     [[ $total_vod == null || $total_vod == 0 ]] && twitchvod_search
    (( borne_max=$total_vod - $max_vid ));     video=$(echo $twitchvod | jq -r '.videos[] | .title, .recorded_at' | awk -v bm=$borne_max -v offs=$offset 'BEGIN{ if (offs > 0 ) { printf "Prev\n" } }!(NR%2){printf ("%3d: %-100s %.10s\n", FNR/2+offs, p, $0)}{p=$0}END{ if (offs < bm) { printf "Next" } }' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -l 30 -p "Which video?" | sed 's/:.*//')     if [[ ! -n $video ]];then 	twitchvod_search;     elif [[ $video == Next ]];then 	((offset= $offset + 100 )); 	curl_choose_and_watch;     elif [[ $video == Prev ]];then         ((offset= $offset - 100 )); 	curl_choose_and_watch;     else	 	(( num=$video - 1 - $offset)); 	videourl=$(echo $twitchvod | jq -r '.videos['$num'].url')	
	res=$(echo -e "720\n1080\n360" | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -p "Which resolution? (if avalaible)") || twitchvod_search; 	mpv --ytdl-format="[height<=?"$res"]" $videourl || twitchvod_search; 	exit;     fi; }
if ping -q -c 1 -W 1 1.1.1.1 &>/dev/null; then     case $1 in 	--live) 	    twitchlivefunction $2; 	    ;; 	--game) 	    noshit="Choose a game"; 	    twitchgamefunction "${@#$1}"; 	    ;; 	--vod) 	    offset=0; 	    twitchvod_search; 	    ;; 	*) 	    echo -e "This is the twitch script featuring dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" and mpv! Heres the options available : \n     --live   To check if your favorites streamers are live\n     --game   To check available streams of a desired game\n     --vod    To check for VOD on a desired channel"; 	    ;;     esac; else     echo "No internet connection"; fi
man dunstify
dunstify -h
dunstify help
dunstify
man dunst
dunstify --help
cd .config/surf-2.0/
make
sudo make install
make
sudo make install
ping https://www.belgiantrain.be/fr/
ping www.belgiantrain.be
man emacsclient
emacsclient --alternate-editor="" -c
emacsclient --alternate-editor=""
emacsclient
man emacsclient 
killall emacs
emacsclient 
emacsclient -a ""
emacsclient --alternate-editor=""
emacsclient --alternate-editor="" -e (server-start)
echo $EDITOR
echo $VISUAL
vim .vimrc 
man vim
#!/bin/bash -i
# Parameters
. "${HOME}/.cache/wal/colors.sh"
channelsfile=/home/$USER/.script/twitch/datas/listchanneltwitch
gamesfile=/home/$USER/.script/twitch/datas/listgamestwitch 
clientID=9wba9dk3evmmlxs2xz0xwle0fwr6uc
gamesdb=/home/$USER/.script/gamedatabase/gamesdb
max_vid=100
nobodyshit(){     echo "Nobody streaming this shit right now";     noshit="No streams. Choose an other game:";     twitchgamefunction; }
aborted(){     echo "Aborted";     exit; }
check_and_launch(){     gametocheck=$(echo $@);     gametocheck=$(python -c "print('$gametocheck'.replace(' ','%20'))");     echo "Checking connected streams for $@ ..."     twitchdata=$(curl -s 'https://api.twitch.tv/kraken/streams?client_id='$clientID'&game='$gametocheck);     [[ $(echo $twitchdata | jq '._total') == 0 ]] && nobodyshit     stream=$(echo $twitchdata | jq -r '.streams[] | .channel.language, .channel.name' | awk 'NR%2{printf "%s:",$0;next;}1' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -p -l 10 "Which stream ?" | sed 's/.*://');     [[ ! -n $stream ]] && aborted     exec surf https://www.twitch.tv/popout/$stream/chat?popout= & mpv https://www.twitch.tv/$stream;     exit; }
twitchgamefunction(){             if [[ -n $@ ]]; then 	check_and_launch $@;     else	 	game=$(awk '{print $0} END { printf "Other\nAdd" }' $gamesfile | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 10 -i -p "$noshit") || aborted; 	if [[ $game == Add ]];then 0	    game=$(cat $gamesdb | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 10 -i -p "Which game do you want to add on favorite?") || aborted; 	    echo -e "$game" >>$gamesfile; 	    cert=$(echo -e "No\nYes" | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 10 -i -p "Do you want to check streams for $game?"); 	    [[ $cert == Yes ]] || aborted; 	elif [[ $game == Other ]]; then 	    game=$(cat $gamesdb| dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 10 -i -p "$noshit") || aborted; 	fi; 	    check_and_launch $game;     fi; }
twitchlivefunction(){     if [[ -n $@ ]]; then 	echo "Checking if $@ is live ..."; 	test=$(curl -s https://api.twitch.tv/kraken/streams/"$@"?client_id=$clientID | jq ".stream._id") 	[ ! $test == null ] && (exec surf https://www.twitch.tv/popout/$@/chat?popout= & mpv https://www.twitch.tv/"$@") || echo "$@ doesn't stream right now"; 	exit;     else 	echo "Checking connected streams ..."; 	twitchdata=$(curl -s 'https://api.twitch.tv/kraken/streams?client_id='$clientID'&channel='$(cat $channelsfile)) 	stream=$(echo $twitchdata | jq -r '.streams[] | .channel.name' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 10 -i -p "Which stream do you want to watch?") || aborted; 	exec surf -new-window https://www.twitch.tv/popout/$stream/chat?popout= & mpv https://www.twitch.tv/"$stream"; 	exit;     fi; }
twitchvod_search(){     searchingshit=$(python -c "print('"$(cat ~/.script/twitch/datas/listchanneltwitch)"'.replace(',','\n'))" | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 10 -p "TwitchVOD Channel:") || aborted;     echo "Searching for video on "$searchingshit;     curl_choose_and_watch; }
curl_choose_and_watch(){	
    twitchvod=$(curl -s 'https://api.twitch.tv/kraken/channels/'$searchingshit'/videos?client_id='$clientID'&limit='$max_vid'&offset='$offset);     total_vod=$(echo $twitchvod | jq '._total');     [[ $total_vod == null || $total_vod == 0 ]] && twitchvod_search
    (( borne_max=$total_vod - $max_vid ));     video=$(echo $twitchvod | jq -r '.videos[] | .title, .recorded_at' | awk -v bm=$borne_max -v offs=$offset 'BEGIN{ if (offs > 0 ) { printf "Prev\n" } }!(NR%2){printf ("%3d: %-100s %.10s\n", FNR/2+offs, p, $0)}{p=$0}END{ if (offs < bm) { printf "Next" } }' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -l 30 -p "Which video?" | sed 's/:.*//')     if [[ ! -n $video ]];then 	twitchvod_search;     elif [[ $video == Next ]];then 	((offset= $offset + 100 )); 	curl_choose_and_watch;     elif [[ $video == Prev ]];then         ((offset= $offset - 100 )); 	curl_choose_and_watch;     else	 	(( num=$video - 1 - $offset)); 	videourl=$(echo $twitchvod | jq -r '.videos['$num'].url')	
	res=$(echo -e "720\n1080\n360" | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -p "Which resolution? (if avalaible)") || twitchvod_search; 	mpv --ytdl-format="[height<=?"$res"]" $videourl || twitchvod_search; 	exit;     fi; }
if ping -q -c 1 -W 1 1.1.1.1 &>/dev/null; then     case $1 in 	--live) 	    twitchlivefunction $2; 	    ;; 	--game) 	    noshit="Choose a game"; 	    twitchgamefunction "${@#$1}"; 	    ;; 	--vod) 	    offset=0; 	    twitchvod_search; 	    ;; 	*) 	    echo -e "This is the twitch script featuring dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" and mpv! Heres the options available : \n     --live   To check if your favorites streamers are live\n     --game   To check available streams of a desired game\n     --vod    To check for VOD on a desired channel"; 	    ;;     esac; else     echo "No internet connection"; fi
vimtutor 
nm-applet 
cd ~/.local/share/ca-certificates/
ls
cd .config/st/
ls
cd patches/
ls
cd ..
cd patches/
vim st-xresources-20190105-3be4cf1.diff r
#!/bin/bash -i
apikey=AIzaSyAxoOzmqHSjvkv0LzYm5v4vUzvjorBu374
max_results=30
. "${HOME}/.cache/wal/colors.sh"
url_encode(){     ret=$(echo $@);     echo $(python -c "import urllib.parse, sys; print(urllib.parse.quote_plus(sys.argv[1]))" "$ret"); }
aborted(){     echo "Aborted";     exit; }
get_channel_id(){     channoulname=$(url_encode $channelname);     channelsearch=$(curl -s 'https://www.googleapis.com/youtube/v3/search?q='$channoulname'&type=channel&maxResults=25&part=snippet&key='$apikey)     chanchoice=$(echo $channelsearch | jq -r '.items[] | .snippet.channelTitle' | awk '{printf ("%2d: %s\n",NR,$0)}' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 10 -i -p 'Which channel ?' | sed 's/:.*//');     [[ ! -n $chanchoice ]] && youtube_search;     (( numchan= $chanchoice - 1 ));     channelID=$(echo $channelsearch | jq -r '.items['$numchan'].snippet.channelId'); }
youtube_search(){     channelID="";     searchingshit=$(cat ~/.script/youtube/datas/searchhistory | awk '{print$0}END{printf "\n\nChannel option"}' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -l 20 -p "Youtube search:") || aborted;     if [[ $searchingshit == 'Channel option' ]];then 	channelname=$(echo | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -p "Channel Search") || youtube_search;         get_channel_id; 	searchingshit=$(echo | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -l 20 -p "Search on this channel:") || youtube_search ;     fi;     echo $searchingshit >~/.script/youtube/datas/searchhistory     echo "Searching for "$searchingshit;     searchingshit=$(url_encode $searchingshit);     if [[ ! -n $channelID ]];then 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey;     else 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey'&channelId='$channelID;     fi         youtubesearchdata=$(curl -s $curly)     video=$(echo $youtubesearchdata | jq -r '.items[] | .snippet.title, .snippet.channelTitle, .snippet.publishedAt' | awk '{printf ("%.85s\n",$0)}' | awk '(NR%3==1){name=$0}(NR%3==2){date=$0}(NR%3==0){printf ("%2d: %-90s %-30s %.10s \n", NR/3, name, date, $0)}' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 30 -i -p 'YTSearch' | sed 's/:.*//');     [[ ! -n $video ]] && youtube_search;     (( num= $video - 1 ));     videoID=$(echo $youtubesearchdata | jq -r '.items['$num'].id.videoId')     res=$(echo -e "720\n1080\n360" | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -p "Which resolution? (if avalaible)") || youtube_search;     mpv --ytdl-format="[height<=?"$res"]" 'https://www.youtube.com/watch?v='$videoID    ;     exit; }
if ping -q -c 1 -W 1 1.1.1.1 &>/dev/null; then     youtube_search; else     echo "No internet connection"; fi
#!/bin/bash -i
apikey=AIzaSyAxoOzmqHSjvkv0LzYm5v4vUzvjorBu374
max_results=30
. "${HOME}/.cache/wal/colors.sh"
url_encode(){     ret=$(echo $@);     echo $(python -c "import urllib.parse, sys; print(urllib.parse.quote_plus(sys.argv[1]))" "$ret"); }
aborted(){     echo "Aborted";     exit; }
get_channel_id(){     channoulname=$(url_encode $channelname);     channelsearch=$(curl -s 'https://www.googleapis.com/youtube/v3/search?q='$channoulname'&type=channel&maxResults=25&part=snippet&key='$apikey)     chanchoice=$(echo $channelsearch | jq -r '.items[] | .snippet.channelTitle' | awk '{printf ("%2d: %s\n",NR,$0)}' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 10 -i -p 'Which channel ?' | sed 's/:.*//');     [[ ! -n $chanchoice ]] && youtube_search;     (( numchan= $chanchoice - 1 ));     channelID=$(echo $channelsearch | jq -r '.items['$numchan'].snippet.channelId'); }
youtube_search(){     channelID="";     searchingshit=$(cat ~/.script/youtube/datas/searchhistory | awk '{print$0}END{printf "\n\nChannel option"}' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -l 20 -p "Youtube search:") || aborted;     if [[ $searchingshit == 'Channel option' ]];then 	channelname=$(echo | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -p "Channel Search") || youtube_search;         get_channel_id; 	searchingshit=$(echo | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -l 20 -p "Search on this channel:") || youtube_search ;     fi;     echo $searchingshit >~/.script/youtube/datas/searchhistory     echo "Searching for "$searchingshit;     searchingshit=$(url_encode $searchingshit);     if [[ ! -n $channelID ]];then 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey;     else 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey'&channelId='$channelID;     fi         youtubesearchdata=$(curl -s $curly)     video=$(echo $youtubesearchdata | jq -r '.items[] | .snippet.title, .snippet.channelTitle, .snippet.publishedAt' | awk '{printf ("%.85s\n",$0)}' | awk '(NR%3==1){name=$0}(NR%3==2){date=$0}(NR%3==0){printf ("%2d: %-90s %-30s %.10s \n", NR/3, name, date, $0)}' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 30 -i -p 'YTSearch' | sed 's/:.*//');     [[ ! -n $video ]] && youtube_search;     (( num= $video - 1 ));     videoID=$(echo $youtubesearchdata | jq -r '.items['$num'].id.videoId')     res=$(echo -e "720\n1080\n360" | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -p "Which resolution? (if avalaible)") || youtube_search;     mpv --ytdl-format="[height<=?"$res"]" 'https://www.youtube.com/watch?v='$videoID    ;     exit; }
if ping -q -c 1 -W 1 1.1.1.1 &>/dev/null; then     youtube_search; else     echo "No internet connection"; fi
vim Downloads/test 
vim .vimrc 
neofetch
w3m-img
w3m ~/Images/Capture\ du\ 2018-12-12\ 11-02-33.png 
man fff
f
man fff
f
f
cat ~/.script/note/notes | grep -c "*"
cat ~/.script/note/notes | grep "*"
cat ~/.script/note/notes | grep "*" | wc -l
cat ~/.script/note/notes | grep "*"
cat ~/.script/note/notes | grep -c "*"
#!/bin/bash -i
apikey=AIzaSyAxoOzmqHSjvkv0LzYm5v4vUzvjorBu374
max_results=30
. "${HOME}/.cache/wal/colors.sh"
url_encode(){     ret=$(echo $@);     echo $(python -c "import urllib.parse, sys; print(urllib.parse.quote_plus(sys.argv[1]))" "$ret"); }
aborted(){     echo "Aborted";     exit; }
get_channel_id(){     channoulname=$(url_encode $channelname);     channelsearch=$(curl -s 'https://www.googleapis.com/youtube/v3/search?q='$channoulname'&type=channel&maxResults=25&part=snippet&key='$apikey)     chanchoice=$(echo $channelsearch | jq -r '.items[] | .snippet.channelTitle' | awk '{printf ("%2d: %s\n",NR,$0)}' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 10 -i -p 'Which channel ?' | sed 's/:.*//');     [[ ! -n $chanchoice ]] && youtube_search;     (( numchan= $chanchoice - 1 ));     channelID=$(echo $channelsearch | jq -r '.items['$numchan'].snippet.channelId'); }
youtube_search(){     channelID="";     searchingshit=$(cat ~/.script/youtube/datas/searchhistory | awk '{print$0}END{printf "\n\nChannel option"}' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -l 20 -p "Youtube search:") || aborted;     if [[ $searchingshit == 'Channel option' ]];then 	channelname=$(echo | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -p "Channel Search") || youtube_search;         get_channel_id; 	searchingshit=$(echo | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -l 20 -p "Search on this channel:") || youtube_search ;     fi;     echo $searchingshit >~/.script/youtube/datas/searchhistory     echo "Searching for "$searchingshit;     searchingshit=$(url_encode $searchingshit);     if [[ ! -n $channelID ]];then 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey;     else 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey'&channelId='$channelID;     fi         youtubesearchdata=$(curl -s $curly)     video=$(echo $youtubesearchdata | jq -r '.items[] | .snippet.title, .snippet.channelTitle, .snippet.publishedAt' | awk '{printf ("%.85s\n",$0)}' | awk '(NR%3==1){name=$0}(NR%3==2){date=$0}(NR%3==0){printf ("%2d: %-90s %-30s %.10s \n", NR/3, name, date, $0)}' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 30 -i -p 'YTSearch' | sed 's/:.*//');     [[ ! -n $video ]] && youtube_search;     (( num= $video - 1 ));     videoID=$(echo $youtubesearchdata | jq -r '.items['$num'].id.videoId')     res=$(echo -e "720\n1080\n360" | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -p "Which resolution? (if avalaible)") || youtube_search;     mpv --ytdl-format="[height<=?"$res"]" 'https://www.youtube.com/watch?v='$videoID    ;     exit; }
if ping -q -c 1 -W 1 1.1.1.1 &>/dev/null; then     youtube_search; else     echo "No internet connection"; fi
#!/bin/bash -i
apikey=AIzaSyAxoOzmqHSjvkv0LzYm5v4vUzvjorBu374
max_results=30
. "${HOME}/.cache/wal/colors.sh"
url_encode(){     ret=$(echo $@);     echo $(python -c "import urllib.parse, sys; print(urllib.parse.quote_plus(sys.argv[1]))" "$ret"); }
aborted(){     echo "Aborted";     exit; }
get_channel_id(){     channoulname=$(url_encode $channelname);     channelsearch=$(curl -s 'https://www.googleapis.com/youtube/v3/search?q='$channoulname'&type=channel&maxResults=25&part=snippet&key='$apikey)     chanchoice=$(echo $channelsearch | jq -r '.items[] | .snippet.channelTitle' | awk '{printf ("%2d: %s\n",NR,$0)}' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 10 -i -p 'Which channel ?' | sed 's/:.*//');     [[ ! -n $chanchoice ]] && youtube_search;     (( numchan= $chanchoice - 1 ));     channelID=$(echo $channelsearch | jq -r '.items['$numchan'].snippet.channelId'); }
youtube_search(){     channelID="";     searchingshit=$(cat ~/.script/youtube/datas/searchhistory | awk '{print$0}END{printf "\n\nChannel option"}' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -l 20 -p "Youtube search:") || aborted;     if [[ $searchingshit == 'Channel option' ]];then 	channelname=$(echo | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -p "Channel Search") || youtube_search;         get_channel_id; 	searchingshit=$(echo | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -l 20 -p "Search on this channel:") || youtube_search ;     fi;     echo $searchingshit >~/.script/youtube/datas/searchhistory     echo "Searching for "$searchingshit;     searchingshit=$(url_encode $searchingshit);     if [[ ! -n $channelID ]];then 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey;     else 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey'&channelId='$channelID;     fi         youtubesearchdata=$(curl -s $curly)     video=$(echo $youtubesearchdata | jq -r '.items[] | .snippet.title, .snippet.channelTitle, .snippet.publishedAt' | awk '{printf ("%.85s\n",$0)}' | awk '(NR%3==1){name=$0}(NR%3==2){date=$0}(NR%3==0){printf ("%2d: %-90s %-30s %.10s \n", NR/3, name, date, $0)}' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 30 -i -p 'YTSearch' | sed 's/:.*//');     [[ ! -n $video ]] && youtube_search;     (( num= $video - 1 ));     videoID=$(echo $youtubesearchdata | jq -r '.items['$num'].id.videoId')     res=$(echo -e "720\n1080\n360" | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -p "Which resolution? (if avalaible)") || youtube_search;     mpv --ytdl-format="[height<=?"$res"]" 'https://www.youtube.com/watch?v='$videoID    ;     exit; }
if ping -q -c 1 -W 1 1.1.1.1 &>/dev/null; then     youtube_search; else     echo "No internet connection"; fi
#!/bin/bash -i
apikey=AIzaSyAxoOzmqHSjvkv0LzYm5v4vUzvjorBu374
max_results=30
. "${HOME}/.cache/wal/colors.sh"
url_encode(){     ret=$(echo $@);     echo $(python -c "import urllib.parse, sys; print(urllib.parse.quote_plus(sys.argv[1]))" "$ret"); }
aborted(){     echo "Aborted";     exit; }
get_channel_id(){     channoulname=$(url_encode $channelname);     channelsearch=$(curl -s 'https://www.googleapis.com/youtube/v3/search?q='$channoulname'&type=channel&maxResults=25&part=snippet&key='$apikey)     chanchoice=$(echo $channelsearch | jq -r '.items[] | .snippet.channelTitle' | awk '{printf ("%2d: %s\n",NR,$0)}' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 10 -i -p 'Which channel ?' | sed 's/:.*//');     [[ ! -n $chanchoice ]] && youtube_search;     (( numchan= $chanchoice - 1 ));     channelID=$(echo $channelsearch | jq -r '.items['$numchan'].snippet.channelId'); }
youtube_search(){     channelID="";     searchingshit=$(cat ~/.script/youtube/datas/searchhistory | awk '{print$0}END{printf "\n\nChannel option"}' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -l 20 -p "Youtube search:") || aborted;     if [[ $searchingshit == 'Channel option' ]];then 	channelname=$(echo | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -p "Channel Search") || youtube_search;         get_channel_id; 	searchingshit=$(echo | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -l 20 -p "Search on this channel:") || youtube_search ;     fi;     echo $searchingshit >~/.script/youtube/datas/searchhistory     echo "Searching for "$searchingshit;     searchingshit=$(url_encode $searchingshit);     if [[ ! -n $channelID ]];then 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey;     else 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey'&channelId='$channelID;     fi         youtubesearchdata=$(curl -s $curly)     video=$(echo $youtubesearchdata | jq -r '.items[] | .snippet.title, .snippet.channelTitle, .snippet.publishedAt' | awk '{printf ("%.85s\n",$0)}' | awk '(NR%3==1){name=$0}(NR%3==2){date=$0}(NR%3==0){printf ("%2d: %-90s %-30s %.10s \n", NR/3, name, date, $0)}' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 30 -i -p 'YTSearch' | sed 's/:.*//');     [[ ! -n $video ]] && youtube_search;     (( num= $video - 1 ));     videoID=$(echo $youtubesearchdata | jq -r '.items['$num'].id.videoId')     res=$(echo -e "720\n1080\n360" | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -p "Which resolution? (if avalaible)") || youtube_search;     mpv --ytdl-format="[height<=?"$res"]" 'https://www.youtube.com/watch?v='$videoID    ;     exit; }
if ping -q -c 1 -W 1 1.1.1.1 &>/dev/null; then     youtube_search; else     echo "No internet connection"; fi
#!/bin/bash -i
apikey=AIzaSyAxoOzmqHSjvkv0LzYm5v4vUzvjorBu374
max_results=30
. "${HOME}/.cache/wal/colors.sh"
url_encode(){     ret=$(echo $@);     echo $(python -c "import urllib.parse, sys; print(urllib.parse.quote_plus(sys.argv[1]))" "$ret"); }
aborted(){     echo "Aborted";     exit; }
get_channel_id(){     channoulname=$(url_encode $channelname);     channelsearch=$(curl -s 'https://www.googleapis.com/youtube/v3/search?q='$channoulname'&type=channel&maxResults=25&part=snippet&key='$apikey)     chanchoice=$(echo $channelsearch | jq -r '.items[] | .snippet.channelTitle' | awk '{printf ("%2d: %s\n",NR,$0)}' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 10 -i -p 'Which channel ?' | sed 's/:.*//');     [[ ! -n $chanchoice ]] && youtube_search;     (( numchan= $chanchoice - 1 ));     channelID=$(echo $channelsearch | jq -r '.items['$numchan'].snippet.channelId'); }
youtube_search(){     channelID="";     searchingshit=$(cat ~/.script/youtube/datas/searchhistory | awk '{print$0}END{printf "\n\nChannel option"}' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -l 20 -p "Youtube search:") || aborted;     if [[ $searchingshit == 'Channel option' ]];then 	channelname=$(echo | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -p "Channel Search") || youtube_search;         get_channel_id; 	searchingshit=$(echo | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -l 20 -p "Search on this channel:") || youtube_search ;     fi;     echo $searchingshit >~/.script/youtube/datas/searchhistory     echo "Searching for "$searchingshit;     searchingshit=$(url_encode $searchingshit);     if [[ ! -n $channelID ]];then 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey;     else 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey'&channelId='$channelID;     fi         youtubesearchdata=$(curl -s $curly)     video=$(echo $youtubesearchdata | jq -r '.items[] | .snippet.title, .snippet.channelTitle, .snippet.publishedAt' | awk '{printf ("%.85s\n",$0)}' | awk '(NR%3==1){name=$0}(NR%3==2){date=$0}(NR%3==0){printf ("%2d: %-90s %-30s %.10s \n", NR/3, name, date, $0)}' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 30 -i -p 'YTSearch' | sed 's/:.*//');     [[ ! -n $video ]] && youtube_search;     (( num= $video - 1 ));     videoID=$(echo $youtubesearchdata | jq -r '.items['$num'].id.videoId')     res=$(echo -e "720\n1080\n360" | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -p "Which resolution? (if avalaible)") || youtube_search;     mpv --ytdl-format="[height<=?"$res"]" 'https://www.youtube.com/watch?v='$videoID    ;     exit; }
if ping -q -c 1 -W 1 1.1.1.1 &>/dev/null; then     youtube_search; else     echo "No internet connection"; fi
#!/bin/bash -i
apikey=AIzaSyAxoOzmqHSjvkv0LzYm5v4vUzvjorBu374
max_results=30
. "${HOME}/.cache/wal/colors.sh"
url_encode(){     ret=$(echo $@);     echo $(python -c "import urllib.parse, sys; print(urllib.parse.quote_plus(sys.argv[1]))" "$ret"); }
aborted(){     echo "Aborted";     exit; }
get_channel_id(){     channoulname=$(url_encode $channelname);     channelsearch=$(curl -s 'https://www.googleapis.com/youtube/v3/search?q='$channoulname'&type=channel&maxResults=25&part=snippet&key='$apikey)     chanchoice=$(echo $channelsearch | jq -r '.items[] | .snippet.channelTitle' | awk '{printf ("%2d: %s\n",NR,$0)}' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 10 -i -p 'Which channel ?' | sed 's/:.*//');     [[ ! -n $chanchoice ]] && youtube_search;     (( numchan= $chanchoice - 1 ));     channelID=$(echo $channelsearch | jq -r '.items['$numchan'].snippet.channelId'); }
youtube_search(){     channelID="";     searchingshit=$(cat ~/.script/youtube/datas/searchhistory | awk '{print$0}END{printf "\n\nChannel option"}' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -l 20 -p "Youtube search:") || aborted;     if [[ $searchingshit == 'Channel option' ]];then 	channelname=$(echo | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -p "Channel Search") || youtube_search;         get_channel_id; 	searchingshit=$(echo | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -l 20 -p "Search on this channel:") || youtube_search ;     fi;     echo $searchingshit >~/.script/youtube/datas/searchhistory     echo "Searching for "$searchingshit;     searchingshit=$(url_encode $searchingshit);     if [[ ! -n $channelID ]];then 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey;     else 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey'&channelId='$channelID;     fi         youtubesearchdata=$(curl -s $curly)     video=$(echo $youtubesearchdata | jq -r '.items[] | .snippet.title, .snippet.channelTitle, .snippet.publishedAt' | awk '{printf ("%.85s\n",$0)}' | awk '(NR%3==1){name=$0}(NR%3==2){date=$0}(NR%3==0){printf ("%2d: %-90s %-30s %.10s \n", NR/3, name, date, $0)}' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 30 -i -p 'YTSearch' | sed 's/:.*//');     [[ ! -n $video ]] && youtube_search;     (( num= $video - 1 ));     videoID=$(echo $youtubesearchdata | jq -r '.items['$num'].id.videoId')     res=$(echo -e "720\n1080\n360" | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -p "Which resolution? (if avalaible)") || youtube_search;     mpv --ytdl-format="[height<=?"$res"]" 'https://www.youtube.com/watch?v='$videoID    ;     exit; }
if ping -q -c 1 -W 1 1.1.1.1 &>/dev/null; then     youtube_search; else     echo "No internet connection"; fi
killall emacs 
killall st 
cd Documents/
ls
dfhack
#!/bin/bash -i
apikey=AIzaSyAxoOzmqHSjvkv0LzYm5v4vUzvjorBu374
max_results=30
. "${HOME}/.cache/wal/colors.sh"
url_encode(){     ret=$(echo $@);     echo $(python -c "import urllib.parse, sys; print(urllib.parse.quote_plus(sys.argv[1]))" "$ret"); }
aborted(){     echo "Aborted";     exit; }
get_channel_id(){     channoulname=$(url_encode $channelname);     channelsearch=$(curl -s 'https://www.googleapis.com/youtube/v3/search?q='$channoulname'&type=channel&maxResults=25&part=snippet&key='$apikey)     chanchoice=$(echo $channelsearch | jq -r '.items[] | .snippet.channelTitle' | awk '{printf ("%2d: %s\n",NR,$0)}' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 10 -i -p 'Which channel ?' | sed 's/:.*//');     [[ ! -n $chanchoice ]] && youtube_search;     (( numchan= $chanchoice - 1 ));     channelID=$(echo $channelsearch | jq -r '.items['$numchan'].snippet.channelId'); }
youtube_search(){     channelID="";     searchingshit=$(cat ~/.script/youtube/datas/searchhistory | awk '{print$0}END{printf "\n\nChannel option"}' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -l 20 -p "Youtube search:") || aborted;     if [[ $searchingshit == 'Channel option' ]];then 	channelname=$(echo | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -p "Channel Search") || youtube_search;         get_channel_id; 	searchingshit=$(echo | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -l 20 -p "Search on this channel:") || youtube_search ;     fi;     echo $searchingshit >~/.script/youtube/datas/searchhistory     echo "Searching for "$searchingshit;     searchingshit=$(url_encode $searchingshit);     if [[ ! -n $channelID ]];then 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey;     else 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey'&channelId='$channelID;     fi         youtubesearchdata=$(curl -s $curly)     video=$(echo $youtubesearchdata | jq -r '.items[] | .snippet.title, .snippet.channelTitle, .snippet.publishedAt' | awk '{printf ("%.85s\n",$0)}' | awk '(NR%3==1){name=$0}(NR%3==2){date=$0}(NR%3==0){printf ("%2d: %-90s %-30s %.10s \n", NR/3, name, date, $0)}' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 30 -i -p 'YTSearch' | sed 's/:.*//');     [[ ! -n $video ]] && youtube_search;     (( num= $video - 1 ));     videoID=$(echo $youtubesearchdata | jq -r '.items['$num'].id.videoId')     res=$(echo -e "720\n1080\n360" | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -p "Which resolution? (if avalaible)") || youtube_search;     mpv --ytdl-format="[height<=?"$res"]" 'https://www.youtube.com/watch?v='$videoID    ;     exit; }
if ping -q -c 1 -W 1 1.1.1.1 &>/dev/null; then     youtube_search; else     echo "No internet connection"; fi
cd Dropbox/
ls
cd b
cd backup\ dwarf\ fortress/
ks
ls
cd save/
ls
cd Ruspsmata/
ls
cd ..
ls
cd current/
ls
cd ..
ls
cd ..
ls
cd ..
ls
cd data-custom-df/
ls
cd ..
cd
cd Documents/
ls
ldkf
cat /proc/asound/card0/codec#0
jackd 
cd .config/tabbed-0.6/
ls
vim config.def.h 
vim config.h
#!/bin/bash -i
apikey=AIzaSyAxoOzmqHSjvkv0LzYm5v4vUzvjorBu374
max_results=30
. "${HOME}/.cache/wal/colors.sh"
url_encode(){     ret=$(echo $@);     echo $(python -c "import urllib.parse, sys; print(urllib.parse.quote_plus(sys.argv[1]))" "$ret"); }
aborted(){     echo "Aborted";     exit; }
get_channel_id(){     channoulname=$(url_encode $channelname);     channelsearch=$(curl -s 'https://www.googleapis.com/youtube/v3/search?q='$channoulname'&type=channel&maxResults=25&part=snippet&key='$apikey)     chanchoice=$(echo $channelsearch | jq -r '.items[] | .snippet.channelTitle' | awk '{printf ("%2d: %s\n",NR,$0)}' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 10 -i -p 'Which channel ?' | sed 's/:.*//');     [[ ! -n $chanchoice ]] && youtube_search;     (( numchan= $chanchoice - 1 ));     channelID=$(echo $channelsearch | jq -r '.items['$numchan'].snippet.channelId'); }
youtube_search(){     channelID="";     searchingshit=$(cat ~/.script/youtube/datas/searchhistory | awk '{print$0}END{printf "\n\nChannel option"}' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -l 20 -p "Youtube search:") || aborted;     if [[ $searchingshit == 'Channel option' ]];then 	channelname=$(echo | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -p "Channel Search") || youtube_search;         get_channel_id; 	searchingshit=$(echo | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -l 20 -p "Search on this channel:") || youtube_search ;     fi;     echo $searchingshit >~/.script/youtube/datas/searchhistory     echo "Searching for "$searchingshit;     searchingshit=$(url_encode $searchingshit);     if [[ ! -n $channelID ]];then 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey;     else 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey'&channelId='$channelID;     fi         youtubesearchdata=$(curl -s $curly)     video=$(echo $youtubesearchdata | jq -r '.items[] | .snippet.title, .snippet.channelTitle, .snippet.publishedAt' | awk '{printf ("%.85s\n",$0)}' | awk '(NR%3==1){name=$0}(NR%3==2){date=$0}(NR%3==0){printf ("%2d: %-90s %-30s %.10s \n", NR/3, name, date, $0)}' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 30 -i -p 'YTSearch' | sed 's/:.*//');     [[ ! -n $video ]] && youtube_search;     (( num= $video - 1 ));     videoID=$(echo $youtubesearchdata | jq -r '.items['$num'].id.videoId')     res=$(echo -e "720\n1080\n360" | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -p "Which resolution? (if avalaible)") || youtube_search;     mpv --ytdl-format="[height<=?"$res"]" 'https://www.youtube.com/watch?v='$videoID    ;     exit; }
if ping -q -c 1 -W 1 1.1.1.1 &>/dev/null; then     youtube_search; else     echo "No internet connection"; fi
mkdir ArdourProjects
cd .config/ncmpcpp/
ls
cat config 
sudo killall ardour-
sudo killall ardour-5.12.0 
vim config 
man ncmpcpp 
ulimit -l
sudo vim /etc/security/limits.conf 
sudo pacman -S ardour
sudo pacman -S jack2
sudo pacman -Rs geoclue 
ls
sudo pacman -Rs jack
jackd
sudo pacman -S realtime-privileges 
man usermod 
usermod -a sam -G realtime 
sudo usermod -a sam -G realtime 
#!/bin/bash -i
apikey=AIzaSyAxoOzmqHSjvkv0LzYm5v4vUzvjorBu374
max_results=30
. "${HOME}/.cache/wal/colors.sh"
url_encode(){     ret=$(echo $@);     echo $(python -c "import urllib.parse, sys; print(urllib.parse.quote_plus(sys.argv[1]))" "$ret"); }
aborted(){     echo "Aborted";     exit; }
get_channel_id(){     channoulname=$(url_encode $channelname);     channelsearch=$(curl -s 'https://www.googleapis.com/youtube/v3/search?q='$channoulname'&type=channel&maxResults=25&part=snippet&key='$apikey)     chanchoice=$(echo $channelsearch | jq -r '.items[] | .snippet.channelTitle' | awk '{printf ("%2d: %s\n",NR,$0)}' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 10 -i -p 'Which channel ?' | sed 's/:.*//');     [[ ! -n $chanchoice ]] && youtube_search;     (( numchan= $chanchoice - 1 ));     channelID=$(echo $channelsearch | jq -r '.items['$numchan'].snippet.channelId'); }
youtube_search(){     channelID="";     searchingshit=$(cat ~/.script/youtube/datas/searchhistory | awk '{print$0}END{printf "\n\nChannel option"}' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -l 20 -p "Youtube search:") || aborted;     if [[ $searchingshit == 'Channel option' ]];then 	channelname=$(echo | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -p "Channel Search") || youtube_search;         get_channel_id; 	searchingshit=$(echo | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -l 20 -p "Search on this channel:") || youtube_search ;     fi;     echo $searchingshit >~/.script/youtube/datas/searchhistory     echo "Searching for "$searchingshit;     searchingshit=$(url_encode $searchingshit);     if [[ ! -n $channelID ]];then 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey;     else 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey'&channelId='$channelID;     fi         youtubesearchdata=$(curl -s $curly)     video=$(echo $youtubesearchdata | jq -r '.items[] | .snippet.title, .snippet.channelTitle, .snippet.publishedAt' | awk '{printf ("%.85s\n",$0)}' | awk '(NR%3==1){name=$0}(NR%3==2){date=$0}(NR%3==0){printf ("%2d: %-90s %-30s %.10s \n", NR/3, name, date, $0)}' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 30 -i -p 'YTSearch' | sed 's/:.*//');     [[ ! -n $video ]] && youtube_search;     (( num= $video - 1 ));     videoID=$(echo $youtubesearchdata | jq -r '.items['$num'].id.videoId')     res=$(echo -e "720\n1080\n360" | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -p "Which resolution? (if avalaible)") || youtube_search;     mpv --ytdl-format="[height<=?"$res"]" 'https://www.youtube.com/watch?v='$videoID    ;     exit; }
if ping -q -c 1 -W 1 1.1.1.1 &>/dev/null; then     youtube_search; else     echo "No internet connection"; fi
#!/bin/bash -i
apikey=AIzaSyAxoOzmqHSjvkv0LzYm5v4vUzvjorBu374
max_results=30
. "${HOME}/.cache/wal/colors.sh"
url_encode(){     ret=$(echo $@);     echo $(python -c "import urllib.parse, sys; print(urllib.parse.quote_plus(sys.argv[1]))" "$ret"); }
aborted(){     echo "Aborted";     exit; }
get_channel_id(){     channoulname=$(url_encode $channelname);     channelsearch=$(curl -s 'https://www.googleapis.com/youtube/v3/search?q='$channoulname'&type=channel&maxResults=25&part=snippet&key='$apikey)     chanchoice=$(echo $channelsearch | jq -r '.items[] | .snippet.channelTitle' | awk '{printf ("%2d: %s\n",NR,$0)}' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 10 -i -p 'Which channel ?' | sed 's/:.*//');     [[ ! -n $chanchoice ]] && youtube_search;     (( numchan= $chanchoice - 1 ));     channelID=$(echo $channelsearch | jq -r '.items['$numchan'].snippet.channelId'); }
youtube_search(){     channelID="";     searchingshit=$(cat ~/.script/youtube/datas/searchhistory | awk '{print$0}END{printf "\n\nChannel option"}' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -l 20 -p "Youtube search:") || aborted;     if [[ $searchingshit == 'Channel option' ]];then 	channelname=$(echo | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -p "Channel Search") || youtube_search;         get_channel_id; 	searchingshit=$(echo | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -l 20 -p "Search on this channel:") || youtube_search ;     fi;     echo $searchingshit >~/.script/youtube/datas/searchhistory     echo "Searching for "$searchingshit;     searchingshit=$(url_encode $searchingshit);     if [[ ! -n $channelID ]];then 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey;     else 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey'&channelId='$channelID;     fi         youtubesearchdata=$(curl -s $curly)     video=$(echo $youtubesearchdata | jq -r '.items[] | .snippet.title, .snippet.channelTitle, .snippet.publishedAt' | awk '{printf ("%.85s\n",$0)}' | awk '(NR%3==1){name=$0}(NR%3==2){date=$0}(NR%3==0){printf ("%2d: %-90s %-30s %.10s \n", NR/3, name, date, $0)}' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 30 -i -p 'YTSearch' | sed 's/:.*//');     [[ ! -n $video ]] && youtube_search;     (( num= $video - 1 ));     videoID=$(echo $youtubesearchdata | jq -r '.items['$num'].id.videoId')     res=$(echo -e "720\n1080\n360" | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -p "Which resolution? (if avalaible)") || youtube_search;     mpv --ytdl-format="[height<=?"$res"]" 'https://www.youtube.com/watch?v='$videoID    ;     exit; }
if ping -q -c 1 -W 1 1.1.1.1 &>/dev/null; then     youtube_search; else     echo "No internet connection"; fi
#!/bin/bash -i
apikey=AIzaSyAxoOzmqHSjvkv0LzYm5v4vUzvjorBu374
max_results=30
. "${HOME}/.cache/wal/colors.sh"
url_encode(){     ret=$(echo $@);     echo $(python -c "import urllib.parse, sys; print(urllib.parse.quote_plus(sys.argv[1]))" "$ret"); }
aborted(){     echo "Aborted";     exit; }
get_channel_id(){     channoulname=$(url_encode $channelname);     channelsearch=$(curl -s 'https://www.googleapis.com/youtube/v3/search?q='$channoulname'&type=channel&maxResults=25&part=snippet&key='$apikey)     chanchoice=$(echo $channelsearch | jq -r '.items[] | .snippet.channelTitle' | awk '{printf ("%2d: %s\n",NR,$0)}' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 10 -i -p 'Which channel ?' | sed 's/:.*//');     [[ ! -n $chanchoice ]] && youtube_search;     (( numchan= $chanchoice - 1 ));     channelID=$(echo $channelsearch | jq -r '.items['$numchan'].snippet.channelId'); }
youtube_search(){     channelID="";     searchingshit=$(cat ~/.script/youtube/datas/searchhistory | awk '{print$0}END{printf "\n\nChannel option"}' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -l 20 -p "Youtube search:") || aborted;     if [[ $searchingshit == 'Channel option' ]];then 	channelname=$(echo | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -p "Channel Search") || youtube_search;         get_channel_id; 	searchingshit=$(echo | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -l 20 -p "Search on this channel:") || youtube_search ;     fi;     echo $searchingshit >~/.script/youtube/datas/searchhistory     echo "Searching for "$searchingshit;     searchingshit=$(url_encode $searchingshit);     if [[ ! -n $channelID ]];then 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey;     else 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey'&channelId='$channelID;     fi         youtubesearchdata=$(curl -s $curly)     video=$(echo $youtubesearchdata | jq -r '.items[] | .snippet.title, .snippet.channelTitle, .snippet.publishedAt' | awk '{printf ("%.85s\n",$0)}' | awk '(NR%3==1){name=$0}(NR%3==2){date=$0}(NR%3==0){printf ("%2d: %-90s %-30s %.10s \n", NR/3, name, date, $0)}' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 30 -i -p 'YTSearch' | sed 's/:.*//');     [[ ! -n $video ]] && youtube_search;     (( num= $video - 1 ));     videoID=$(echo $youtubesearchdata | jq -r '.items['$num'].id.videoId')     res=$(echo -e "720\n1080\n360" | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -p "Which resolution? (if avalaible)") || youtube_search;     mpv --ytdl-format="[height<=?"$res"]" 'https://www.youtube.com/watch?v='$videoID    ;     exit; }
if ping -q -c 1 -W 1 1.1.1.1 &>/dev/null; then     youtube_search; else     echo "No internet connection"; fi
#!/bin/bash -i
apikey=AIzaSyAxoOzmqHSjvkv0LzYm5v4vUzvjorBu374
max_results=30
. "${HOME}/.cache/wal/colors.sh"
url_encode(){     ret=$(echo $@);     echo $(python -c "import urllib.parse, sys; print(urllib.parse.quote_plus(sys.argv[1]))" "$ret"); }
aborted(){     echo "Aborted";     exit; }
get_channel_id(){     channoulname=$(url_encode $channelname);     channelsearch=$(curl -s 'https://www.googleapis.com/youtube/v3/search?q='$channoulname'&type=channel&maxResults=25&part=snippet&key='$apikey)     chanchoice=$(echo $channelsearch | jq -r '.items[] | .snippet.channelTitle' | awk '{printf ("%2d: %s\n",NR,$0)}' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 10 -i -p 'Which channel ?' | sed 's/:.*//');     [[ ! -n $chanchoice ]] && youtube_search;     (( numchan= $chanchoice - 1 ));     channelID=$(echo $channelsearch | jq -r '.items['$numchan'].snippet.channelId'); }
youtube_search(){     channelID="";     searchingshit=$(cat ~/.script/youtube/datas/searchhistory | awk '{print$0}END{printf "\n\nChannel option"}' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -l 20 -p "Youtube search:") || aborted;     if [[ $searchingshit == 'Channel option' ]];then 	channelname=$(echo | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -p "Channel Search") || youtube_search;         get_channel_id; 	searchingshit=$(echo | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -l 20 -p "Search on this channel:") || youtube_search ;     fi;     echo $searchingshit >~/.script/youtube/datas/searchhistory     echo "Searching for "$searchingshit;     searchingshit=$(url_encode $searchingshit);     if [[ ! -n $channelID ]];then 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey;     else 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey'&channelId='$channelID;     fi         youtubesearchdata=$(curl -s $curly)     video=$(echo $youtubesearchdata | jq -r '.items[] | .snippet.title, .snippet.channelTitle, .snippet.publishedAt' | awk '{printf ("%.85s\n",$0)}' | awk '(NR%3==1){name=$0}(NR%3==2){date=$0}(NR%3==0){printf ("%2d: %-90s %-30s %.10s \n", NR/3, name, date, $0)}' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 30 -i -p 'YTSearch' | sed 's/:.*//');     [[ ! -n $video ]] && youtube_search;     (( num= $video - 1 ));     videoID=$(echo $youtubesearchdata | jq -r '.items['$num'].id.videoId')     res=$(echo -e "720\n1080\n360" | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -p "Which resolution? (if avalaible)") || youtube_search;     mpv --ytdl-format="[height<=?"$res"]" 'https://www.youtube.com/watch?v='$videoID    ;     exit; }
if ping -q -c 1 -W 1 1.1.1.1 &>/dev/null; then     youtube_search; else     echo "No internet connection"; fi
#!/bin/bash -i
apikey=AIzaSyAxoOzmqHSjvkv0LzYm5v4vUzvjorBu374
max_results=30
. "${HOME}/.cache/wal/colors.sh"
url_encode(){     ret=$(echo $@);     echo $(python -c "import urllib.parse, sys; print(urllib.parse.quote_plus(sys.argv[1]))" "$ret"); }
aborted(){     echo "Aborted";     exit; }
get_channel_id(){     channoulname=$(url_encode $channelname);     channelsearch=$(curl -s 'https://www.googleapis.com/youtube/v3/search?q='$channoulname'&type=channel&maxResults=25&part=snippet&key='$apikey)     chanchoice=$(echo $channelsearch | jq -r '.items[] | .snippet.channelTitle' | awk '{printf ("%2d: %s\n",NR,$0)}' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 10 -i -p 'Which channel ?' | sed 's/:.*//');     [[ ! -n $chanchoice ]] && youtube_search;     (( numchan= $chanchoice - 1 ));     channelID=$(echo $channelsearch | jq -r '.items['$numchan'].snippet.channelId'); }
youtube_search(){     channelID="";     searchingshit=$(cat ~/.script/youtube/datas/searchhistory | awk '{print$0}END{printf "\n\nChannel option"}' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -l 20 -p "Youtube search:") || aborted;     if [[ $searchingshit == 'Channel option' ]];then 	channelname=$(echo | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -p "Channel Search") || youtube_search;         get_channel_id; 	searchingshit=$(echo | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -l 20 -p "Search on this channel:") || youtube_search ;     fi;     echo $searchingshit >~/.script/youtube/datas/searchhistory     echo "Searching for "$searchingshit;     searchingshit=$(url_encode $searchingshit);     if [[ ! -n $channelID ]];then 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey;     else 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey'&channelId='$channelID;     fi         youtubesearchdata=$(curl -s $curly)     video=$(echo $youtubesearchdata | jq -r '.items[] | .snippet.title, .snippet.channelTitle, .snippet.publishedAt' | awk '{printf ("%.85s\n",$0)}' | awk '(NR%3==1){name=$0}(NR%3==2){date=$0}(NR%3==0){printf ("%2d: %-90s %-30s %.10s \n", NR/3, name, date, $0)}' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 30 -i -p 'YTSearch' | sed 's/:.*//');     [[ ! -n $video ]] && youtube_search;     (( num= $video - 1 ));     videoID=$(echo $youtubesearchdata | jq -r '.items['$num'].id.videoId')     res=$(echo -e "720\n1080\n360" | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -p "Which resolution? (if avalaible)") || youtube_search;     mpv --ytdl-format="[height<=?"$res"]" 'https://www.youtube.com/watch?v='$videoID    ;     exit; }
if ping -q -c 1 -W 1 1.1.1.1 &>/dev/null; then     youtube_search; else     echo "No internet connection"; fi
#!/bin/bash -i
apikey=AIzaSyAxoOzmqHSjvkv0LzYm5v4vUzvjorBu374
max_results=30
. "${HOME}/.cache/wal/colors.sh"
url_encode(){     ret=$(echo $@);     echo $(python -c "import urllib.parse, sys; print(urllib.parse.quote_plus(sys.argv[1]))" "$ret"); }
aborted(){     echo "Aborted";     exit; }
get_channel_id(){     channoulname=$(url_encode $channelname);     channelsearch=$(curl -s 'https://www.googleapis.com/youtube/v3/search?q='$channoulname'&type=channel&maxResults=25&part=snippet&key='$apikey)     chanchoice=$(echo $channelsearch | jq -r '.items[] | .snippet.channelTitle' | awk '{printf ("%2d: %s\n",NR,$0)}' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 10 -i -p 'Which channel ?' | sed 's/:.*//');     [[ ! -n $chanchoice ]] && youtube_search;     (( numchan= $chanchoice - 1 ));     channelID=$(echo $channelsearch | jq -r '.items['$numchan'].snippet.channelId'); }
youtube_search(){     channelID="";     searchingshit=$(cat ~/.script/youtube/datas/searchhistory | awk '{print$0}END{printf "\n\nChannel option"}' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -l 20 -p "Youtube search:") || aborted;     if [[ $searchingshit == 'Channel option' ]];then 	channelname=$(echo | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -p "Channel Search") || youtube_search;         get_channel_id; 	searchingshit=$(echo | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -l 20 -p "Search on this channel:") || youtube_search ;     fi;     echo $searchingshit >~/.script/youtube/datas/searchhistory     echo "Searching for "$searchingshit;     searchingshit=$(url_encode $searchingshit);     if [[ ! -n $channelID ]];then 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey;     else 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey'&channelId='$channelID;     fi         youtubesearchdata=$(curl -s $curly)     video=$(echo $youtubesearchdata | jq -r '.items[] | .snippet.title, .snippet.channelTitle, .snippet.publishedAt' | awk '{printf ("%.85s\n",$0)}' | awk '(NR%3==1){name=$0}(NR%3==2){date=$0}(NR%3==0){printf ("%2d: %-90s %-30s %.10s \n", NR/3, name, date, $0)}' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 30 -i -p 'YTSearch' | sed 's/:.*//');     [[ ! -n $video ]] && youtube_search;     (( num= $video - 1 ));     videoID=$(echo $youtubesearchdata | jq -r '.items['$num'].id.videoId')     res=$(echo -e "720\n1080\n360" | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -p "Which resolution? (if avalaible)") || youtube_search;     mpv --ytdl-format="[height<=?"$res"]" 'https://www.youtube.com/watch?v='$videoID    ;     exit; }
if ping -q -c 1 -W 1 1.1.1.1 &>/dev/null; then     youtube_search; else     echo "No internet connection"; fi
#!/bin/bash -i
apikey=AIzaSyAxoOzmqHSjvkv0LzYm5v4vUzvjorBu374
max_results=30
. "${HOME}/.cache/wal/colors.sh"
url_encode(){     ret=$(echo $@);     echo $(python -c "import urllib.parse, sys; print(urllib.parse.quote_plus(sys.argv[1]))" "$ret"); }
aborted(){     echo "Aborted";     exit; }
get_channel_id(){     channoulname=$(url_encode $channelname);     channelsearch=$(curl -s 'https://www.googleapis.com/youtube/v3/search?q='$channoulname'&type=channel&maxResults=25&part=snippet&key='$apikey)     chanchoice=$(echo $channelsearch | jq -r '.items[] | .snippet.channelTitle' | awk '{printf ("%2d: %s\n",NR,$0)}' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 10 -i -p 'Which channel ?' | sed 's/:.*//');     [[ ! -n $chanchoice ]] && youtube_search;     (( numchan= $chanchoice - 1 ));     channelID=$(echo $channelsearch | jq -r '.items['$numchan'].snippet.channelId'); }
youtube_search(){     channelID="";     searchingshit=$(cat ~/.script/youtube/datas/searchhistory | awk '{print$0}END{printf "\n\nChannel option"}' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -l 20 -p "Youtube search:") || aborted;     if [[ $searchingshit == 'Channel option' ]];then 	channelname=$(echo | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -p "Channel Search") || youtube_search;         get_channel_id; 	searchingshit=$(echo | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -l 20 -p "Search on this channel:") || youtube_search ;     fi;     echo $searchingshit >~/.script/youtube/datas/searchhistory     echo "Searching for "$searchingshit;     searchingshit=$(url_encode $searchingshit);     if [[ ! -n $channelID ]];then 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey;     else 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey'&channelId='$channelID;     fi         youtubesearchdata=$(curl -s $curly)     video=$(echo $youtubesearchdata | jq -r '.items[] | .snippet.title, .snippet.channelTitle, .snippet.publishedAt' | awk '{printf ("%.85s\n",$0)}' | awk '(NR%3==1){name=$0}(NR%3==2){date=$0}(NR%3==0){printf ("%2d: %-90s %-30s %.10s \n", NR/3, name, date, $0)}' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 30 -i -p 'YTSearch' | sed 's/:.*//');     [[ ! -n $video ]] && youtube_search;     (( num= $video - 1 ));     videoID=$(echo $youtubesearchdata | jq -r '.items['$num'].id.videoId')     res=$(echo -e "720\n1080\n360" | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -p "Which resolution? (if avalaible)") || youtube_search;     mpv --ytdl-format="[height<=?"$res"]" 'https://www.youtube.com/watch?v='$videoID    ;     exit; }
if ping -q -c 1 -W 1 1.1.1.1 &>/dev/null; then     youtube_search; else     echo "No internet connection"; fi
#!/bin/bash -i
apikey=AIzaSyAxoOzmqHSjvkv0LzYm5v4vUzvjorBu374
max_results=30
. "${HOME}/.cache/wal/colors.sh"
url_encode(){     ret=$(echo $@);     echo $(python -c "import urllib.parse, sys; print(urllib.parse.quote_plus(sys.argv[1]))" "$ret"); }
aborted(){     echo "Aborted";     exit; }
get_channel_id(){     channoulname=$(url_encode $channelname);     channelsearch=$(curl -s 'https://www.googleapis.com/youtube/v3/search?q='$channoulname'&type=channel&maxResults=25&part=snippet&key='$apikey)     chanchoice=$(echo $channelsearch | jq -r '.items[] | .snippet.channelTitle' | awk '{printf ("%2d: %s\n",NR,$0)}' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 10 -i -p 'Which channel ?' | sed 's/:.*//');     [[ ! -n $chanchoice ]] && youtube_search;     (( numchan= $chanchoice - 1 ));     channelID=$(echo $channelsearch | jq -r '.items['$numchan'].snippet.channelId'); }
youtube_search(){     channelID="";     searchingshit=$(cat ~/.script/youtube/datas/searchhistory | awk '{print$0}END{printf "\n\nChannel option"}' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -l 20 -p "Youtube search:") || aborted;     if [[ $searchingshit == 'Channel option' ]];then 	channelname=$(echo | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -p "Channel Search") || youtube_search;         get_channel_id; 	searchingshit=$(echo | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -l 20 -p "Search on this channel:") || youtube_search ;     fi;     echo $searchingshit >~/.script/youtube/datas/searchhistory     echo "Searching for "$searchingshit;     searchingshit=$(url_encode $searchingshit);     if [[ ! -n $channelID ]];then 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey;     else 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey'&channelId='$channelID;     fi         youtubesearchdata=$(curl -s $curly)     video=$(echo $youtubesearchdata | jq -r '.items[] | .snippet.title, .snippet.channelTitle, .snippet.publishedAt' | awk '{printf ("%.85s\n",$0)}' | awk '(NR%3==1){name=$0}(NR%3==2){date=$0}(NR%3==0){printf ("%2d: %-90s %-30s %.10s \n", NR/3, name, date, $0)}' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 30 -i -p 'YTSearch' | sed 's/:.*//');     [[ ! -n $video ]] && youtube_search;     (( num= $video - 1 ));     videoID=$(echo $youtubesearchdata | jq -r '.items['$num'].id.videoId')     res=$(echo -e "720\n1080\n360" | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -p "Which resolution? (if avalaible)") || youtube_search;     mpv --ytdl-format="[height<=?"$res"]" 'https://www.youtube.com/watch?v='$videoID    ;     exit; }
if ping -q -c 1 -W 1 1.1.1.1 &>/dev/null; then     youtube_search; else     echo "No internet connection"; fi
#!/bin/bash -i
apikey=AIzaSyAxoOzmqHSjvkv0LzYm5v4vUzvjorBu374
max_results=30
. "${HOME}/.cache/wal/colors.sh"
url_encode(){     ret=$(echo $@);     echo $(python -c "import urllib.parse, sys; print(urllib.parse.quote_plus(sys.argv[1]))" "$ret"); }
aborted(){     echo "Aborted";     exit; }
get_channel_id(){     channoulname=$(url_encode $channelname);     channelsearch=$(curl -s 'https://www.googleapis.com/youtube/v3/search?q='$channoulname'&type=channel&maxResults=25&part=snippet&key='$apikey)     chanchoice=$(echo $channelsearch | jq -r '.items[] | .snippet.channelTitle' | awk '{printf ("%2d: %s\n",NR,$0)}' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 10 -i -p 'Which channel ?' | sed 's/:.*//');     [[ ! -n $chanchoice ]] && youtube_search;     (( numchan= $chanchoice - 1 ));     channelID=$(echo $channelsearch | jq -r '.items['$numchan'].snippet.channelId'); }
youtube_search(){     channelID="";     searchingshit=$(cat ~/.script/youtube/datas/searchhistory | awk '{print$0}END{printf "\n\nChannel option"}' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -l 20 -p "Youtube search:") || aborted;     if [[ $searchingshit == 'Channel option' ]];then 	channelname=$(echo | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -p "Channel Search") || youtube_search;         get_channel_id; 	searchingshit=$(echo | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -l 20 -p "Search on this channel:") || youtube_search ;     fi;     echo $searchingshit >~/.script/youtube/datas/searchhistory     echo "Searching for "$searchingshit;     searchingshit=$(url_encode $searchingshit);     if [[ ! -n $channelID ]];then 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey;     else 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey'&channelId='$channelID;     fi         youtubesearchdata=$(curl -s $curly)     video=$(echo $youtubesearchdata | jq -r '.items[] | .snippet.title, .snippet.channelTitle, .snippet.publishedAt' | awk '{printf ("%.85s\n",$0)}' | awk '(NR%3==1){name=$0}(NR%3==2){date=$0}(NR%3==0){printf ("%2d: %-90s %-30s %.10s \n", NR/3, name, date, $0)}' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 30 -i -p 'YTSearch' | sed 's/:.*//');     [[ ! -n $video ]] && youtube_search;     (( num= $video - 1 ));     videoID=$(echo $youtubesearchdata | jq -r '.items['$num'].id.videoId')     res=$(echo -e "720\n1080\n360" | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -p "Which resolution? (if avalaible)") || youtube_search;     mpv --ytdl-format="[height<=?"$res"]" 'https://www.youtube.com/watch?v='$videoID    ;     exit; }
if ping -q -c 1 -W 1 1.1.1.1 &>/dev/null; then     youtube_search; else     echo "No internet connection"; fi
#!/bin/bash -i
apikey=AIzaSyAxoOzmqHSjvkv0LzYm5v4vUzvjorBu374
max_results=30
. "${HOME}/.cache/wal/colors.sh"
url_encode(){     ret=$(echo $@);     echo $(python -c "import urllib.parse, sys; print(urllib.parse.quote_plus(sys.argv[1]))" "$ret"); }
aborted(){     echo "Aborted";     exit; }
get_channel_id(){     channoulname=$(url_encode $channelname);     channelsearch=$(curl -s 'https://www.googleapis.com/youtube/v3/search?q='$channoulname'&type=channel&maxResults=25&part=snippet&key='$apikey)     chanchoice=$(echo $channelsearch | jq -r '.items[] | .snippet.channelTitle' | awk '{printf ("%2d: %s\n",NR,$0)}' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 10 -i -p 'Which channel ?' | sed 's/:.*//');     [[ ! -n $chanchoice ]] && youtube_search;     (( numchan= $chanchoice - 1 ));     channelID=$(echo $channelsearch | jq -r '.items['$numchan'].snippet.channelId'); }
youtube_search(){     channelID="";     searchingshit=$(cat ~/.script/youtube/datas/searchhistory | awk '{print$0}END{printf "\n\nChannel option"}' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -l 20 -p "Youtube search:") || aborted;     if [[ $searchingshit == 'Channel option' ]];then 	channelname=$(echo | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -p "Channel Search") || youtube_search;         get_channel_id; 	searchingshit=$(echo | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -l 20 -p "Search on this channel:") || youtube_search ;     fi;     echo $searchingshit >~/.script/youtube/datas/searchhistory     echo "Searching for "$searchingshit;     searchingshit=$(url_encode $searchingshit);     if [[ ! -n $channelID ]];then 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey;     else 	curly='https://www.googleapis.com/youtube/v3/search?q='$searchingshit'&type=video&maxResults='$max_results'&part=snippet&key='$apikey'&channelId='$channelID;     fi         youtubesearchdata=$(curl -s $curly)     video=$(echo $youtubesearchdata | jq -r '.items[] | .snippet.title, .snippet.channelTitle, .snippet.publishedAt' | awk '{printf ("%.85s\n",$0)}' | awk '(NR%3==1){name=$0}(NR%3==2){date=$0}(NR%3==0){printf ("%2d: %-90s %-30s %.10s \n", NR/3, name, date, $0)}' | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -l 30 -i -p 'YTSearch' | sed 's/:.*//');     [[ ! -n $video ]] && youtube_search;     (( num= $video - 1 ));     videoID=$(echo $youtubesearchdata | jq -r '.items['$num'].id.videoId')     res=$(echo -e "720\n1080\n360" | dmenu -nb "$color0" -nf "$color15" -sb "$color0" -sf "$color3" -i -p "Which resolution? (if avalaible)") || youtube_search;     mpv --ytdl-format="[height<=?"$res"]" 'https://www.youtube.com/watch?v='$videoID    ;     exit; }
if ping -q -c 1 -W 1 1.1.1.1 &>/dev/null; then     youtube_search; else     echo "No internet connection"; fi
cd Downloads/
ls
rm view_video.php\?viewkey\=ph5b9cce6e04fca 
mpv https://ev.phncdn.com/videos/201811/27/194045511/720P_1500K_194045511.mp4?validfrom=1550787705&validto=1550794905&rate=263k&burst=1200k&hash=HhrssGY%2B7DH33Ao51qTdy3Qc7Xk%3D
mpv https://www.pornhub.com/view_video.php?viewkey=ph5bfd83ec2cb53
ffmpeg https://www.pornhub.com/view_video.php?viewkey=ph5b9cce6e04fca
mpv https://www.pornhub.com/view_video.php?viewkey=ph5b9cce6e04fca
