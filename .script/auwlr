#!/bin/sh

auwlr_cache="${HOME}/.cache/auwlr"
auwlr_build="$auwlr_cache/build"
auwlr_pkg="$auwlr_cache/pkg"
auwlr_update_list="$auwlr_cache/auwlr_update_list"
auwlr_upgrade_list="$auwlr_cache/auwlr_upgrade_list"

mkdir -p $auwlr_pkg
mkdir -p $auwlr_build

error() {
    echo "error: $1"
    exit 1
}

get_packages_list() {
    search_shit="$1"

    curling=$(curl -s \
                   -G "https://aur.archlinux.org/packages/" \
                   -d "O=0" \
                   -d "SeB=nd" \
                   --data-urlencode "K=$search_shit" \
                   -d "outdated=" \
                   -d "SB=n" \
                   -d "SO=a" \
                   -d "do_Search=Go")

    echo "$curling" | grep "<td>" | tr -d '\n' | sed 's|<td><a[^>]*>\([^<>]*\)</a></td>|\n\1|g;s/<\/*td>//g'
}

git_clone_or_pull() {
    cd "$auwlr_build"
    if [ -d "$1" ];then
        cd "$1"
        echo "Pulling/Update $1 in $auwlr_build"...
        git pull origin master
    else
        echo "Installing $1 in $auwlr_build"...
        git clone "https://aur.archlinux.org/$1.git"
        cd "$1"
    fi
}

update_package() {
    curr_version="$1"
    package="$2"
    git_clone_or_pull "$package" > /dev/null 2>&1
    [ ! -f "$auwlr_build/$package/PKGBUILD" ] && exit 1
    pkg_epoch=$(grep "^epoch=" "$auwlr_build/$package/PKGBUILD" | sed 's/epoch=//')
    pkg_ver=$(grep "^pkgver=" "$auwlr_build/$package/PKGBUILD" | sed 's/pkgver=//')
    pkg_rel=$(grep "^pkgrel=" "$auwlr_build/$package/PKGBUILD" | sed 's/pkgrel=//')
    [ -n "$pkg_epoch" ] && pkg_epoch="$pkg_epoch:"
    [ -n "$pkg_rel" ] && pkg_rel="-$pkg_rel"
    package_version="$pkg_epoch$pkg_ver$pkg_rel"
    [ ! "$curr_version" = "$package_version" ] && echo "$package $curr_version -> $package_version"
}

auwlr_update() {
    echo "Checking version of installed packages"
    rm -f "$auwlr_update_list"
    pacman -Qm | while read pkg ver; do
        result=$(update_package "$ver" "$pkg")
        if [ -n "$result" ];then
            echo "$result" | grep -q "{" || echo "$result" >> "$auwlr_update_list"
        fi
        printf "."
    done
    echo
    [ -f "$auwlr_update_list" ] && cat "$auwlr_update_list" || echo "Everything is up to date!"
}

auwlr_build() {
    [ ! -f "$auwlr_update_list" ] && echo "Nothing to be upgraded, update first" && exit 1
    count=$(wc -l <"$auwlr_update_list")
    printf "\nPackages ($count) "
    sed 's/ .* -> /-/' "$auwlr_update_list"  | tr '\n' ' '
    printf "\n\n:: Proceed with build? [y/N]"
    read conf
    if [ "$conf" = "y" ];then
        while read pkg shits;do
            cd "$auwlr_build/$pkg"
            makepkg -sfc && {
                pkg_tar=$(makepkg --packagelist)
                echo "$pkg_tar" >> "$auwlr_upgrade_list"
                mv "$pkg_tar" "$auwlr_pkg/"
                grep -v "$pkg" "$auwlr_update_list" > /tmp/auwlrshit && mv /tmp/auwlrshit "$auwlr_update_list"
            }
        done < "$auwlr_update_list"
        rm "$auwlr_update_list"
    else
        echo "Auwlr Upgrade Aborted"
        exit 1
    fi
}

auwlr_upgrade() {
    [ ! -f "$auwlr_upgrade_list" ] && echo "Nothing to install or upgrade, use -Sy first" && exit 1
    sudo pacman -U $(cat $auwlr_cache/auwlr_upgrade_list | sed "s|.*/|$auwlr_pkg/|" | tr "\n" " " )
    rm "$auwlr_upgrade_list"
}

auwlr_clean_cache() {

    if [ ! $(ls "$auwlr_build" | wc -l) -eq 0 ];then
        build_size=$(du -h --max-depth=1 "$auwlr_build" | tail -n1 | tr "\t" " ")
        build_size=${build_size% *}
        echo "Clean build repos (size: $build_size)? [Y/n]"
        read yn_build
        [ "$yn_build" = "Y" -o "$yn_build" = y -o -z "$yn_build" ] && rm -fr "$auwlr_build"/*
    else
        echo "build clean!"
    fi

    if [ ! $(ls "$auwlr_pkg" | wc -l) -eq 0 ];then
        pkg_size=$(du -h --max-depth=1 "$auwlr_pkg" | tail -n1 | tr "\t" " ")
        pkg_size=${pkg_size% *}
        echo "Clean pkg ? (size: $pkg_size)? [y/N]"
        read yn_pkg
        [ "$yn_pkg" = "Y" -o "$yn_pkg" = y ] && rm "$auwlr_pkg"/*
    else
        echo "pkg clean!"
    fi

}

auwlr_install() {
    lastdir="$PWD"
    list_packages="$@"
    while [ -n "$list_packages" ]; do
        pkg="${list_packages##* }"
        echo "Building $pkg"
        git_clone_or_pull "$pkg" > /dev/null 2>&1
        cd "$auwlr_build/$pkg"
        makepkg -sfc && {
            pkg_tar=$(makepkg --packagelist)
            echo "$pkg_tar" >> "$auwlr_upgrade_list"
            mv "$pkg_tar" "$auwlr_pkg/"
        } || exit 1
        list_packages="${list_packages% *}"
    done
    cd "$lastdir"
}

while getopts "F:QSyuc" opt; do
    case $opt in
        F)
            [ -n "$OPTARG" ] && get_packages_list "$OPTARG"
            exit
            ;;
        Q)
            pacman -Qm
            cache_size=$(du -h "$auwlr_cache" --max-depth=0 2>/dev/null)
            echo "Cache size: ${cache_size%%/*}"
            exit 0
            ;;
        S) install_bool=t ;;
        y) upd_bool=t ;;
        u) upg_bool=t ;;
        c)
            auwlr_clean_cache
            exit 0
            ;;
        h) print_help ;;
    esac
done


print_help() {
    cat <<-EOF

    usage: auwlr <operation> [...]
    operations:
        auwlr -h: print this help
        auwlr -Q: print all packages installed with AUR
                  and the size of the cache
        auwlr -S [options] [package(s)]
               options are:
                   -y : update installed AUR packages with git
                   -u : upgrade installed packages and build them
                   -c : clean build directory and pkg cache

EOF
}


if [ -n "$install_bool" ]; then
    auwlr_install "${@#$1}"
    [ -n "$upd_bool" ] && auwlr_update
    [ -n "$upg_bool" ] && auwlr_build
    auwlr_upgrade
    auwlr_clean_cache
    exit 0
else
    echo "Options y and u need to be used with S"
    print_help
    exit 1
fi
