#!/bin/sh

# get my private twitch_clientID
. "${HOME}/.authentification/apikeys.sh"

# colors from wpgtk/pywal
. "${HOME}/.cache/wal/colors.sh"

# Parameters
channelsfile=${HOME}/.script/twitch/datas/listchanneltwitch
gamesfile=${HOME}/.script/twitch/datas/listgamestwitch
gamesdb=${HOME}/.script/gamedatabase/gamesdb
chat_command="brave -new-window"

max_vid=100

dmenucmd="dmenu -nb $color0 -nf $color15 -sb $color0 -sf $color3"

echoerror () {
    echo "$*"
    noshit="$*. Choose an other game:"
    twitchgamefunction
}

aborted () {
    echo "Aborted"
    exit
}

get_user_id () {
    input="$*"
    if echo "$input" | grep -q "^[0-9]*$";then
        curl_data=$(curl -s \
                         -H "Client-ID: $twitch_clientID" \
                         -G "https://api.twitch.tv/helix/users" \
                         --data-urlencode "id=$*")
        output=$(echo "$curl_data" | jq -r '.data[] | .login')
    else
        curl_data=$(curl -s \
                         -H "Client-ID: $twitch_clientID" \
                         -G "https://api.twitch.tv/helix/users" \
                         --data-urlencode "login=$*")
        output=$(echo "$curl_data" | jq -r '.data[] | .id')
    fi
    [ -n "$output" ] && echo "$output" || echoerror "Nothing found for $*"
}


get_game_info () {
    input="$*"
    if echo "$input" | grep -q "^[0-9]*$";then
        curl_data=$(curl -s \
                         -H "Client-ID: $twitch_clientID" \
                         -G "https://api.twitch.tv/helix/games" \
                         --data-urlencode "id=$*")
        output=$(echo "$curl_data" | jq -r '.data[] | .name')
    else
        curl_data=$(curl -s \
                         -H "Client-ID: $twitch_clientID" \
                         -G "https://api.twitch.tv/helix/games" \
                         --data-urlencode "name=$*")
        output=$(echo "$curl_data" | jq -r '.data[] | .id')
    fi
    [ -n "$output" ] && echo "$output" || echoerror "Nothing found for $*"
}

check_and_launch(){
    game_name="$*"
    echo "Checking connected streams for $* ..."
    twitchdata=$(curl -s \
                      -H "Client-ID: $twitch_clientID" \
                      -G "https://api.twitch.tv/helix/streams" \
                      --data-urlencode "game_id=$(get_game_info $game_name)")

    stream_list=$(echo "$twitchdata" | jq -r '.data[] | .language, .user_name' | awk 'NR%2{printf "%s:",$0;next;}1')
    [ -z "$stream_list" ] && echoerror "No streams"
    stream=$(echo "$stream_list" | $dmenucmd -i -l 10 -p "Which stream ?") || aborted
    stream=$(echo "$stream" | sed 's/.*://')
    exec $chat_command "https://www.twitch.tv/popout/$stream/chat?darkpopout" & mpv "https://www.twitch.tv/$(echo $stream | tr [A-Z] [a-z])"
    exit
}

twitchgamefunction () {
    game=$(awk '{print $0} END { printf "Other\nAdd" }' "$gamesfile" | $dmenucmd -l 10 -i -p "$noshit") || aborted
    if [ "$game" = "Add" ];then
        local dprompt="Which game do you want to add on favorite?"
        game=$($dmenucmd -l 10 -i -p "$dprompt" < "$gamesdb") || aborted
        echo "$game" >> "$gamesfile"

        local dprompt="Do you want to check streams for $game?"
        cert=$(printf "No\nYes" | $dmenucmd -l 10 -i -p "$dprompt")
        [ "$cert" = "Yes" ] || aborted

    elif [ "$game" = "Other" ]; then
        game=$($dmenucmd -l 10 -i -p "$noshit" < "$gamesdb") || aborted
    fi

    check_and_launch "$game"
}

twitchlivefunction () {
    if [ -n "$*" ]; then
        echo "Checking if $* is live ..."
        test=$(curl -s \
                    -H "Client-ID: $twitch_clientID" \
                    -G "https://api.twitch.tv/helix/streams" \
                    -d "user_login=$*" | jq '.data | length')
        [ ! "$test" = 0 ] && (exec $chat_command "https://www.twitch.tv/popout/$*/chat?darkpopout" & mpv "https://www.twitch.tv/$*") || echo "$* doesn't stream right now"
        exit
    else
        echo "Checking connected streams ..."
        userlogins=$(awk '{printf "user_login="$1"&"}' "$channelsfile")
        twitchdata=$(curl -s \
                          -H "Client-ID: $twitch_clientID" \
                          -G "https://api.twitch.tv/helix/streams" \
                          -d "$userlogins")

        game_ids=$(echo "$twitchdata" | jq -r '.data[] | .game_id' | awk '{printf "id="$1"&"}')
        curl_data=$(curl -s \
                         -H "Client-ID: $twitch_clientID" \
                         -G "https://api.twitch.tv/helix/games" \
                         -d "$game_ids")
        game_dico=$(echo "$curl_data" | jq -r '.data[] | .id,.name' | awk 'NR%2{printf "%s ",$0;next;}1')

        streams_test=$(echo "$twitchdata" | jq -r '.data[] | .user_name, .game_id')
        stream=$(echo "$streams_test" | while read a;do echo "$a" | grep -q "^[0-9]*$" && echo "$game_dico" | grep "$a" | sed 's/^[0-9]* //' || echo "$a";done | awk 'NR%2{printf "%14s : ",$0;next;}1' | $dmenucmd -l 10 -i -p "Which stream do you want to watch?") || aborted
        stream=$(echo "$stream" | sed 's/ *\([^ ]*\).*/\1/')
        exec $chat_command -new-window "https://www.twitch.tv/popout/$stream/chat?darkpopout" & mpv "https://www.twitch.tv/$stream"
        exit
    fi
}

twitchvod_search(){
    searchingshit=$($dmenucmd -l 10 -p "TwitchVOD Channel:" < "$channelsfile") || aborted
    printf "Searching for video on %s\n" "$searchingshit"
    curl_choose_and_watch
}

curl_choose_and_watch(){

    #curl the api twitch vod search for a channel
    twitchvod=$(curl -s \
                     -H "Client-ID: $twitch_clientID" \
                     -G "https://api.twitch.tv/helix/videos" \
                     -d "user_id=$(get_user_id $searchingshit)" \
                     -d "first=$max_vid" )

    total_vod=$(echo "$twitchvod" | jq -r '.data | length')
    [ "$total_vod" = "null" ] || [ "$total_vod" = 0 ] && twitchvod_search

    #create a table with all of the videos and get the url of the chosen one
    : $(( borne_max=total_vod - max_vid ))
    video=$(echo "$twitchvod" | jq -r '.data[] | .title, .created_at' | awk -v bm=$borne_max -v offs="$offset" 'BEGIN{ if (offs > 0 ) { printf "Prev\n" } }!(NR%2){printf ("%3d: %-100s %.10s\n", FNR/2+offs, p, $0)}{p=$0}END{ if (offs < bm) { printf "Next" } }' | $dmenucmd -i -l 30 -p "Which video?" | sed 's/:.*//')

    if [ -z "$video" ];then
        twitchvod_search
    elif [ "$video" = "Next" ];then
        : $(( offset=offset+100 ))
        curl_choose_and_watch
    elif [ "$video" = "Prev" ];then
        : $(( offset=offset-100 ))
        curl_choose_and_watch
    else
        : $(( num=video-1-offset ))
        videourl=$(echo "$twitchvod" | jq -r '.data['$num'].url')

        # ask for the resolution and launch the video with mpv
        res=$(printf "720\n1080\n360" | $dmenucmd -i -p "Which resolution? (if avalaible)") || twitchvod_search
        mpv --ytdl-format="[height<=?$res]" "$videourl" || twitchvod_search
        exit
    fi
}

! ping -q -c 1 -W 1 1.1.1.1 >/dev/null 2>&1 && echo "No internet connection" && exit

case $1 in
    --live)
        twitchlivefunction "$2" ;;
    --game)
        args=$(echo "$*" | sed "s/$1 *//")
        noshit="Choose a game"
        [ -n "$args" ] && check_and_launch "$args"
        twitchgamefunction ;;
    --vod)
        offset=0
        twitchvod_search ;;
    *) echo "usage: twitchscript --live (stream name), --vod, --game (game)" ;;
esac
