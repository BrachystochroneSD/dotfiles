#!/bin/sh

auth_file="${HOME}/.authentification/apikeys.sh"

# get my private twitch_clientID
. "${HOME}/.authentification/apikeys.sh"

# colors from wpgtk/pywal
. "${HOME}/.cache/wal/colors.sh"

# Parameters
scriptdir="${HOME}/.script/twitch"
channelsfile="$scriptdir/datas/listchanneltwitch"
laststreamfile="$scriptdir/datas/lastchannelviewed"
gamesfile="$scriptdir/datas/listgamestwitch"
gamesdb="${HOME}/.script/gamedatabase/gamesdb"
chat_command="brave -new-window"

max_vid=100

if [ -n "$QUIETOPT" ]; then
    menucmd="fzfcmd"
else
    menucmd="dmenu -nb $color0 -nf $color15 -sb $color0 -sf $color3"
fi

touch "$laststreamfile"

get_token(){
    curl -sX POST https://id.twitch.tv/oauth2/token \
         --data "client_id=$twitch_clientID" \
         --data "client_secret=$twitch_secret" \
         --data "grant_type=client_credentials"
}

refresh_access_token(){
    local token=$(get_token | jq -r '.access_token')
    sed -i "s/\(^twitch_access_token=\).*/\1$token/" "$auth_file"
}


fzfcmd(){
    local prompt
    local iflag
    while getopts "ip:l:" opt; do
        case $opt in
            p) prompt=$OPTARG ;;
            l) lflag=shit ;;
            i) iflag="-i";;
        esac
    done
    [ -z "$prompt" ] && prompt=">"
    fzf --prompt="$prompt" "$iflag"
}

echoerror() {
    echo "$*"
    noshit="$*. Choose an other game:"
    twitchgamefunction
}

aborted() {
    [ -n "$1" ] && echo "Error: $1"
    exit 1
}

check_internet() {
    if ! ping -q -c 1 -W 1 1.1.1.1 >/dev/null 2>&1; then
        aborted "No internet connection"
    fi
}

get_user_id() {
    input="$*"
    if echo "$input" | grep -q "^[0-9]*$";then
        curl_data=$(curl -s \
                         -H "Client-ID: $twitch_clientID" \
                         -H "Authorization: Bearer $twitch_access_token" \
                         -G "https://api.twitch.tv/helix/users" \
                         --data-urlencode "id=$*")
        output=$(echo "$curl_data" | jq -r '.data[] | .login')
    else
        curl_data=$(curl -s \
                         -H "Client-ID: $twitch_clientID" \
                         -H "Authorization: Bearer $twitch_access_token" \
                         -G "https://api.twitch.tv/helix/users" \
                         --data-urlencode "login=$*")
        output=$(echo "$curl_data" | jq -r '.data[] | .id')
    fi
    [ -n "$output" ] && echo "$output" || aborted "Nothing found for $*"
}

get_game_info () {
    input="$*"
    if echo "$input" | grep -q "^[0-9]*$";then
        curl_data=$(curl -s \
                         -H "Client-ID: $twitch_clientID" \
                         -H "Authorization: Bearer $twitch_access_token" \
                         -G "https://api.twitch.tv/helix/games" \
                         --data-urlencode "id=$*")
        output=$(echo "$curl_data" | jq -r '.data[] | .name')
    else
        curl_data=$(curl -s \
                         -H "Client-ID: $twitch_clientID" \
                         -H "Authorization: Bearer $twitch_access_token" \
                         -G "https://api.twitch.tv/helix/games" \
                         --data-urlencode "name=$*")
        output=$(echo "$curl_data" | jq -r '.data[] | .id')
    fi
    [ -n "$output" ] && echo "$output" || echoerror "Nothing found for $*"
}

check_and_launch () {
    game_name="$*"
    echo "Checking connected streams for $* ..."
    twitchdata=$(curl -s \
                      -H "Client-ID: $twitch_clientID" \
                      -H "Authorization: Bearer $twitch_access_token" \
                      -G "https://api.twitch.tv/helix/streams" \
                      --data-urlencode "game_id=$(get_game_info $game_name)")

    stream_list=$(echo "$twitchdata" | sed 's/\\n//g' | jq -r '.data[] | .language, .user_name, .title, .viewer_count' | awk '(NR%4==1){lg=$0}(NR%4==2){name=$0}(NR%4==3){title=$0}(NR%4==0){printf "%s:%s \"%s\" %s\n",lg,name,title,$0}')
    [ -z "$stream_list" ] && echoerror "No streams"

    stream=$(echo "$stream_list" | $menucmd -i -l 10 -p "Streams: ") || aborted

    stream=$(echo "$stream" | sed 's/.*:\([^ ]*\).*/\1/')
    echo "$stream" > "$laststreamfile"
    [ -z "$QUIETOPT" ] && exec $chat_command "https://www.twitch.tv/popout/$stream/chat?darkpopout" & mpv "https://www.twitch.tv/$(echo $stream | tr [A-Z] [a-z])"
    exit
}

twitchgamefunction () {
    game=$(echo -e "$(cat $gamesfile)\n\nOther\nAdd Game" | $menucmd -l 15 -i -p "$noshit") || aborted

    case "$game" in
        "Add Game")
            local dprompt="Add game: "
            game=$($menucmd -l 10 -i -p "$dprompt" < "$gamesdb") || aborted
            echo "$game" >> "$gamesfile"

            local dprompt="Do you want to check streams for $game? "
            cert=$(printf "No\nYes" | $menucmd -l 10 -i -p "$dprompt")
            [ "$cert" = "Yes" ] || aborted
            ;;
        "Other")
            game=$($menucmd -l 10 -i -p "$noshit" < "$gamesdb") || aborted
            check_and_launch "$game" ;;
        *)
            check_and_launch "$game" ;;
    esac
}

twitchlivefunction () {
    if [ -n "$*" ]; then
        echo "Checking if $* is live ..."
        test=$(curl -s \
                    -H "Client-ID: $twitch_clientID" \
                    -H "Authorization: Bearer $twitch_access_token" \
                    -G "https://api.twitch.tv/helix/streams" \
                    -d "user_login=$*" | jq '.data | length')
        [ ! "$test" = 0 ] && (exec $chat_command "https://www.twitch.tv/popout/$*/chat?darkpopout" & mpv "https://www.twitch.tv/$*") || echo "$* doesn't stream right now"
        exit
    else
        echo "Checking connected streams ..."
        userlogins=$(awk '{printf "user_login="$1"&"}' "$channelsfile")
        twitchdata=$(curl -s \
                          -H "Client-ID: $twitch_clientID" \
                          -H "Authorization: Bearer $twitch_access_token" \
                          -G "https://api.twitch.tv/helix/streams" \
                          -d "$userlogins")

        game_ids=$(echo "$twitchdata" | jq -r '.data[] | .game_id' | awk '{printf "id="$1"&"}')
        curl_data=$(curl -s \
                         -H "Client-ID: $twitch_clientID" \
                         -H "Authorization: Bearer $twitch_access_token" \
                         -G "https://api.twitch.tv/helix/games" \
                         -d "$game_ids")
        game_dico=$(echo "$curl_data" | jq -r '.data[] | .id,.name' | awk 'NR%2{printf "%s ",$0;next;}1')

        streams_test=$(echo "$twitchdata" | jq -r '.data[] | .user_name, .game_id')
        stream=$(echo "$streams_test" | while read a;do echo "$a" | grep -q "^[0-9]*$" && echo "$game_dico" | grep "$a" | sed 's/^[0-9]* //' || echo "$a";done | awk 'NR%2{printf "%14s : ",$0;next;}1' | $menucmd -l 10 -i -p "Streams: ") || aborted
        stream=$(echo "$stream" | sed 's/ *\([^ ]*\).*/\1/')
        [ -z "$QUIETOPT" ] && exec $chat_command "https://www.twitch.tv/popout/$stream/chat?darkpopout" & mpv "https://www.twitch.tv/$stream"
        exit
    fi
}

twitchvod_search(){
    searchingshit=$(sort "$channelsfile" | $menucmd -i -l 10 -p "TwitchVOD Channel: ") || aborted
    printf "Searching for video on %s\n" "$searchingshit"
    curl_choose_and_watch
}

curl_choose_and_watch(){
    #curl the api twitch vod search for a channel
    twitchvod=$(curl -s \
                     -H "Client-ID: $twitch_clientID" \
                     -H "Authorization: Bearer $twitch_access_token" \
                     -G "https://api.twitch.tv/helix/videos" \
                     -d "user_id=$(get_user_id $searchingshit)" \
                     -d "first=$max_vid" )

    total_vod=$(echo "$twitchvod" | jq -r '.data | length')
    [ "$total_vod" = "null" ] || [ "$total_vod" = 0 ] && twitchvod_search

    #create a table with all of the videos and get the url of the chosen one
    : $(( borne_max=total_vod - max_vid ))
    video=$(echo "$twitchvod" | jq -r '.data[] | .title, .created_at' | awk -v bm=$borne_max -v offs="$offset" 'BEGIN{ if (offs > 0 ) { printf "Prev\n" } }!(NR%2){printf ("%3d: %-100s %.10s\n", FNR/2+offs, p, $0)}{p=$0}END{ if (offs < bm) { printf "Next" } }' | $menucmd -i -l 30 -p "Which video: " | sed 's/:.*//')

    if [ -z "$video" ];then
        twitchvod_search
    elif [ "$video" = "Next" ];then
        : $(( offset=offset+100 ))
        curl_choose_and_watch
    elif [ "$video" = "Prev" ];then
        : $(( offset=offset-100 ))
        curl_choose_and_watch
    else
        : $(( num=video-1-offset ))
        videourl=$(echo "$twitchvod" | jq -r '.data['$num'].url')

        # ask for the resolution and launch the video with mpv
        res=$(printf "720\n1080\n360" | $menucmd -i -p "Which resolution? (if avalaible): ") || twitchvod_search
        mpv --ytdl-format="[height<=?$res]" "$videourl" || twitchvod_search
        exit
    fi
}

delete_streamer() {
    streamer_to_delete=$(sort "$channelsfile" | $menucmd -i -l 10 -p "Delete streamer: ")
    grep -v "$streamer_to_delete" "$channelsfile" > /tmp/chanshit && mv /tmp/chanshit "$channelsfile"
}

twitchmenu() {
    laststreamer=$(cat "$laststreamfile")
    choice=$(printf "LIVE\nGAMES\nVOD\n\nAdd last streamer: $laststreamer\nDelete streamer" | $menucmd -i -l 10 -p "Twitch Menu :")

    case "$choice" in
        "LIVE")
        twitchlivefunction "$2" ;;
        "GAMES")
            args=$(echo "$*" | sed "s/$1 *//")
            noshit="Choose a game: "
            [ -n "$args" ] && check_and_launch "$args"
            twitchgamefunction ;;
        "VOD")
            offset=0
            twitchvod_search ;;
        "Add last streamer: $laststreamer") cat "$laststreamfile" >> "$channelsfile" ;;
        "Delete streamer") delete_streamer ;;
        *) aborted ;;
    esac
}

check_internet

case $1 in
    --menu)
        twitchmenu
        ;;
    --live)
        twitchlivefunction "$2" ;;
    --game)
        args=$(echo "$*" | sed "s/$1 *//")
        noshit="Choose a game: "
        [ -n "$args" ] && check_and_launch "$args"
        twitchgamefunction ;;
    --vod)
        offset=0
        twitchvod_search ;;
    --refresh-token) refresh_access_token ;;
    *) echo "usage: twitchscript --live (stream name), --vod, --game (game) or --refresh-token" ;;
esac
